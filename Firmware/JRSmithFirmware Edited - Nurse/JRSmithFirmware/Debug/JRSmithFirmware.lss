
JRSmithFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000346c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040346c  0040346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .got          00000164  00403474  00403474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .got.plt      0000000c  004035d8  004035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .relocate     0000043c  20000000  004035e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          000004d8  2000043c  00403a20  0002043c  2**2
                  ALLOC
  6 .stack        00003004  20000914  00403ef8  0002043c  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  9 .debug_info   000109f8  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002237  00000000  00000000  00030eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aca  00000000  00000000  000330ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e8  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  000395a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000050bc  00000000  00000000  00039ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b638  00000000  00000000  0003ef94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0004c97a  00000000  00000000  0004a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002d9c  00000000  00000000  00096f48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 39 00 20 05 1f 40 00 e9 1f 40 00 e9 1f 40 00     .9. ..@...@...@.
  400010:	e9 1f 40 00 e9 1f 40 00 e9 1f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e9 1f 40 00 e9 1f 40 00 00 00 00 00 e9 1f 40 00     ..@...@.......@.
  40003c:	e9 1f 40 00 e9 1f 40 00 e9 1f 40 00 e9 1f 40 00     ..@...@...@...@.
  40004c:	e9 1f 40 00 e9 1f 40 00 e9 1f 40 00 e9 1f 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 e9 1f 40 00 e9 1f 40 00 00 00 00 00     ......@...@.....
  40006c:	19 03 40 00 3d 03 40 00 00 00 00 00 45 17 40 00     ..@.=.@.....E.@.
  40007c:	e9 1f 40 00 00 00 00 00 00 00 00 00 e9 1f 40 00     ..@...........@.
  40008c:	e9 1f 40 00 e9 1f 40 00 e9 1f 40 00 e9 1f 40 00     ..@...@...@...@.
  40009c:	39 15 40 00 e9 1f 40 00 e9 1f 40 00 00 00 00 00     9.@...@...@.....
	...
  4000b4:	e9 1f 40 00 e9 1f 40 00 e9 1f 40 00 e9 1f 40 00     ..@...@...@...@.
  4000c4:	e9 1f 40 00 e9 1f 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403474 	.word	0x00403474

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403474 	.word	0x00403474
  40012c:	20000440 	.word	0x20000440
  400130:	00403474 	.word	0x00403474
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b590      	push	{r4, r7, lr}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
  400142:	4c37      	ldr	r4, [pc, #220]	; (400220 <pio_handler_process+0xe8>)
  400144:	447c      	add	r4, pc
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400146:	6878      	ldr	r0, [r7, #4]
  400148:	4b36      	ldr	r3, [pc, #216]	; (400224 <pio_handler_process+0xec>)
  40014a:	58e3      	ldr	r3, [r4, r3]
  40014c:	4798      	blx	r3
  40014e:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400150:	6878      	ldr	r0, [r7, #4]
  400152:	4b35      	ldr	r3, [pc, #212]	; (400228 <pio_handler_process+0xf0>)
  400154:	58e3      	ldr	r3, [r4, r3]
  400156:	4798      	blx	r3
  400158:	4602      	mov	r2, r0
  40015a:	68fb      	ldr	r3, [r7, #12]
  40015c:	4013      	ands	r3, r2
  40015e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400160:	68fb      	ldr	r3, [r7, #12]
  400162:	2b00      	cmp	r3, #0
  400164:	d048      	beq.n	4001f8 <pio_handler_process+0xc0>
		/* Find triggering source */
		i = 0;
  400166:	2300      	movs	r3, #0
  400168:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40016a:	e040      	b.n	4001ee <pio_handler_process+0xb6>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40016c:	4b2f      	ldr	r3, [pc, #188]	; (40022c <pio_handler_process+0xf4>)
  40016e:	447b      	add	r3, pc
  400170:	461a      	mov	r2, r3
  400172:	68bb      	ldr	r3, [r7, #8]
  400174:	011b      	lsls	r3, r3, #4
  400176:	4413      	add	r3, r2
  400178:	681a      	ldr	r2, [r3, #0]
  40017a:	683b      	ldr	r3, [r7, #0]
  40017c:	429a      	cmp	r2, r3
  40017e:	d130      	bne.n	4001e2 <pio_handler_process+0xaa>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400180:	4b2b      	ldr	r3, [pc, #172]	; (400230 <pio_handler_process+0xf8>)
  400182:	447b      	add	r3, pc
  400184:	461a      	mov	r2, r3
  400186:	68bb      	ldr	r3, [r7, #8]
  400188:	011b      	lsls	r3, r3, #4
  40018a:	4413      	add	r3, r2
  40018c:	3304      	adds	r3, #4
  40018e:	681a      	ldr	r2, [r3, #0]
  400190:	68fb      	ldr	r3, [r7, #12]
  400192:	4013      	ands	r3, r2
  400194:	2b00      	cmp	r3, #0
  400196:	d024      	beq.n	4001e2 <pio_handler_process+0xaa>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400198:	4b26      	ldr	r3, [pc, #152]	; (400234 <pio_handler_process+0xfc>)
  40019a:	447b      	add	r3, pc
  40019c:	461a      	mov	r2, r3
  40019e:	68bb      	ldr	r3, [r7, #8]
  4001a0:	011b      	lsls	r3, r3, #4
  4001a2:	4413      	add	r3, r2
  4001a4:	330c      	adds	r3, #12
  4001a6:	681b      	ldr	r3, [r3, #0]
  4001a8:	4a23      	ldr	r2, [pc, #140]	; (400238 <pio_handler_process+0x100>)
  4001aa:	447a      	add	r2, pc
  4001ac:	4611      	mov	r1, r2
  4001ae:	68ba      	ldr	r2, [r7, #8]
  4001b0:	0112      	lsls	r2, r2, #4
  4001b2:	440a      	add	r2, r1
  4001b4:	6810      	ldr	r0, [r2, #0]
  4001b6:	4a21      	ldr	r2, [pc, #132]	; (40023c <pio_handler_process+0x104>)
  4001b8:	447a      	add	r2, pc
  4001ba:	4611      	mov	r1, r2
  4001bc:	68ba      	ldr	r2, [r7, #8]
  4001be:	0112      	lsls	r2, r2, #4
  4001c0:	440a      	add	r2, r1
  4001c2:	3204      	adds	r2, #4
  4001c4:	6812      	ldr	r2, [r2, #0]
  4001c6:	4611      	mov	r1, r2
  4001c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ca:	4b1d      	ldr	r3, [pc, #116]	; (400240 <pio_handler_process+0x108>)
  4001cc:	447b      	add	r3, pc
  4001ce:	461a      	mov	r2, r3
  4001d0:	68bb      	ldr	r3, [r7, #8]
  4001d2:	011b      	lsls	r3, r3, #4
  4001d4:	4413      	add	r3, r2
  4001d6:	3304      	adds	r3, #4
  4001d8:	681b      	ldr	r3, [r3, #0]
  4001da:	43db      	mvns	r3, r3
  4001dc:	68fa      	ldr	r2, [r7, #12]
  4001de:	4013      	ands	r3, r2
  4001e0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001e2:	68bb      	ldr	r3, [r7, #8]
  4001e4:	3301      	adds	r3, #1
  4001e6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001e8:	68bb      	ldr	r3, [r7, #8]
  4001ea:	2b06      	cmp	r3, #6
  4001ec:	d803      	bhi.n	4001f6 <pio_handler_process+0xbe>
		while (status != 0) {
  4001ee:	68fb      	ldr	r3, [r7, #12]
  4001f0:	2b00      	cmp	r3, #0
  4001f2:	d1bb      	bne.n	40016c <pio_handler_process+0x34>
  4001f4:	e000      	b.n	4001f8 <pio_handler_process+0xc0>
				break;
  4001f6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001f8:	4b12      	ldr	r3, [pc, #72]	; (400244 <pio_handler_process+0x10c>)
  4001fa:	58e3      	ldr	r3, [r4, r3]
  4001fc:	681b      	ldr	r3, [r3, #0]
  4001fe:	2b00      	cmp	r3, #0
  400200:	d009      	beq.n	400216 <pio_handler_process+0xde>
		if (pio_capture_handler) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <pio_handler_process+0x110>)
  400204:	447b      	add	r3, pc
  400206:	681b      	ldr	r3, [r3, #0]
  400208:	2b00      	cmp	r3, #0
  40020a:	d004      	beq.n	400216 <pio_handler_process+0xde>
			pio_capture_handler(p_pio);
  40020c:	4b0f      	ldr	r3, [pc, #60]	; (40024c <pio_handler_process+0x114>)
  40020e:	447b      	add	r3, pc
  400210:	681b      	ldr	r3, [r3, #0]
  400212:	6878      	ldr	r0, [r7, #4]
  400214:	4798      	blx	r3
		}
	}
#endif
}
  400216:	bf00      	nop
  400218:	3714      	adds	r7, #20
  40021a:	46bd      	mov	sp, r7
  40021c:	bd90      	pop	{r4, r7, pc}
  40021e:	bf00      	nop
  400220:	0000332c 	.word	0x0000332c
  400224:	000000fc 	.word	0x000000fc
  400228:	00000114 	.word	0x00000114
  40022c:	1fc002e6 	.word	0x1fc002e6
  400230:	1fc002d2 	.word	0x1fc002d2
  400234:	1fc002ba 	.word	0x1fc002ba
  400238:	1fc002aa 	.word	0x1fc002aa
  40023c:	1fc0029c 	.word	0x1fc0029c
  400240:	1fc00288 	.word	0x1fc00288
  400244:	00000094 	.word	0x00000094
  400248:	1fc002c4 	.word	0x1fc002c4
  40024c:	1fc002ba 	.word	0x1fc002ba

00400250 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400250:	b590      	push	{r4, r7, lr}
  400252:	b087      	sub	sp, #28
  400254:	af00      	add	r7, sp, #0
  400256:	60f8      	str	r0, [r7, #12]
  400258:	60b9      	str	r1, [r7, #8]
  40025a:	607a      	str	r2, [r7, #4]
  40025c:	603b      	str	r3, [r7, #0]
  40025e:	4c26      	ldr	r4, [pc, #152]	; (4002f8 <pio_handler_set+0xa8>)
  400260:	447c      	add	r4, pc
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400262:	4b26      	ldr	r3, [pc, #152]	; (4002fc <pio_handler_set+0xac>)
  400264:	447b      	add	r3, pc
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	2b06      	cmp	r3, #6
  40026a:	d901      	bls.n	400270 <pio_handler_set+0x20>
		return 1;
  40026c:	2301      	movs	r3, #1
  40026e:	e03e      	b.n	4002ee <pio_handler_set+0x9e>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400270:	2300      	movs	r3, #0
  400272:	75fb      	strb	r3, [r7, #23]
  400274:	e012      	b.n	40029c <pio_handler_set+0x4c>
		pSource = &(gs_interrupt_sources[i]);
  400276:	7dfb      	ldrb	r3, [r7, #23]
  400278:	011b      	lsls	r3, r3, #4
  40027a:	4a21      	ldr	r2, [pc, #132]	; (400300 <pio_handler_set+0xb0>)
  40027c:	447a      	add	r2, pc
  40027e:	4413      	add	r3, r2
  400280:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400282:	693b      	ldr	r3, [r7, #16]
  400284:	681a      	ldr	r2, [r3, #0]
  400286:	68bb      	ldr	r3, [r7, #8]
  400288:	429a      	cmp	r2, r3
  40028a:	d104      	bne.n	400296 <pio_handler_set+0x46>
  40028c:	693b      	ldr	r3, [r7, #16]
  40028e:	685a      	ldr	r2, [r3, #4]
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	429a      	cmp	r2, r3
  400294:	d009      	beq.n	4002aa <pio_handler_set+0x5a>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400296:	7dfb      	ldrb	r3, [r7, #23]
  400298:	3301      	adds	r3, #1
  40029a:	75fb      	strb	r3, [r7, #23]
  40029c:	7dfa      	ldrb	r2, [r7, #23]
  40029e:	4b19      	ldr	r3, [pc, #100]	; (400304 <pio_handler_set+0xb4>)
  4002a0:	447b      	add	r3, pc
  4002a2:	681b      	ldr	r3, [r3, #0]
  4002a4:	429a      	cmp	r2, r3
  4002a6:	d9e6      	bls.n	400276 <pio_handler_set+0x26>
  4002a8:	e000      	b.n	4002ac <pio_handler_set+0x5c>
			break;
  4002aa:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4002ac:	693b      	ldr	r3, [r7, #16]
  4002ae:	68ba      	ldr	r2, [r7, #8]
  4002b0:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4002b2:	693b      	ldr	r3, [r7, #16]
  4002b4:	687a      	ldr	r2, [r7, #4]
  4002b6:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4002b8:	693b      	ldr	r3, [r7, #16]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4002be:	693b      	ldr	r3, [r7, #16]
  4002c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4002c2:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4002c4:	7dfa      	ldrb	r2, [r7, #23]
  4002c6:	4b10      	ldr	r3, [pc, #64]	; (400308 <pio_handler_set+0xb8>)
  4002c8:	447b      	add	r3, pc
  4002ca:	681b      	ldr	r3, [r3, #0]
  4002cc:	3301      	adds	r3, #1
  4002ce:	429a      	cmp	r2, r3
  4002d0:	d106      	bne.n	4002e0 <pio_handler_set+0x90>
		gs_ul_nb_sources++;
  4002d2:	4b0e      	ldr	r3, [pc, #56]	; (40030c <pio_handler_set+0xbc>)
  4002d4:	447b      	add	r3, pc
  4002d6:	681b      	ldr	r3, [r3, #0]
  4002d8:	3301      	adds	r3, #1
  4002da:	4a0d      	ldr	r2, [pc, #52]	; (400310 <pio_handler_set+0xc0>)
  4002dc:	447a      	add	r2, pc
  4002de:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4002e0:	683a      	ldr	r2, [r7, #0]
  4002e2:	6879      	ldr	r1, [r7, #4]
  4002e4:	68f8      	ldr	r0, [r7, #12]
  4002e6:	4b0b      	ldr	r3, [pc, #44]	; (400314 <pio_handler_set+0xc4>)
  4002e8:	58e3      	ldr	r3, [r4, r3]
  4002ea:	4798      	blx	r3

	return 0;
  4002ec:	2300      	movs	r3, #0
}
  4002ee:	4618      	mov	r0, r3
  4002f0:	371c      	adds	r7, #28
  4002f2:	46bd      	mov	sp, r7
  4002f4:	bd90      	pop	{r4, r7, pc}
  4002f6:	bf00      	nop
  4002f8:	00003210 	.word	0x00003210
  4002fc:	1fc00260 	.word	0x1fc00260
  400300:	1fc001d8 	.word	0x1fc001d8
  400304:	1fc00224 	.word	0x1fc00224
  400308:	1fc001fc 	.word	0x1fc001fc
  40030c:	1fc001f0 	.word	0x1fc001f0
  400310:	1fc001e8 	.word	0x1fc001e8
  400314:	00000150 	.word	0x00000150

00400318 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400318:	b580      	push	{r7, lr}
  40031a:	af00      	add	r7, sp, #0
  40031c:	4a05      	ldr	r2, [pc, #20]	; (400334 <PIOA_Handler+0x1c>)
  40031e:	447a      	add	r2, pc
	pio_handler_process(PIOA, ID_PIOA);
  400320:	210b      	movs	r1, #11
  400322:	4803      	ldr	r0, [pc, #12]	; (400330 <PIOA_Handler+0x18>)
  400324:	4b04      	ldr	r3, [pc, #16]	; (400338 <PIOA_Handler+0x20>)
  400326:	58d3      	ldr	r3, [r2, r3]
  400328:	4798      	blx	r3
}
  40032a:	bf00      	nop
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	400e0e00 	.word	0x400e0e00
  400334:	00003152 	.word	0x00003152
  400338:	00000074 	.word	0x00000074

0040033c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40033c:	b580      	push	{r7, lr}
  40033e:	af00      	add	r7, sp, #0
  400340:	4a05      	ldr	r2, [pc, #20]	; (400358 <PIOB_Handler+0x1c>)
  400342:	447a      	add	r2, pc
    pio_handler_process(PIOB, ID_PIOB);
  400344:	210c      	movs	r1, #12
  400346:	4803      	ldr	r0, [pc, #12]	; (400354 <PIOB_Handler+0x18>)
  400348:	4b04      	ldr	r3, [pc, #16]	; (40035c <PIOB_Handler+0x20>)
  40034a:	58d3      	ldr	r3, [r2, r3]
  40034c:	4798      	blx	r3
}
  40034e:	bf00      	nop
  400350:	bd80      	pop	{r7, pc}
  400352:	bf00      	nop
  400354:	400e1000 	.word	0x400e1000
  400358:	0000312e 	.word	0x0000312e
  40035c:	00000074 	.word	0x00000074

00400360 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400360:	b480      	push	{r7}
  400362:	b087      	sub	sp, #28
  400364:	af00      	add	r7, sp, #0
  400366:	60f8      	str	r0, [r7, #12]
  400368:	60b9      	str	r1, [r7, #8]
  40036a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40036c:	68fa      	ldr	r2, [r7, #12]
  40036e:	68bb      	ldr	r3, [r7, #8]
  400370:	019b      	lsls	r3, r3, #6
  400372:	4413      	add	r3, r2
  400374:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400376:	697b      	ldr	r3, [r7, #20]
  400378:	2202      	movs	r2, #2
  40037a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	f04f 32ff 	mov.w	r2, #4294967295
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400384:	697b      	ldr	r3, [r7, #20]
  400386:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400388:	697b      	ldr	r3, [r7, #20]
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	605a      	str	r2, [r3, #4]
}
  40038e:	bf00      	nop
  400390:	371c      	adds	r7, #28
  400392:	46bd      	mov	sp, r7
  400394:	bc80      	pop	{r7}
  400396:	4770      	bx	lr

00400398 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400398:	b480      	push	{r7}
  40039a:	b083      	sub	sp, #12
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4003a2:	687a      	ldr	r2, [r7, #4]
  4003a4:	683b      	ldr	r3, [r7, #0]
  4003a6:	019b      	lsls	r3, r3, #6
  4003a8:	4413      	add	r3, r2
  4003aa:	2205      	movs	r2, #5
  4003ac:	601a      	str	r2, [r3, #0]
}
  4003ae:	bf00      	nop
  4003b0:	370c      	adds	r7, #12
  4003b2:	46bd      	mov	sp, r7
  4003b4:	bc80      	pop	{r7}
  4003b6:	4770      	bx	lr

004003b8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4003b8:	b480      	push	{r7}
  4003ba:	b085      	sub	sp, #20
  4003bc:	af00      	add	r7, sp, #0
  4003be:	60f8      	str	r0, [r7, #12]
  4003c0:	60b9      	str	r1, [r7, #8]
  4003c2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4003c4:	68fa      	ldr	r2, [r7, #12]
  4003c6:	68bb      	ldr	r3, [r7, #8]
  4003c8:	019b      	lsls	r3, r3, #6
  4003ca:	4413      	add	r3, r2
  4003cc:	331c      	adds	r3, #28
  4003ce:	687a      	ldr	r2, [r7, #4]
  4003d0:	601a      	str	r2, [r3, #0]
}
  4003d2:	bf00      	nop
  4003d4:	3714      	adds	r7, #20
  4003d6:	46bd      	mov	sp, r7
  4003d8:	bc80      	pop	{r7}
  4003da:	4770      	bx	lr

004003dc <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4003dc:	b480      	push	{r7}
  4003de:	b087      	sub	sp, #28
  4003e0:	af00      	add	r7, sp, #0
  4003e2:	60f8      	str	r0, [r7, #12]
  4003e4:	60b9      	str	r1, [r7, #8]
  4003e6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e8:	68fa      	ldr	r2, [r7, #12]
  4003ea:	68bb      	ldr	r3, [r7, #8]
  4003ec:	019b      	lsls	r3, r3, #6
  4003ee:	4413      	add	r3, r2
  4003f0:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4003f2:	697b      	ldr	r3, [r7, #20]
  4003f4:	687a      	ldr	r2, [r7, #4]
  4003f6:	625a      	str	r2, [r3, #36]	; 0x24
}
  4003f8:	bf00      	nop
  4003fa:	371c      	adds	r7, #28
  4003fc:	46bd      	mov	sp, r7
  4003fe:	bc80      	pop	{r7}
  400400:	4770      	bx	lr

00400402 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400402:	b480      	push	{r7}
  400404:	b085      	sub	sp, #20
  400406:	af00      	add	r7, sp, #0
  400408:	6078      	str	r0, [r7, #4]
  40040a:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40040c:	687a      	ldr	r2, [r7, #4]
  40040e:	683b      	ldr	r3, [r7, #0]
  400410:	019b      	lsls	r3, r3, #6
  400412:	4413      	add	r3, r2
  400414:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400416:	68fb      	ldr	r3, [r7, #12]
  400418:	6a1b      	ldr	r3, [r3, #32]
}
  40041a:	4618      	mov	r0, r3
  40041c:	3714      	adds	r7, #20
  40041e:	46bd      	mov	sp, r7
  400420:	bc80      	pop	{r7}
  400422:	4770      	bx	lr

00400424 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400424:	b480      	push	{r7}
  400426:	b08d      	sub	sp, #52	; 0x34
  400428:	af00      	add	r7, sp, #0
  40042a:	60f8      	str	r0, [r7, #12]
  40042c:	60b9      	str	r1, [r7, #8]
  40042e:	607a      	str	r2, [r7, #4]
  400430:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400432:	2302      	movs	r3, #2
  400434:	613b      	str	r3, [r7, #16]
  400436:	2308      	movs	r3, #8
  400438:	617b      	str	r3, [r7, #20]
  40043a:	2320      	movs	r3, #32
  40043c:	61bb      	str	r3, [r7, #24]
  40043e:	2380      	movs	r3, #128	; 0x80
  400440:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400444:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400446:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400448:	2300      	movs	r3, #0
  40044a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40044c:	e01a      	b.n	400484 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40044e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400450:	009b      	lsls	r3, r3, #2
  400452:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400456:	4413      	add	r3, r2
  400458:	f853 3c20 	ldr.w	r3, [r3, #-32]
  40045c:	68ba      	ldr	r2, [r7, #8]
  40045e:	fbb2 f3f3 	udiv	r3, r2, r3
  400462:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400464:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400466:	0c1b      	lsrs	r3, r3, #16
  400468:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40046a:	68fa      	ldr	r2, [r7, #12]
  40046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40046e:	429a      	cmp	r2, r3
  400470:	d901      	bls.n	400476 <tc_find_mck_divisor+0x52>
			return 0;
  400472:	2300      	movs	r3, #0
  400474:	e023      	b.n	4004be <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400476:	68fa      	ldr	r2, [r7, #12]
  400478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40047a:	429a      	cmp	r2, r3
  40047c:	d206      	bcs.n	40048c <tc_find_mck_divisor+0x68>
			ul_index++) {
  40047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400480:	3301      	adds	r3, #1
  400482:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400486:	2b04      	cmp	r3, #4
  400488:	d9e1      	bls.n	40044e <tc_find_mck_divisor+0x2a>
  40048a:	e000      	b.n	40048e <tc_find_mck_divisor+0x6a>
			break;
  40048c:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400490:	2b04      	cmp	r3, #4
  400492:	d901      	bls.n	400498 <tc_find_mck_divisor+0x74>
		return 0;
  400494:	2300      	movs	r3, #0
  400496:	e012      	b.n	4004be <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400498:	687b      	ldr	r3, [r7, #4]
  40049a:	2b00      	cmp	r3, #0
  40049c:	d008      	beq.n	4004b0 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004a0:	009b      	lsls	r3, r3, #2
  4004a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004a6:	4413      	add	r3, r2
  4004a8:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4004b0:	683b      	ldr	r3, [r7, #0]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d002      	beq.n	4004bc <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4004b6:	683b      	ldr	r3, [r7, #0]
  4004b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4004ba:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4004bc:	2301      	movs	r3, #1
}
  4004be:	4618      	mov	r0, r3
  4004c0:	3734      	adds	r7, #52	; 0x34
  4004c2:	46bd      	mov	sp, r7
  4004c4:	bc80      	pop	{r7}
  4004c6:	4770      	bx	lr

004004c8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4004c8:	b480      	push	{r7}
  4004ca:	b089      	sub	sp, #36	; 0x24
  4004cc:	af00      	add	r7, sp, #0
  4004ce:	60f8      	str	r0, [r7, #12]
  4004d0:	60b9      	str	r1, [r7, #8]
  4004d2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4004d4:	68bb      	ldr	r3, [r7, #8]
  4004d6:	011a      	lsls	r2, r3, #4
  4004d8:	687b      	ldr	r3, [r7, #4]
  4004da:	429a      	cmp	r2, r3
  4004dc:	d802      	bhi.n	4004e4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4004de:	2310      	movs	r3, #16
  4004e0:	61fb      	str	r3, [r7, #28]
  4004e2:	e001      	b.n	4004e8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4004e4:	2308      	movs	r3, #8
  4004e6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4004e8:	687b      	ldr	r3, [r7, #4]
  4004ea:	00da      	lsls	r2, r3, #3
  4004ec:	69fb      	ldr	r3, [r7, #28]
  4004ee:	68b9      	ldr	r1, [r7, #8]
  4004f0:	fb01 f303 	mul.w	r3, r1, r3
  4004f4:	085b      	lsrs	r3, r3, #1
  4004f6:	441a      	add	r2, r3
  4004f8:	69fb      	ldr	r3, [r7, #28]
  4004fa:	68b9      	ldr	r1, [r7, #8]
  4004fc:	fb01 f303 	mul.w	r3, r1, r3
  400500:	fbb2 f3f3 	udiv	r3, r2, r3
  400504:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400506:	69bb      	ldr	r3, [r7, #24]
  400508:	08db      	lsrs	r3, r3, #3
  40050a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40050c:	69bb      	ldr	r3, [r7, #24]
  40050e:	f003 0307 	and.w	r3, r3, #7
  400512:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400514:	697b      	ldr	r3, [r7, #20]
  400516:	2b00      	cmp	r3, #0
  400518:	d003      	beq.n	400522 <usart_set_async_baudrate+0x5a>
  40051a:	697b      	ldr	r3, [r7, #20]
  40051c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400520:	d301      	bcc.n	400526 <usart_set_async_baudrate+0x5e>
		return 1;
  400522:	2301      	movs	r3, #1
  400524:	e00f      	b.n	400546 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400526:	69fb      	ldr	r3, [r7, #28]
  400528:	2b08      	cmp	r3, #8
  40052a:	d105      	bne.n	400538 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40052c:	68fb      	ldr	r3, [r7, #12]
  40052e:	685b      	ldr	r3, [r3, #4]
  400530:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400534:	68fb      	ldr	r3, [r7, #12]
  400536:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400538:	693b      	ldr	r3, [r7, #16]
  40053a:	041a      	lsls	r2, r3, #16
  40053c:	697b      	ldr	r3, [r7, #20]
  40053e:	431a      	orrs	r2, r3
  400540:	68fb      	ldr	r3, [r7, #12]
  400542:	621a      	str	r2, [r3, #32]

	return 0;
  400544:	2300      	movs	r3, #0
}
  400546:	4618      	mov	r0, r3
  400548:	3724      	adds	r7, #36	; 0x24
  40054a:	46bd      	mov	sp, r7
  40054c:	bc80      	pop	{r7}
  40054e:	4770      	bx	lr

00400550 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400550:	b590      	push	{r4, r7, lr}
  400552:	b083      	sub	sp, #12
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
  400558:	4c13      	ldr	r4, [pc, #76]	; (4005a8 <usart_reset+0x58>)
  40055a:	447c      	add	r4, pc
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  40055c:	6878      	ldr	r0, [r7, #4]
  40055e:	4b13      	ldr	r3, [pc, #76]	; (4005ac <usart_reset+0x5c>)
  400560:	58e3      	ldr	r3, [r4, r3]
  400562:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	2200      	movs	r2, #0
  400568:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40056a:	687b      	ldr	r3, [r7, #4]
  40056c:	2200      	movs	r2, #0
  40056e:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400570:	687b      	ldr	r3, [r7, #4]
  400572:	2200      	movs	r2, #0
  400574:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400576:	6878      	ldr	r0, [r7, #4]
  400578:	4b0d      	ldr	r3, [pc, #52]	; (4005b0 <usart_reset+0x60>)
  40057a:	58e3      	ldr	r3, [r4, r3]
  40057c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40057e:	6878      	ldr	r0, [r7, #4]
  400580:	4b0c      	ldr	r3, [pc, #48]	; (4005b4 <usart_reset+0x64>)
  400582:	58e3      	ldr	r3, [r4, r3]
  400584:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400586:	6878      	ldr	r0, [r7, #4]
  400588:	4b0b      	ldr	r3, [pc, #44]	; (4005b8 <usart_reset+0x68>)
  40058a:	58e3      	ldr	r3, [r4, r3]
  40058c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40058e:	6878      	ldr	r0, [r7, #4]
  400590:	4b0a      	ldr	r3, [pc, #40]	; (4005bc <usart_reset+0x6c>)
  400592:	58e3      	ldr	r3, [r4, r3]
  400594:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400596:	6878      	ldr	r0, [r7, #4]
  400598:	4b09      	ldr	r3, [pc, #36]	; (4005c0 <usart_reset+0x70>)
  40059a:	58e3      	ldr	r3, [r4, r3]
  40059c:	4798      	blx	r3
#endif
}
  40059e:	bf00      	nop
  4005a0:	370c      	adds	r7, #12
  4005a2:	46bd      	mov	sp, r7
  4005a4:	bd90      	pop	{r4, r7, pc}
  4005a6:	bf00      	nop
  4005a8:	00002f16 	.word	0x00002f16
  4005ac:	0000000c 	.word	0x0000000c
  4005b0:	00000064 	.word	0x00000064
  4005b4:	000000dc 	.word	0x000000dc
  4005b8:	0000013c 	.word	0x0000013c
  4005bc:	00000120 	.word	0x00000120
  4005c0:	000000c8 	.word	0x000000c8

004005c4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4005c4:	b590      	push	{r4, r7, lr}
  4005c6:	b085      	sub	sp, #20
  4005c8:	af00      	add	r7, sp, #0
  4005ca:	60f8      	str	r0, [r7, #12]
  4005cc:	60b9      	str	r1, [r7, #8]
  4005ce:	607a      	str	r2, [r7, #4]
  4005d0:	4c1f      	ldr	r4, [pc, #124]	; (400650 <usart_init_rs232+0x8c>)
  4005d2:	447c      	add	r4, pc
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4005d4:	68f8      	ldr	r0, [r7, #12]
  4005d6:	4b1f      	ldr	r3, [pc, #124]	; (400654 <usart_init_rs232+0x90>)
  4005d8:	58e3      	ldr	r3, [r4, r3]
  4005da:	4798      	blx	r3

	ul_reg_val = 0;
  4005dc:	4b1e      	ldr	r3, [pc, #120]	; (400658 <usart_init_rs232+0x94>)
  4005de:	447b      	add	r3, pc
  4005e0:	461a      	mov	r2, r3
  4005e2:	2300      	movs	r3, #0
  4005e4:	6013      	str	r3, [r2, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4005e6:	68bb      	ldr	r3, [r7, #8]
  4005e8:	2b00      	cmp	r3, #0
  4005ea:	d00a      	beq.n	400602 <usart_init_rs232+0x3e>
  4005ec:	68bb      	ldr	r3, [r7, #8]
  4005ee:	681b      	ldr	r3, [r3, #0]
  4005f0:	687a      	ldr	r2, [r7, #4]
  4005f2:	4619      	mov	r1, r3
  4005f4:	68f8      	ldr	r0, [r7, #12]
  4005f6:	4b19      	ldr	r3, [pc, #100]	; (40065c <usart_init_rs232+0x98>)
  4005f8:	58e3      	ldr	r3, [r4, r3]
  4005fa:	4798      	blx	r3
  4005fc:	4603      	mov	r3, r0
  4005fe:	2b00      	cmp	r3, #0
  400600:	d001      	beq.n	400606 <usart_init_rs232+0x42>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  400602:	2301      	movs	r3, #1
  400604:	e020      	b.n	400648 <usart_init_rs232+0x84>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400606:	68bb      	ldr	r3, [r7, #8]
  400608:	685a      	ldr	r2, [r3, #4]
  40060a:	68bb      	ldr	r3, [r7, #8]
  40060c:	689b      	ldr	r3, [r3, #8]
  40060e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400610:	68bb      	ldr	r3, [r7, #8]
  400612:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400614:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400616:	68bb      	ldr	r3, [r7, #8]
  400618:	68db      	ldr	r3, [r3, #12]
  40061a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40061c:	4b10      	ldr	r3, [pc, #64]	; (400660 <usart_init_rs232+0x9c>)
  40061e:	447b      	add	r3, pc
  400620:	681b      	ldr	r3, [r3, #0]
  400622:	4313      	orrs	r3, r2
  400624:	4a0f      	ldr	r2, [pc, #60]	; (400664 <usart_init_rs232+0xa0>)
  400626:	447a      	add	r2, pc
  400628:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40062a:	4b0f      	ldr	r3, [pc, #60]	; (400668 <usart_init_rs232+0xa4>)
  40062c:	447b      	add	r3, pc
  40062e:	681b      	ldr	r3, [r3, #0]
  400630:	4a0e      	ldr	r2, [pc, #56]	; (40066c <usart_init_rs232+0xa8>)
  400632:	447a      	add	r2, pc
  400634:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	685a      	ldr	r2, [r3, #4]
  40063a:	4b0d      	ldr	r3, [pc, #52]	; (400670 <usart_init_rs232+0xac>)
  40063c:	447b      	add	r3, pc
  40063e:	681b      	ldr	r3, [r3, #0]
  400640:	431a      	orrs	r2, r3
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	605a      	str	r2, [r3, #4]

	return 0;
  400646:	2300      	movs	r3, #0
}
  400648:	4618      	mov	r0, r3
  40064a:	3714      	adds	r7, #20
  40064c:	46bd      	mov	sp, r7
  40064e:	bd90      	pop	{r4, r7, pc}
  400650:	00002e9e 	.word	0x00002e9e
  400654:	000000a0 	.word	0x000000a0
  400658:	1fbffeee 	.word	0x1fbffeee
  40065c:	0000014c 	.word	0x0000014c
  400660:	1fbffeae 	.word	0x1fbffeae
  400664:	1fbffea6 	.word	0x1fbffea6
  400668:	1fbffea0 	.word	0x1fbffea0
  40066c:	1fbffe9a 	.word	0x1fbffe9a
  400670:	1fbffe90 	.word	0x1fbffe90

00400674 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400674:	b590      	push	{r4, r7, lr}
  400676:	b085      	sub	sp, #20
  400678:	af00      	add	r7, sp, #0
  40067a:	60f8      	str	r0, [r7, #12]
  40067c:	60b9      	str	r1, [r7, #8]
  40067e:	607a      	str	r2, [r7, #4]
  400680:	4c0c      	ldr	r4, [pc, #48]	; (4006b4 <usart_init_hw_handshaking+0x40>)
  400682:	447c      	add	r4, pc
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400684:	687a      	ldr	r2, [r7, #4]
  400686:	68b9      	ldr	r1, [r7, #8]
  400688:	68f8      	ldr	r0, [r7, #12]
  40068a:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <usart_init_hw_handshaking+0x44>)
  40068c:	58e3      	ldr	r3, [r4, r3]
  40068e:	4798      	blx	r3
  400690:	4603      	mov	r3, r0
  400692:	2b00      	cmp	r3, #0
  400694:	d001      	beq.n	40069a <usart_init_hw_handshaking+0x26>
		return 1;
  400696:	2301      	movs	r3, #1
  400698:	e008      	b.n	4006ac <usart_init_hw_handshaking+0x38>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  40069a:	68fb      	ldr	r3, [r7, #12]
  40069c:	685b      	ldr	r3, [r3, #4]
  40069e:	f023 030f 	bic.w	r3, r3, #15
  4006a2:	f043 0202 	orr.w	r2, r3, #2
  4006a6:	68fb      	ldr	r3, [r7, #12]
  4006a8:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  4006aa:	2300      	movs	r3, #0
}
  4006ac:	4618      	mov	r0, r3
  4006ae:	3714      	adds	r7, #20
  4006b0:	46bd      	mov	sp, r7
  4006b2:	bd90      	pop	{r4, r7, pc}
  4006b4:	00002dee 	.word	0x00002dee
  4006b8:	000000b8 	.word	0x000000b8

004006bc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4006bc:	b480      	push	{r7}
  4006be:	b083      	sub	sp, #12
  4006c0:	af00      	add	r7, sp, #0
  4006c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2240      	movs	r2, #64	; 0x40
  4006c8:	601a      	str	r2, [r3, #0]
}
  4006ca:	bf00      	nop
  4006cc:	370c      	adds	r7, #12
  4006ce:	46bd      	mov	sp, r7
  4006d0:	bc80      	pop	{r7}
  4006d2:	4770      	bx	lr

004006d4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4006d4:	b480      	push	{r7}
  4006d6:	b083      	sub	sp, #12
  4006d8:	af00      	add	r7, sp, #0
  4006da:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4006dc:	687b      	ldr	r3, [r7, #4]
  4006de:	2288      	movs	r2, #136	; 0x88
  4006e0:	601a      	str	r2, [r3, #0]
}
  4006e2:	bf00      	nop
  4006e4:	370c      	adds	r7, #12
  4006e6:	46bd      	mov	sp, r7
  4006e8:	bc80      	pop	{r7}
  4006ea:	4770      	bx	lr

004006ec <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4006ec:	b480      	push	{r7}
  4006ee:	b083      	sub	sp, #12
  4006f0:	af00      	add	r7, sp, #0
  4006f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4006f4:	687b      	ldr	r3, [r7, #4]
  4006f6:	2210      	movs	r2, #16
  4006f8:	601a      	str	r2, [r3, #0]
}
  4006fa:	bf00      	nop
  4006fc:	370c      	adds	r7, #12
  4006fe:	46bd      	mov	sp, r7
  400700:	bc80      	pop	{r7}
  400702:	4770      	bx	lr

00400704 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400704:	b480      	push	{r7}
  400706:	b083      	sub	sp, #12
  400708:	af00      	add	r7, sp, #0
  40070a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	2224      	movs	r2, #36	; 0x24
  400710:	601a      	str	r2, [r3, #0]
}
  400712:	bf00      	nop
  400714:	370c      	adds	r7, #12
  400716:	46bd      	mov	sp, r7
  400718:	bc80      	pop	{r7}
  40071a:	4770      	bx	lr

0040071c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  40071c:	b480      	push	{r7}
  40071e:	b083      	sub	sp, #12
  400720:	af00      	add	r7, sp, #0
  400722:	6078      	str	r0, [r7, #4]
  400724:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400726:	687b      	ldr	r3, [r7, #4]
  400728:	683a      	ldr	r2, [r7, #0]
  40072a:	609a      	str	r2, [r3, #8]
}
  40072c:	bf00      	nop
  40072e:	370c      	adds	r7, #12
  400730:	46bd      	mov	sp, r7
  400732:	bc80      	pop	{r7}
  400734:	4770      	bx	lr

00400736 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400736:	b480      	push	{r7}
  400738:	b083      	sub	sp, #12
  40073a:	af00      	add	r7, sp, #0
  40073c:	6078      	str	r0, [r7, #4]
  40073e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400740:	687b      	ldr	r3, [r7, #4]
  400742:	683a      	ldr	r2, [r7, #0]
  400744:	60da      	str	r2, [r3, #12]
}
  400746:	bf00      	nop
  400748:	370c      	adds	r7, #12
  40074a:	46bd      	mov	sp, r7
  40074c:	bc80      	pop	{r7}
  40074e:	4770      	bx	lr

00400750 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400750:	b480      	push	{r7}
  400752:	b083      	sub	sp, #12
  400754:	af00      	add	r7, sp, #0
  400756:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400758:	687b      	ldr	r3, [r7, #4]
  40075a:	695b      	ldr	r3, [r3, #20]
}
  40075c:	4618      	mov	r0, r3
  40075e:	370c      	adds	r7, #12
  400760:	46bd      	mov	sp, r7
  400762:	bc80      	pop	{r7}
  400764:	4770      	bx	lr

00400766 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400766:	b480      	push	{r7}
  400768:	b083      	sub	sp, #12
  40076a:	af00      	add	r7, sp, #0
  40076c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40076e:	687b      	ldr	r3, [r7, #4]
  400770:	f44f 7280 	mov.w	r2, #256	; 0x100
  400774:	601a      	str	r2, [r3, #0]
}
  400776:	bf00      	nop
  400778:	370c      	adds	r7, #12
  40077a:	46bd      	mov	sp, r7
  40077c:	bc80      	pop	{r7}
  40077e:	4770      	bx	lr

00400780 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400780:	b480      	push	{r7}
  400782:	b083      	sub	sp, #12
  400784:	af00      	add	r7, sp, #0
  400786:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400788:	687b      	ldr	r3, [r7, #4]
  40078a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40078e:	601a      	str	r2, [r3, #0]
}
  400790:	bf00      	nop
  400792:	370c      	adds	r7, #12
  400794:	46bd      	mov	sp, r7
  400796:	bc80      	pop	{r7}
  400798:	4770      	bx	lr

0040079a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40079a:	b480      	push	{r7}
  40079c:	b083      	sub	sp, #12
  40079e:	af00      	add	r7, sp, #0
  4007a0:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4007a2:	687b      	ldr	r3, [r7, #4]
  4007a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007a8:	601a      	str	r2, [r3, #0]
}
  4007aa:	bf00      	nop
  4007ac:	370c      	adds	r7, #12
  4007ae:	46bd      	mov	sp, r7
  4007b0:	bc80      	pop	{r7}
  4007b2:	4770      	bx	lr

004007b4 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  4007b4:	b480      	push	{r7}
  4007b6:	b083      	sub	sp, #12
  4007b8:	af00      	add	r7, sp, #0
  4007ba:	6078      	str	r0, [r7, #4]
  4007bc:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4007be:	bf00      	nop
  4007c0:	687b      	ldr	r3, [r7, #4]
  4007c2:	695b      	ldr	r3, [r3, #20]
  4007c4:	f003 0302 	and.w	r3, r3, #2
  4007c8:	2b00      	cmp	r3, #0
  4007ca:	d0f9      	beq.n	4007c0 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4007cc:	683b      	ldr	r3, [r7, #0]
  4007ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	61da      	str	r2, [r3, #28]

	return 0;
  4007d6:	2300      	movs	r3, #0
}
  4007d8:	4618      	mov	r0, r3
  4007da:	370c      	adds	r7, #12
  4007dc:	46bd      	mov	sp, r7
  4007de:	bc80      	pop	{r7}
  4007e0:	4770      	bx	lr
	...

004007e4 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  4007e4:	b590      	push	{r4, r7, lr}
  4007e6:	b083      	sub	sp, #12
  4007e8:	af00      	add	r7, sp, #0
  4007ea:	6078      	str	r0, [r7, #4]
  4007ec:	6039      	str	r1, [r7, #0]
  4007ee:	4c0a      	ldr	r4, [pc, #40]	; (400818 <usart_write_line+0x34>)
  4007f0:	447c      	add	r4, pc
	while (*string != '\0') {
  4007f2:	e008      	b.n	400806 <usart_write_line+0x22>
		usart_putchar(p_usart, *string++);
  4007f4:	683b      	ldr	r3, [r7, #0]
  4007f6:	1c5a      	adds	r2, r3, #1
  4007f8:	603a      	str	r2, [r7, #0]
  4007fa:	781b      	ldrb	r3, [r3, #0]
  4007fc:	4619      	mov	r1, r3
  4007fe:	6878      	ldr	r0, [r7, #4]
  400800:	4b06      	ldr	r3, [pc, #24]	; (40081c <usart_write_line+0x38>)
  400802:	58e3      	ldr	r3, [r4, r3]
  400804:	4798      	blx	r3
	while (*string != '\0') {
  400806:	683b      	ldr	r3, [r7, #0]
  400808:	781b      	ldrb	r3, [r3, #0]
  40080a:	2b00      	cmp	r3, #0
  40080c:	d1f2      	bne.n	4007f4 <usart_write_line+0x10>
	}
}
  40080e:	bf00      	nop
  400810:	370c      	adds	r7, #12
  400812:	46bd      	mov	sp, r7
  400814:	bd90      	pop	{r4, r7, pc}
  400816:	bf00      	nop
  400818:	00002c80 	.word	0x00002c80
  40081c:	00000160 	.word	0x00000160

00400820 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400820:	b480      	push	{r7}
  400822:	b083      	sub	sp, #12
  400824:	af00      	add	r7, sp, #0
  400826:	6078      	str	r0, [r7, #4]
  400828:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40082a:	687b      	ldr	r3, [r7, #4]
  40082c:	695b      	ldr	r3, [r3, #20]
  40082e:	f003 0301 	and.w	r3, r3, #1
  400832:	2b00      	cmp	r3, #0
  400834:	d101      	bne.n	40083a <usart_read+0x1a>
		return 1;
  400836:	2301      	movs	r3, #1
  400838:	e006      	b.n	400848 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40083a:	687b      	ldr	r3, [r7, #4]
  40083c:	699b      	ldr	r3, [r3, #24]
  40083e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400842:	683b      	ldr	r3, [r7, #0]
  400844:	601a      	str	r2, [r3, #0]

	return 0;
  400846:	2300      	movs	r3, #0
}
  400848:	4618      	mov	r0, r3
  40084a:	370c      	adds	r7, #12
  40084c:	46bd      	mov	sp, r7
  40084e:	bc80      	pop	{r7}
  400850:	4770      	bx	lr
	...

00400854 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400854:	b480      	push	{r7}
  400856:	b083      	sub	sp, #12
  400858:	af00      	add	r7, sp, #0
  40085a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40085c:	687b      	ldr	r3, [r7, #4]
  40085e:	4a04      	ldr	r2, [pc, #16]	; (400870 <usart_disable_writeprotect+0x1c>)
  400860:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400864:	bf00      	nop
  400866:	370c      	adds	r7, #12
  400868:	46bd      	mov	sp, r7
  40086a:	bc80      	pop	{r7}
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop
  400870:	55534100 	.word	0x55534100

00400874 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400874:	b480      	push	{r7}
  400876:	b083      	sub	sp, #12
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400882:	605a      	str	r2, [r3, #4]

}
  400884:	bf00      	nop
  400886:	370c      	adds	r7, #12
  400888:	46bd      	mov	sp, r7
  40088a:	bc80      	pop	{r7}
  40088c:	4770      	bx	lr
	...

00400890 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400890:	b580      	push	{r7, lr}
  400892:	b082      	sub	sp, #8
  400894:	af00      	add	r7, sp, #0
  400896:	6078      	str	r0, [r7, #4]
  400898:	4b21      	ldr	r3, [pc, #132]	; (400920 <osc_enable+0x90>)
  40089a:	447b      	add	r3, pc
	switch (ul_id) {
  40089c:	687a      	ldr	r2, [r7, #4]
  40089e:	2a07      	cmp	r2, #7
  4008a0:	d83a      	bhi.n	400918 <osc_enable+0x88>
  4008a2:	a102      	add	r1, pc, #8	; (adr r1, 4008ac <osc_enable+0x1c>)
  4008a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  4008a8:	4411      	add	r1, r2
  4008aa:	4708      	bx	r1
  4008ac:	0000006b 	.word	0x0000006b
  4008b0:	00000021 	.word	0x00000021
  4008b4:	0000002b 	.word	0x0000002b
  4008b8:	00000035 	.word	0x00000035
  4008bc:	0000003f 	.word	0x0000003f
  4008c0:	00000049 	.word	0x00000049
  4008c4:	00000053 	.word	0x00000053
  4008c8:	0000005f 	.word	0x0000005f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4008cc:	2000      	movs	r0, #0
  4008ce:	4a15      	ldr	r2, [pc, #84]	; (400924 <osc_enable+0x94>)
  4008d0:	589b      	ldr	r3, [r3, r2]
  4008d2:	4798      	blx	r3
		break;
  4008d4:	e020      	b.n	400918 <osc_enable+0x88>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4008d6:	2001      	movs	r0, #1
  4008d8:	4a12      	ldr	r2, [pc, #72]	; (400924 <osc_enable+0x94>)
  4008da:	589b      	ldr	r3, [r3, r2]
  4008dc:	4798      	blx	r3
		break;
  4008de:	e01b      	b.n	400918 <osc_enable+0x88>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4008e0:	2000      	movs	r0, #0
  4008e2:	4a11      	ldr	r2, [pc, #68]	; (400928 <osc_enable+0x98>)
  4008e4:	589b      	ldr	r3, [r3, r2]
  4008e6:	4798      	blx	r3
		break;
  4008e8:	e016      	b.n	400918 <osc_enable+0x88>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4008ea:	2010      	movs	r0, #16
  4008ec:	4a0e      	ldr	r2, [pc, #56]	; (400928 <osc_enable+0x98>)
  4008ee:	589b      	ldr	r3, [r3, r2]
  4008f0:	4798      	blx	r3
		break;
  4008f2:	e011      	b.n	400918 <osc_enable+0x88>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4008f4:	2020      	movs	r0, #32
  4008f6:	4a0c      	ldr	r2, [pc, #48]	; (400928 <osc_enable+0x98>)
  4008f8:	589b      	ldr	r3, [r3, r2]
  4008fa:	4798      	blx	r3
		break;
  4008fc:	e00c      	b.n	400918 <osc_enable+0x88>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4008fe:	213e      	movs	r1, #62	; 0x3e
  400900:	2000      	movs	r0, #0
  400902:	4a0a      	ldr	r2, [pc, #40]	; (40092c <osc_enable+0x9c>)
  400904:	589b      	ldr	r3, [r3, r2]
  400906:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400908:	e006      	b.n	400918 <osc_enable+0x88>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40090a:	213e      	movs	r1, #62	; 0x3e
  40090c:	2001      	movs	r0, #1
  40090e:	4a07      	ldr	r2, [pc, #28]	; (40092c <osc_enable+0x9c>)
  400910:	589b      	ldr	r3, [r3, r2]
  400912:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400914:	e000      	b.n	400918 <osc_enable+0x88>
		break;
  400916:	bf00      	nop
	}
}
  400918:	bf00      	nop
  40091a:	3708      	adds	r7, #8
  40091c:	46bd      	mov	sp, r7
  40091e:	bd80      	pop	{r7, pc}
  400920:	00002bd6 	.word	0x00002bd6
  400924:	000000f0 	.word	0x000000f0
  400928:	00000008 	.word	0x00000008
  40092c:	00000018 	.word	0x00000018

00400930 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400930:	b580      	push	{r7, lr}
  400932:	b082      	sub	sp, #8
  400934:	af00      	add	r7, sp, #0
  400936:	6078      	str	r0, [r7, #4]
  400938:	4b1a      	ldr	r3, [pc, #104]	; (4009a4 <osc_is_ready+0x74>)
  40093a:	447b      	add	r3, pc
	switch (ul_id) {
  40093c:	687a      	ldr	r2, [r7, #4]
  40093e:	2a07      	cmp	r2, #7
  400940:	d82a      	bhi.n	400998 <osc_is_ready+0x68>
  400942:	a102      	add	r1, pc, #8	; (adr r1, 40094c <osc_is_ready+0x1c>)
  400944:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  400948:	4411      	add	r1, r2
  40094a:	4708      	bx	r1
  40094c:	00000021 	.word	0x00000021
  400950:	00000025 	.word	0x00000025
  400954:	00000025 	.word	0x00000025
  400958:	00000039 	.word	0x00000039
  40095c:	00000039 	.word	0x00000039
  400960:	00000039 	.word	0x00000039
  400964:	00000039 	.word	0x00000039
  400968:	00000039 	.word	0x00000039
	case OSC_SLCK_32K_RC:
		return 1;
  40096c:	2301      	movs	r3, #1
  40096e:	e014      	b.n	40099a <osc_is_ready+0x6a>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400970:	4a0d      	ldr	r2, [pc, #52]	; (4009a8 <osc_is_ready+0x78>)
  400972:	589b      	ldr	r3, [r3, r2]
  400974:	4798      	blx	r3
  400976:	4603      	mov	r3, r0
  400978:	2b00      	cmp	r3, #0
  40097a:	bf14      	ite	ne
  40097c:	2301      	movne	r3, #1
  40097e:	2300      	moveq	r3, #0
  400980:	b2db      	uxtb	r3, r3
  400982:	e00a      	b.n	40099a <osc_is_ready+0x6a>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400984:	4a09      	ldr	r2, [pc, #36]	; (4009ac <osc_is_ready+0x7c>)
  400986:	589b      	ldr	r3, [r3, r2]
  400988:	4798      	blx	r3
  40098a:	4603      	mov	r3, r0
  40098c:	2b00      	cmp	r3, #0
  40098e:	bf14      	ite	ne
  400990:	2301      	movne	r3, #1
  400992:	2300      	moveq	r3, #0
  400994:	b2db      	uxtb	r3, r3
  400996:	e000      	b.n	40099a <osc_is_ready+0x6a>
	}

	return 0;
  400998:	2300      	movs	r3, #0
}
  40099a:	4618      	mov	r0, r3
  40099c:	3708      	adds	r7, #8
  40099e:	46bd      	mov	sp, r7
  4009a0:	bd80      	pop	{r7, pc}
  4009a2:	bf00      	nop
  4009a4:	00002b36 	.word	0x00002b36
  4009a8:	00000024 	.word	0x00000024
  4009ac:	000000c0 	.word	0x000000c0

004009b0 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	2b07      	cmp	r3, #7
  4009bc:	d827      	bhi.n	400a0e <osc_get_rate+0x5e>
  4009be:	a202      	add	r2, pc, #8	; (adr r2, 4009c8 <osc_get_rate+0x18>)
  4009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4009c4:	441a      	add	r2, r3
  4009c6:	4710      	bx	r2
  4009c8:	00000021 	.word	0x00000021
  4009cc:	00000027 	.word	0x00000027
  4009d0:	0000002d 	.word	0x0000002d
  4009d4:	00000033 	.word	0x00000033
  4009d8:	00000037 	.word	0x00000037
  4009dc:	0000003b 	.word	0x0000003b
  4009e0:	0000003f 	.word	0x0000003f
  4009e4:	00000043 	.word	0x00000043
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4009e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4009ec:	e010      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4009ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009f2:	e00d      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4009f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4009f8:	e00a      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4009fa:	4b08      	ldr	r3, [pc, #32]	; (400a1c <osc_get_rate+0x6c>)
  4009fc:	e008      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4009fe:	4b08      	ldr	r3, [pc, #32]	; (400a20 <osc_get_rate+0x70>)
  400a00:	e006      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400a02:	4b08      	ldr	r3, [pc, #32]	; (400a24 <osc_get_rate+0x74>)
  400a04:	e004      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <osc_get_rate+0x74>)
  400a08:	e002      	b.n	400a10 <osc_get_rate+0x60>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400a0a:	4b06      	ldr	r3, [pc, #24]	; (400a24 <osc_get_rate+0x74>)
  400a0c:	e000      	b.n	400a10 <osc_get_rate+0x60>
	}

	return 0;
  400a0e:	2300      	movs	r3, #0
}
  400a10:	4618      	mov	r0, r3
  400a12:	370c      	adds	r7, #12
  400a14:	46bd      	mov	sp, r7
  400a16:	bc80      	pop	{r7}
  400a18:	4770      	bx	lr
  400a1a:	bf00      	nop
  400a1c:	003d0900 	.word	0x003d0900
  400a20:	007a1200 	.word	0x007a1200
  400a24:	00b71b00 	.word	0x00b71b00

00400a28 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	b082      	sub	sp, #8
  400a2c:	af00      	add	r7, sp, #0
  400a2e:	4603      	mov	r3, r0
  400a30:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400a32:	bf00      	nop
  400a34:	79fb      	ldrb	r3, [r7, #7]
  400a36:	4618      	mov	r0, r3
  400a38:	4b06      	ldr	r3, [pc, #24]	; (400a54 <osc_wait_ready+0x2c>)
  400a3a:	447b      	add	r3, pc
  400a3c:	4798      	blx	r3
  400a3e:	4603      	mov	r3, r0
  400a40:	f083 0301 	eor.w	r3, r3, #1
  400a44:	b2db      	uxtb	r3, r3
  400a46:	2b00      	cmp	r3, #0
  400a48:	d1f4      	bne.n	400a34 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400a4a:	bf00      	nop
  400a4c:	3708      	adds	r7, #8
  400a4e:	46bd      	mov	sp, r7
  400a50:	bd80      	pop	{r7, pc}
  400a52:	bf00      	nop
  400a54:	fffffef3 	.word	0xfffffef3

00400a58 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400a58:	b580      	push	{r7, lr}
  400a5a:	b086      	sub	sp, #24
  400a5c:	af00      	add	r7, sp, #0
  400a5e:	60f8      	str	r0, [r7, #12]
  400a60:	607a      	str	r2, [r7, #4]
  400a62:	603b      	str	r3, [r7, #0]
  400a64:	460b      	mov	r3, r1
  400a66:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400a68:	7afb      	ldrb	r3, [r7, #11]
  400a6a:	4618      	mov	r0, r3
  400a6c:	4b0f      	ldr	r3, [pc, #60]	; (400aac <pll_config_init+0x54>)
  400a6e:	447b      	add	r3, pc
  400a70:	4798      	blx	r3
  400a72:	4602      	mov	r2, r0
  400a74:	687b      	ldr	r3, [r7, #4]
  400a76:	fbb2 f3f3 	udiv	r3, r2, r3
  400a7a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400a7c:	697b      	ldr	r3, [r7, #20]
  400a7e:	683a      	ldr	r2, [r7, #0]
  400a80:	fb02 f303 	mul.w	r3, r2, r3
  400a84:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400a86:	683b      	ldr	r3, [r7, #0]
  400a88:	3b01      	subs	r3, #1
  400a8a:	041a      	lsls	r2, r3, #16
  400a8c:	4b06      	ldr	r3, [pc, #24]	; (400aa8 <pll_config_init+0x50>)
  400a8e:	4013      	ands	r3, r2
  400a90:	687a      	ldr	r2, [r7, #4]
  400a92:	b2d2      	uxtb	r2, r2
  400a94:	4313      	orrs	r3, r2
  400a96:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400a9a:	68fb      	ldr	r3, [r7, #12]
  400a9c:	601a      	str	r2, [r3, #0]
}
  400a9e:	bf00      	nop
  400aa0:	3718      	adds	r7, #24
  400aa2:	46bd      	mov	sp, r7
  400aa4:	bd80      	pop	{r7, pc}
  400aa6:	bf00      	nop
  400aa8:	07ff0000 	.word	0x07ff0000
  400aac:	ffffff3f 	.word	0xffffff3f

00400ab0 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400ab0:	b580      	push	{r7, lr}
  400ab2:	b082      	sub	sp, #8
  400ab4:	af00      	add	r7, sp, #0
  400ab6:	6078      	str	r0, [r7, #4]
  400ab8:	6039      	str	r1, [r7, #0]
  400aba:	4b0e      	ldr	r3, [pc, #56]	; (400af4 <pll_enable+0x44>)
  400abc:	447b      	add	r3, pc
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400abe:	683a      	ldr	r2, [r7, #0]
  400ac0:	2a00      	cmp	r2, #0
  400ac2:	d109      	bne.n	400ad8 <pll_enable+0x28>
		pmc_disable_pllack(); // Always stop PLL first!
  400ac4:	4a0c      	ldr	r2, [pc, #48]	; (400af8 <pll_enable+0x48>)
  400ac6:	589b      	ldr	r3, [r3, r2]
  400ac8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400aca:	4a09      	ldr	r2, [pc, #36]	; (400af0 <pll_enable+0x40>)
  400acc:	687b      	ldr	r3, [r7, #4]
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400ad4:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400ad6:	e006      	b.n	400ae6 <pll_enable+0x36>
		pmc_disable_pllbck();
  400ad8:	4a08      	ldr	r2, [pc, #32]	; (400afc <pll_enable+0x4c>)
  400ada:	589b      	ldr	r3, [r3, r2]
  400adc:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400ade:	4a04      	ldr	r2, [pc, #16]	; (400af0 <pll_enable+0x40>)
  400ae0:	687b      	ldr	r3, [r7, #4]
  400ae2:	681b      	ldr	r3, [r3, #0]
  400ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400ae6:	bf00      	nop
  400ae8:	3708      	adds	r7, #8
  400aea:	46bd      	mov	sp, r7
  400aec:	bd80      	pop	{r7, pc}
  400aee:	bf00      	nop
  400af0:	400e0400 	.word	0x400e0400
  400af4:	000029b4 	.word	0x000029b4
  400af8:	00000020 	.word	0x00000020
  400afc:	00000068 	.word	0x00000068

00400b00 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400b00:	b580      	push	{r7, lr}
  400b02:	b082      	sub	sp, #8
  400b04:	af00      	add	r7, sp, #0
  400b06:	6078      	str	r0, [r7, #4]
  400b08:	4b08      	ldr	r3, [pc, #32]	; (400b2c <pll_is_locked+0x2c>)
  400b0a:	447b      	add	r3, pc
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400b0c:	687a      	ldr	r2, [r7, #4]
  400b0e:	2a00      	cmp	r2, #0
  400b10:	d104      	bne.n	400b1c <pll_is_locked+0x1c>
		return pmc_is_locked_pllack();
  400b12:	4a07      	ldr	r2, [pc, #28]	; (400b30 <pll_is_locked+0x30>)
  400b14:	589b      	ldr	r3, [r3, r2]
  400b16:	4798      	blx	r3
  400b18:	4603      	mov	r3, r0
  400b1a:	e003      	b.n	400b24 <pll_is_locked+0x24>
	} else {
		return pmc_is_locked_pllbck();
  400b1c:	4a05      	ldr	r2, [pc, #20]	; (400b34 <pll_is_locked+0x34>)
  400b1e:	589b      	ldr	r3, [r3, r2]
  400b20:	4798      	blx	r3
  400b22:	4603      	mov	r3, r0
	}
}
  400b24:	4618      	mov	r0, r3
  400b26:	3708      	adds	r7, #8
  400b28:	46bd      	mov	sp, r7
  400b2a:	bd80      	pop	{r7, pc}
  400b2c:	00002966 	.word	0x00002966
  400b30:	000000c4 	.word	0x000000c4
  400b34:	00000138 	.word	0x00000138

00400b38 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400b38:	b580      	push	{r7, lr}
  400b3a:	b082      	sub	sp, #8
  400b3c:	af00      	add	r7, sp, #0
  400b3e:	4603      	mov	r3, r0
  400b40:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400b42:	79fb      	ldrb	r3, [r7, #7]
  400b44:	3b03      	subs	r3, #3
  400b46:	2b04      	cmp	r3, #4
  400b48:	d80a      	bhi.n	400b60 <pll_enable_source+0x28>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400b4a:	79fb      	ldrb	r3, [r7, #7]
  400b4c:	4618      	mov	r0, r3
  400b4e:	4b07      	ldr	r3, [pc, #28]	; (400b6c <pll_enable_source+0x34>)
  400b50:	447b      	add	r3, pc
  400b52:	4798      	blx	r3
		osc_wait_ready(e_src);
  400b54:	79fb      	ldrb	r3, [r7, #7]
  400b56:	4618      	mov	r0, r3
  400b58:	4b05      	ldr	r3, [pc, #20]	; (400b70 <pll_enable_source+0x38>)
  400b5a:	447b      	add	r3, pc
  400b5c:	4798      	blx	r3
		break;
  400b5e:	e000      	b.n	400b62 <pll_enable_source+0x2a>

	default:
		Assert(false);
		break;
  400b60:	bf00      	nop
	}
}
  400b62:	bf00      	nop
  400b64:	3708      	adds	r7, #8
  400b66:	46bd      	mov	sp, r7
  400b68:	bd80      	pop	{r7, pc}
  400b6a:	bf00      	nop
  400b6c:	fffffd3d 	.word	0xfffffd3d
  400b70:	fffffecb 	.word	0xfffffecb

00400b74 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400b74:	b580      	push	{r7, lr}
  400b76:	b082      	sub	sp, #8
  400b78:	af00      	add	r7, sp, #0
  400b7a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b7c:	bf00      	nop
  400b7e:	6878      	ldr	r0, [r7, #4]
  400b80:	4b05      	ldr	r3, [pc, #20]	; (400b98 <pll_wait_for_lock+0x24>)
  400b82:	447b      	add	r3, pc
  400b84:	4798      	blx	r3
  400b86:	4603      	mov	r3, r0
  400b88:	2b00      	cmp	r3, #0
  400b8a:	d0f8      	beq.n	400b7e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400b8c:	2300      	movs	r3, #0
}
  400b8e:	4618      	mov	r0, r3
  400b90:	3708      	adds	r7, #8
  400b92:	46bd      	mov	sp, r7
  400b94:	bd80      	pop	{r7, pc}
  400b96:	bf00      	nop
  400b98:	ffffff7b 	.word	0xffffff7b

00400b9c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400b9c:	b580      	push	{r7, lr}
  400b9e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400ba0:	2006      	movs	r0, #6
  400ba2:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <sysclk_get_main_hz+0x1c>)
  400ba4:	447b      	add	r3, pc
  400ba6:	4798      	blx	r3
  400ba8:	4602      	mov	r2, r0
  400baa:	4613      	mov	r3, r2
  400bac:	009b      	lsls	r3, r3, #2
  400bae:	4413      	add	r3, r2
  400bb0:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400bb2:	4618      	mov	r0, r3
  400bb4:	bd80      	pop	{r7, pc}
  400bb6:	bf00      	nop
  400bb8:	fffffe09 	.word	0xfffffe09

00400bbc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400bbc:	b580      	push	{r7, lr}
  400bbe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400bc0:	4b03      	ldr	r3, [pc, #12]	; (400bd0 <sysclk_get_cpu_hz+0x14>)
  400bc2:	447b      	add	r3, pc
  400bc4:	4798      	blx	r3
  400bc6:	4603      	mov	r3, r0
  400bc8:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400bca:	4618      	mov	r0, r3
  400bcc:	bd80      	pop	{r7, pc}
  400bce:	bf00      	nop
  400bd0:	ffffffd7 	.word	0xffffffd7

00400bd4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400bd4:	b5b0      	push	{r4, r5, r7, lr}
  400bd6:	b082      	sub	sp, #8
  400bd8:	af00      	add	r7, sp, #0
  400bda:	4c18      	ldr	r4, [pc, #96]	; (400c3c <sysclk_init+0x68>)
  400bdc:	447c      	add	r4, pc
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400bde:	4816      	ldr	r0, [pc, #88]	; (400c38 <sysclk_init+0x64>)
  400be0:	4b17      	ldr	r3, [pc, #92]	; (400c40 <sysclk_init+0x6c>)
  400be2:	58e3      	ldr	r3, [r4, r3]
  400be4:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400be6:	2006      	movs	r0, #6
  400be8:	4b16      	ldr	r3, [pc, #88]	; (400c44 <sysclk_init+0x70>)
  400bea:	447b      	add	r3, pc
  400bec:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400bee:	1d38      	adds	r0, r7, #4
  400bf0:	2314      	movs	r3, #20
  400bf2:	2201      	movs	r2, #1
  400bf4:	2106      	movs	r1, #6
  400bf6:	4d14      	ldr	r5, [pc, #80]	; (400c48 <sysclk_init+0x74>)
  400bf8:	447d      	add	r5, pc
  400bfa:	47a8      	blx	r5
		pll_enable(&pllcfg, 0);
  400bfc:	1d3b      	adds	r3, r7, #4
  400bfe:	2100      	movs	r1, #0
  400c00:	4618      	mov	r0, r3
  400c02:	4b12      	ldr	r3, [pc, #72]	; (400c4c <sysclk_init+0x78>)
  400c04:	447b      	add	r3, pc
  400c06:	4798      	blx	r3
		pll_wait_for_lock(0);
  400c08:	2000      	movs	r0, #0
  400c0a:	4b11      	ldr	r3, [pc, #68]	; (400c50 <sysclk_init+0x7c>)
  400c0c:	447b      	add	r3, pc
  400c0e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c10:	2010      	movs	r0, #16
  400c12:	4b10      	ldr	r3, [pc, #64]	; (400c54 <sysclk_init+0x80>)
  400c14:	58e3      	ldr	r3, [r4, r3]
  400c16:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400c18:	4b0f      	ldr	r3, [pc, #60]	; (400c58 <sysclk_init+0x84>)
  400c1a:	58e3      	ldr	r3, [r4, r3]
  400c1c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400c1e:	4b0f      	ldr	r3, [pc, #60]	; (400c5c <sysclk_init+0x88>)
  400c20:	447b      	add	r3, pc
  400c22:	4798      	blx	r3
  400c24:	4603      	mov	r3, r0
  400c26:	4618      	mov	r0, r3
  400c28:	4b05      	ldr	r3, [pc, #20]	; (400c40 <sysclk_init+0x6c>)
  400c2a:	58e3      	ldr	r3, [r4, r3]
  400c2c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400c2e:	bf00      	nop
  400c30:	3708      	adds	r7, #8
  400c32:	46bd      	mov	sp, r7
  400c34:	bdb0      	pop	{r4, r5, r7, pc}
  400c36:	bf00      	nop
  400c38:	07270e00 	.word	0x07270e00
  400c3c:	00002894 	.word	0x00002894
  400c40:	00000040 	.word	0x00000040
  400c44:	ffffff4b 	.word	0xffffff4b
  400c48:	fffffe5d 	.word	0xfffffe5d
  400c4c:	fffffea9 	.word	0xfffffea9
  400c50:	ffffff65 	.word	0xffffff65
  400c54:	00000128 	.word	0x00000128
  400c58:	00000134 	.word	0x00000134
  400c5c:	ffffff99 	.word	0xffffff99

00400c60 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400c60:	b480      	push	{r7}
  400c62:	b085      	sub	sp, #20
  400c64:	af00      	add	r7, sp, #0
  400c66:	60f8      	str	r0, [r7, #12]
  400c68:	60b9      	str	r1, [r7, #8]
  400c6a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	2b00      	cmp	r3, #0
  400c70:	d003      	beq.n	400c7a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400c72:	68fb      	ldr	r3, [r7, #12]
  400c74:	68ba      	ldr	r2, [r7, #8]
  400c76:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400c78:	e002      	b.n	400c80 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  400c7a:	68fb      	ldr	r3, [r7, #12]
  400c7c:	68ba      	ldr	r2, [r7, #8]
  400c7e:	661a      	str	r2, [r3, #96]	; 0x60
}
  400c80:	bf00      	nop
  400c82:	3714      	adds	r7, #20
  400c84:	46bd      	mov	sp, r7
  400c86:	bc80      	pop	{r7}
  400c88:	4770      	bx	lr

00400c8a <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  400c8a:	b480      	push	{r7}
  400c8c:	b085      	sub	sp, #20
  400c8e:	af00      	add	r7, sp, #0
  400c90:	60f8      	str	r0, [r7, #12]
  400c92:	60b9      	str	r1, [r7, #8]
  400c94:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400c96:	68fb      	ldr	r3, [r7, #12]
  400c98:	68ba      	ldr	r2, [r7, #8]
  400c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400c9e:	687b      	ldr	r3, [r7, #4]
  400ca0:	005b      	lsls	r3, r3, #1
  400ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ca6:	fbb2 f3f3 	udiv	r3, r2, r3
  400caa:	3b01      	subs	r3, #1
  400cac:	f3c3 020d 	ubfx	r2, r3, #0, #14
  400cb0:	68fb      	ldr	r3, [r7, #12]
  400cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  400cb6:	bf00      	nop
  400cb8:	3714      	adds	r7, #20
  400cba:	46bd      	mov	sp, r7
  400cbc:	bc80      	pop	{r7}
  400cbe:	4770      	bx	lr

00400cc0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400cc0:	b480      	push	{r7}
  400cc2:	b087      	sub	sp, #28
  400cc4:	af00      	add	r7, sp, #0
  400cc6:	60f8      	str	r0, [r7, #12]
  400cc8:	60b9      	str	r1, [r7, #8]
  400cca:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ccc:	68fb      	ldr	r3, [r7, #12]
  400cce:	687a      	ldr	r2, [r7, #4]
  400cd0:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400cd2:	68bb      	ldr	r3, [r7, #8]
  400cd4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400cd8:	d04a      	beq.n	400d70 <pio_set_peripheral+0xb0>
  400cda:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400cde:	d808      	bhi.n	400cf2 <pio_set_peripheral+0x32>
  400ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400ce4:	d016      	beq.n	400d14 <pio_set_peripheral+0x54>
  400ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400cea:	d02c      	beq.n	400d46 <pio_set_peripheral+0x86>
  400cec:	2b00      	cmp	r3, #0
  400cee:	d069      	beq.n	400dc4 <pio_set_peripheral+0x104>
  400cf0:	e064      	b.n	400dbc <pio_set_peripheral+0xfc>
  400cf2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cf6:	d065      	beq.n	400dc4 <pio_set_peripheral+0x104>
  400cf8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400cfc:	d803      	bhi.n	400d06 <pio_set_peripheral+0x46>
  400cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d02:	d04a      	beq.n	400d9a <pio_set_peripheral+0xda>
  400d04:	e05a      	b.n	400dbc <pio_set_peripheral+0xfc>
  400d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d0a:	d05b      	beq.n	400dc4 <pio_set_peripheral+0x104>
  400d0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d10:	d058      	beq.n	400dc4 <pio_set_peripheral+0x104>
  400d12:	e053      	b.n	400dbc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d14:	68fb      	ldr	r3, [r7, #12]
  400d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d18:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d1a:	68fb      	ldr	r3, [r7, #12]
  400d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d1e:	687b      	ldr	r3, [r7, #4]
  400d20:	43d9      	mvns	r1, r3
  400d22:	697b      	ldr	r3, [r7, #20]
  400d24:	400b      	ands	r3, r1
  400d26:	401a      	ands	r2, r3
  400d28:	68fb      	ldr	r3, [r7, #12]
  400d2a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d2c:	68fb      	ldr	r3, [r7, #12]
  400d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d30:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d32:	68fb      	ldr	r3, [r7, #12]
  400d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d36:	687b      	ldr	r3, [r7, #4]
  400d38:	43d9      	mvns	r1, r3
  400d3a:	697b      	ldr	r3, [r7, #20]
  400d3c:	400b      	ands	r3, r1
  400d3e:	401a      	ands	r2, r3
  400d40:	68fb      	ldr	r3, [r7, #12]
  400d42:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d44:	e03a      	b.n	400dbc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d46:	68fb      	ldr	r3, [r7, #12]
  400d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d4a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d4c:	687a      	ldr	r2, [r7, #4]
  400d4e:	697b      	ldr	r3, [r7, #20]
  400d50:	431a      	orrs	r2, r3
  400d52:	68fb      	ldr	r3, [r7, #12]
  400d54:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d56:	68fb      	ldr	r3, [r7, #12]
  400d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d5a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d5c:	68fb      	ldr	r3, [r7, #12]
  400d5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d60:	687b      	ldr	r3, [r7, #4]
  400d62:	43d9      	mvns	r1, r3
  400d64:	697b      	ldr	r3, [r7, #20]
  400d66:	400b      	ands	r3, r1
  400d68:	401a      	ands	r2, r3
  400d6a:	68fb      	ldr	r3, [r7, #12]
  400d6c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d6e:	e025      	b.n	400dbc <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d70:	68fb      	ldr	r3, [r7, #12]
  400d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d74:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d76:	68fb      	ldr	r3, [r7, #12]
  400d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d7a:	687b      	ldr	r3, [r7, #4]
  400d7c:	43d9      	mvns	r1, r3
  400d7e:	697b      	ldr	r3, [r7, #20]
  400d80:	400b      	ands	r3, r1
  400d82:	401a      	ands	r2, r3
  400d84:	68fb      	ldr	r3, [r7, #12]
  400d86:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d88:	68fb      	ldr	r3, [r7, #12]
  400d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400d8c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d8e:	687a      	ldr	r2, [r7, #4]
  400d90:	697b      	ldr	r3, [r7, #20]
  400d92:	431a      	orrs	r2, r3
  400d94:	68fb      	ldr	r3, [r7, #12]
  400d96:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400d98:	e010      	b.n	400dbc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d9a:	68fb      	ldr	r3, [r7, #12]
  400d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400d9e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400da0:	687a      	ldr	r2, [r7, #4]
  400da2:	697b      	ldr	r3, [r7, #20]
  400da4:	431a      	orrs	r2, r3
  400da6:	68fb      	ldr	r3, [r7, #12]
  400da8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400daa:	68fb      	ldr	r3, [r7, #12]
  400dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400dae:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400db0:	687a      	ldr	r2, [r7, #4]
  400db2:	697b      	ldr	r3, [r7, #20]
  400db4:	431a      	orrs	r2, r3
  400db6:	68fb      	ldr	r3, [r7, #12]
  400db8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400dba:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400dbc:	68fb      	ldr	r3, [r7, #12]
  400dbe:	687a      	ldr	r2, [r7, #4]
  400dc0:	605a      	str	r2, [r3, #4]
  400dc2:	e000      	b.n	400dc6 <pio_set_peripheral+0x106>
		return;
  400dc4:	bf00      	nop
}
  400dc6:	371c      	adds	r7, #28
  400dc8:	46bd      	mov	sp, r7
  400dca:	bc80      	pop	{r7}
  400dcc:	4770      	bx	lr
	...

00400dd0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400dd0:	b590      	push	{r4, r7, lr}
  400dd2:	b085      	sub	sp, #20
  400dd4:	af00      	add	r7, sp, #0
  400dd6:	60f8      	str	r0, [r7, #12]
  400dd8:	60b9      	str	r1, [r7, #8]
  400dda:	607a      	str	r2, [r7, #4]
  400ddc:	4c1c      	ldr	r4, [pc, #112]	; (400e50 <pio_set_input+0x80>)
  400dde:	447c      	add	r4, pc
	pio_disable_interrupt(p_pio, ul_mask);
  400de0:	68b9      	ldr	r1, [r7, #8]
  400de2:	68f8      	ldr	r0, [r7, #12]
  400de4:	4b1b      	ldr	r3, [pc, #108]	; (400e54 <pio_set_input+0x84>)
  400de6:	58e3      	ldr	r3, [r4, r3]
  400de8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400dea:	687b      	ldr	r3, [r7, #4]
  400dec:	f003 0301 	and.w	r3, r3, #1
  400df0:	461a      	mov	r2, r3
  400df2:	68b9      	ldr	r1, [r7, #8]
  400df4:	68f8      	ldr	r0, [r7, #12]
  400df6:	4b18      	ldr	r3, [pc, #96]	; (400e58 <pio_set_input+0x88>)
  400df8:	58e3      	ldr	r3, [r4, r3]
  400dfa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400dfc:	687b      	ldr	r3, [r7, #4]
  400dfe:	f003 030a 	and.w	r3, r3, #10
  400e02:	2b00      	cmp	r3, #0
  400e04:	d003      	beq.n	400e0e <pio_set_input+0x3e>
		p_pio->PIO_IFER = ul_mask;
  400e06:	68fb      	ldr	r3, [r7, #12]
  400e08:	68ba      	ldr	r2, [r7, #8]
  400e0a:	621a      	str	r2, [r3, #32]
  400e0c:	e002      	b.n	400e14 <pio_set_input+0x44>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400e0e:	68fb      	ldr	r3, [r7, #12]
  400e10:	68ba      	ldr	r2, [r7, #8]
  400e12:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400e14:	687b      	ldr	r3, [r7, #4]
  400e16:	f003 0302 	and.w	r3, r3, #2
  400e1a:	2b00      	cmp	r3, #0
  400e1c:	d004      	beq.n	400e28 <pio_set_input+0x58>
		p_pio->PIO_IFSCDR = ul_mask;
  400e1e:	68fb      	ldr	r3, [r7, #12]
  400e20:	68ba      	ldr	r2, [r7, #8]
  400e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400e26:	e008      	b.n	400e3a <pio_set_input+0x6a>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400e28:	687b      	ldr	r3, [r7, #4]
  400e2a:	f003 0308 	and.w	r3, r3, #8
  400e2e:	2b00      	cmp	r3, #0
  400e30:	d003      	beq.n	400e3a <pio_set_input+0x6a>
			p_pio->PIO_IFSCER = ul_mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	68ba      	ldr	r2, [r7, #8]
  400e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400e3a:	68fb      	ldr	r3, [r7, #12]
  400e3c:	68ba      	ldr	r2, [r7, #8]
  400e3e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400e40:	68fb      	ldr	r3, [r7, #12]
  400e42:	68ba      	ldr	r2, [r7, #8]
  400e44:	601a      	str	r2, [r3, #0]
}
  400e46:	bf00      	nop
  400e48:	3714      	adds	r7, #20
  400e4a:	46bd      	mov	sp, r7
  400e4c:	bd90      	pop	{r4, r7, pc}
  400e4e:	bf00      	nop
  400e50:	00002692 	.word	0x00002692
  400e54:	0000008c 	.word	0x0000008c
  400e58:	00000090 	.word	0x00000090

00400e5c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400e5c:	b590      	push	{r4, r7, lr}
  400e5e:	b085      	sub	sp, #20
  400e60:	af00      	add	r7, sp, #0
  400e62:	60f8      	str	r0, [r7, #12]
  400e64:	60b9      	str	r1, [r7, #8]
  400e66:	607a      	str	r2, [r7, #4]
  400e68:	603b      	str	r3, [r7, #0]
  400e6a:	4c15      	ldr	r4, [pc, #84]	; (400ec0 <pio_set_output+0x64>)
  400e6c:	447c      	add	r4, pc
	pio_disable_interrupt(p_pio, ul_mask);
  400e6e:	68b9      	ldr	r1, [r7, #8]
  400e70:	68f8      	ldr	r0, [r7, #12]
  400e72:	4b14      	ldr	r3, [pc, #80]	; (400ec4 <pio_set_output+0x68>)
  400e74:	58e3      	ldr	r3, [r4, r3]
  400e76:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400e78:	6a3a      	ldr	r2, [r7, #32]
  400e7a:	68b9      	ldr	r1, [r7, #8]
  400e7c:	68f8      	ldr	r0, [r7, #12]
  400e7e:	4b12      	ldr	r3, [pc, #72]	; (400ec8 <pio_set_output+0x6c>)
  400e80:	58e3      	ldr	r3, [r4, r3]
  400e82:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400e84:	683b      	ldr	r3, [r7, #0]
  400e86:	2b00      	cmp	r3, #0
  400e88:	d003      	beq.n	400e92 <pio_set_output+0x36>
		p_pio->PIO_MDER = ul_mask;
  400e8a:	68fb      	ldr	r3, [r7, #12]
  400e8c:	68ba      	ldr	r2, [r7, #8]
  400e8e:	651a      	str	r2, [r3, #80]	; 0x50
  400e90:	e002      	b.n	400e98 <pio_set_output+0x3c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400e92:	68fb      	ldr	r3, [r7, #12]
  400e94:	68ba      	ldr	r2, [r7, #8]
  400e96:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400e98:	687b      	ldr	r3, [r7, #4]
  400e9a:	2b00      	cmp	r3, #0
  400e9c:	d003      	beq.n	400ea6 <pio_set_output+0x4a>
		p_pio->PIO_SODR = ul_mask;
  400e9e:	68fb      	ldr	r3, [r7, #12]
  400ea0:	68ba      	ldr	r2, [r7, #8]
  400ea2:	631a      	str	r2, [r3, #48]	; 0x30
  400ea4:	e002      	b.n	400eac <pio_set_output+0x50>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	68ba      	ldr	r2, [r7, #8]
  400eaa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400eac:	68fb      	ldr	r3, [r7, #12]
  400eae:	68ba      	ldr	r2, [r7, #8]
  400eb0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400eb2:	68fb      	ldr	r3, [r7, #12]
  400eb4:	68ba      	ldr	r2, [r7, #8]
  400eb6:	601a      	str	r2, [r3, #0]
}
  400eb8:	bf00      	nop
  400eba:	3714      	adds	r7, #20
  400ebc:	46bd      	mov	sp, r7
  400ebe:	bd90      	pop	{r4, r7, pc}
  400ec0:	00002604 	.word	0x00002604
  400ec4:	0000008c 	.word	0x0000008c
  400ec8:	00000090 	.word	0x00000090

00400ecc <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400ecc:	b480      	push	{r7}
  400ece:	b085      	sub	sp, #20
  400ed0:	af00      	add	r7, sp, #0
  400ed2:	60f8      	str	r0, [r7, #12]
  400ed4:	60b9      	str	r1, [r7, #8]
  400ed6:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	f003 0310 	and.w	r3, r3, #16
  400ede:	2b00      	cmp	r3, #0
  400ee0:	d020      	beq.n	400f24 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	68ba      	ldr	r2, [r7, #8]
  400ee6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	f003 0320 	and.w	r3, r3, #32
  400ef0:	2b00      	cmp	r3, #0
  400ef2:	d004      	beq.n	400efe <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400ef4:	68fb      	ldr	r3, [r7, #12]
  400ef6:	68ba      	ldr	r2, [r7, #8]
  400ef8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400efc:	e003      	b.n	400f06 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	68ba      	ldr	r2, [r7, #8]
  400f02:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400f0c:	2b00      	cmp	r3, #0
  400f0e:	d004      	beq.n	400f1a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400f10:	68fb      	ldr	r3, [r7, #12]
  400f12:	68ba      	ldr	r2, [r7, #8]
  400f14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400f18:	e008      	b.n	400f2c <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400f1a:	68fb      	ldr	r3, [r7, #12]
  400f1c:	68ba      	ldr	r2, [r7, #8]
  400f1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400f22:	e003      	b.n	400f2c <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	68ba      	ldr	r2, [r7, #8]
  400f28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400f2c:	bf00      	nop
  400f2e:	3714      	adds	r7, #20
  400f30:	46bd      	mov	sp, r7
  400f32:	bc80      	pop	{r7}
  400f34:	4770      	bx	lr

00400f36 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f36:	b480      	push	{r7}
  400f38:	b083      	sub	sp, #12
  400f3a:	af00      	add	r7, sp, #0
  400f3c:	6078      	str	r0, [r7, #4]
  400f3e:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	683a      	ldr	r2, [r7, #0]
  400f44:	641a      	str	r2, [r3, #64]	; 0x40
}
  400f46:	bf00      	nop
  400f48:	370c      	adds	r7, #12
  400f4a:	46bd      	mov	sp, r7
  400f4c:	bc80      	pop	{r7}
  400f4e:	4770      	bx	lr

00400f50 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400f50:	b480      	push	{r7}
  400f52:	b083      	sub	sp, #12
  400f54:	af00      	add	r7, sp, #0
  400f56:	6078      	str	r0, [r7, #4]
  400f58:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400f5a:	687b      	ldr	r3, [r7, #4]
  400f5c:	683a      	ldr	r2, [r7, #0]
  400f5e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400f60:	bf00      	nop
  400f62:	370c      	adds	r7, #12
  400f64:	46bd      	mov	sp, r7
  400f66:	bc80      	pop	{r7}
  400f68:	4770      	bx	lr

00400f6a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400f6a:	b480      	push	{r7}
  400f6c:	b083      	sub	sp, #12
  400f6e:	af00      	add	r7, sp, #0
  400f70:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400f72:	687b      	ldr	r3, [r7, #4]
  400f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400f76:	4618      	mov	r0, r3
  400f78:	370c      	adds	r7, #12
  400f7a:	46bd      	mov	sp, r7
  400f7c:	bc80      	pop	{r7}
  400f7e:	4770      	bx	lr

00400f80 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400f80:	b480      	push	{r7}
  400f82:	b083      	sub	sp, #12
  400f84:	af00      	add	r7, sp, #0
  400f86:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400f88:	687b      	ldr	r3, [r7, #4]
  400f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400f8c:	4618      	mov	r0, r3
  400f8e:	370c      	adds	r7, #12
  400f90:	46bd      	mov	sp, r7
  400f92:	bc80      	pop	{r7}
  400f94:	4770      	bx	lr
	...

00400f98 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400f98:	b5b0      	push	{r4, r5, r7, lr}
  400f9a:	b086      	sub	sp, #24
  400f9c:	af02      	add	r7, sp, #8
  400f9e:	6078      	str	r0, [r7, #4]
  400fa0:	6039      	str	r1, [r7, #0]
  400fa2:	4c6b      	ldr	r4, [pc, #428]	; (401150 <pio_configure_pin+0x1b8>)
  400fa4:	447c      	add	r4, pc
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400fa6:	6878      	ldr	r0, [r7, #4]
  400fa8:	4b6a      	ldr	r3, [pc, #424]	; (401154 <pio_configure_pin+0x1bc>)
  400faa:	58e3      	ldr	r3, [r4, r3]
  400fac:	4798      	blx	r3
  400fae:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400fb0:	683b      	ldr	r3, [r7, #0]
  400fb2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fba:	d06f      	beq.n	40109c <pio_configure_pin+0x104>
  400fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fc0:	d809      	bhi.n	400fd6 <pio_configure_pin+0x3e>
  400fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400fc6:	d02f      	beq.n	401028 <pio_configure_pin+0x90>
  400fc8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400fcc:	d049      	beq.n	401062 <pio_configure_pin+0xca>
  400fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400fd2:	d00c      	beq.n	400fee <pio_configure_pin+0x56>
  400fd4:	e0b5      	b.n	401142 <pio_configure_pin+0x1aa>
  400fd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400fda:	f000 8089 	beq.w	4010f0 <pio_configure_pin+0x158>
  400fde:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400fe2:	f000 8085 	beq.w	4010f0 <pio_configure_pin+0x158>
  400fe6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400fea:	d074      	beq.n	4010d6 <pio_configure_pin+0x13e>
  400fec:	e0a9      	b.n	401142 <pio_configure_pin+0x1aa>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400fee:	687b      	ldr	r3, [r7, #4]
  400ff0:	f003 031f 	and.w	r3, r3, #31
  400ff4:	2201      	movs	r2, #1
  400ff6:	fa02 f303 	lsl.w	r3, r2, r3
  400ffa:	461a      	mov	r2, r3
  400ffc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401000:	68f8      	ldr	r0, [r7, #12]
  401002:	4b55      	ldr	r3, [pc, #340]	; (401158 <pio_configure_pin+0x1c0>)
  401004:	58e3      	ldr	r3, [r4, r3]
  401006:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	f003 031f 	and.w	r3, r3, #31
  40100e:	2201      	movs	r2, #1
  401010:	fa02 f303 	lsl.w	r3, r2, r3
  401014:	4619      	mov	r1, r3
  401016:	683b      	ldr	r3, [r7, #0]
  401018:	f003 0301 	and.w	r3, r3, #1
  40101c:	461a      	mov	r2, r3
  40101e:	68f8      	ldr	r0, [r7, #12]
  401020:	4b4e      	ldr	r3, [pc, #312]	; (40115c <pio_configure_pin+0x1c4>)
  401022:	58e3      	ldr	r3, [r4, r3]
  401024:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401026:	e08e      	b.n	401146 <pio_configure_pin+0x1ae>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401028:	687b      	ldr	r3, [r7, #4]
  40102a:	f003 031f 	and.w	r3, r3, #31
  40102e:	2201      	movs	r2, #1
  401030:	fa02 f303 	lsl.w	r3, r2, r3
  401034:	461a      	mov	r2, r3
  401036:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40103a:	68f8      	ldr	r0, [r7, #12]
  40103c:	4b46      	ldr	r3, [pc, #280]	; (401158 <pio_configure_pin+0x1c0>)
  40103e:	58e3      	ldr	r3, [r4, r3]
  401040:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401042:	687b      	ldr	r3, [r7, #4]
  401044:	f003 031f 	and.w	r3, r3, #31
  401048:	2201      	movs	r2, #1
  40104a:	fa02 f303 	lsl.w	r3, r2, r3
  40104e:	4619      	mov	r1, r3
  401050:	683b      	ldr	r3, [r7, #0]
  401052:	f003 0301 	and.w	r3, r3, #1
  401056:	461a      	mov	r2, r3
  401058:	68f8      	ldr	r0, [r7, #12]
  40105a:	4b40      	ldr	r3, [pc, #256]	; (40115c <pio_configure_pin+0x1c4>)
  40105c:	58e3      	ldr	r3, [r4, r3]
  40105e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401060:	e071      	b.n	401146 <pio_configure_pin+0x1ae>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401062:	687b      	ldr	r3, [r7, #4]
  401064:	f003 031f 	and.w	r3, r3, #31
  401068:	2201      	movs	r2, #1
  40106a:	fa02 f303 	lsl.w	r3, r2, r3
  40106e:	461a      	mov	r2, r3
  401070:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401074:	68f8      	ldr	r0, [r7, #12]
  401076:	4b38      	ldr	r3, [pc, #224]	; (401158 <pio_configure_pin+0x1c0>)
  401078:	58e3      	ldr	r3, [r4, r3]
  40107a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	f003 031f 	and.w	r3, r3, #31
  401082:	2201      	movs	r2, #1
  401084:	fa02 f303 	lsl.w	r3, r2, r3
  401088:	4619      	mov	r1, r3
  40108a:	683b      	ldr	r3, [r7, #0]
  40108c:	f003 0301 	and.w	r3, r3, #1
  401090:	461a      	mov	r2, r3
  401092:	68f8      	ldr	r0, [r7, #12]
  401094:	4b31      	ldr	r3, [pc, #196]	; (40115c <pio_configure_pin+0x1c4>)
  401096:	58e3      	ldr	r3, [r4, r3]
  401098:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40109a:	e054      	b.n	401146 <pio_configure_pin+0x1ae>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40109c:	687b      	ldr	r3, [r7, #4]
  40109e:	f003 031f 	and.w	r3, r3, #31
  4010a2:	2201      	movs	r2, #1
  4010a4:	fa02 f303 	lsl.w	r3, r2, r3
  4010a8:	461a      	mov	r2, r3
  4010aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4010ae:	68f8      	ldr	r0, [r7, #12]
  4010b0:	4b29      	ldr	r3, [pc, #164]	; (401158 <pio_configure_pin+0x1c0>)
  4010b2:	58e3      	ldr	r3, [r4, r3]
  4010b4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	f003 031f 	and.w	r3, r3, #31
  4010bc:	2201      	movs	r2, #1
  4010be:	fa02 f303 	lsl.w	r3, r2, r3
  4010c2:	4619      	mov	r1, r3
  4010c4:	683b      	ldr	r3, [r7, #0]
  4010c6:	f003 0301 	and.w	r3, r3, #1
  4010ca:	461a      	mov	r2, r3
  4010cc:	68f8      	ldr	r0, [r7, #12]
  4010ce:	4b23      	ldr	r3, [pc, #140]	; (40115c <pio_configure_pin+0x1c4>)
  4010d0:	58e3      	ldr	r3, [r4, r3]
  4010d2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4010d4:	e037      	b.n	401146 <pio_configure_pin+0x1ae>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	f003 031f 	and.w	r3, r3, #31
  4010dc:	2201      	movs	r2, #1
  4010de:	fa02 f303 	lsl.w	r3, r2, r3
  4010e2:	683a      	ldr	r2, [r7, #0]
  4010e4:	4619      	mov	r1, r3
  4010e6:	68f8      	ldr	r0, [r7, #12]
  4010e8:	4b1d      	ldr	r3, [pc, #116]	; (401160 <pio_configure_pin+0x1c8>)
  4010ea:	58e3      	ldr	r3, [r4, r3]
  4010ec:	4798      	blx	r3
		break;
  4010ee:	e02a      	b.n	401146 <pio_configure_pin+0x1ae>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4010f0:	687b      	ldr	r3, [r7, #4]
  4010f2:	f003 031f 	and.w	r3, r3, #31
  4010f6:	2201      	movs	r2, #1
  4010f8:	fa02 f303 	lsl.w	r3, r2, r3
  4010fc:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4010fe:	683b      	ldr	r3, [r7, #0]
  401100:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401104:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401108:	bf0c      	ite	eq
  40110a:	2301      	moveq	r3, #1
  40110c:	2300      	movne	r3, #0
  40110e:	b2db      	uxtb	r3, r3
  401110:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401112:	683b      	ldr	r3, [r7, #0]
  401114:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401118:	2b00      	cmp	r3, #0
  40111a:	bf14      	ite	ne
  40111c:	2301      	movne	r3, #1
  40111e:	2300      	moveq	r3, #0
  401120:	b2db      	uxtb	r3, r3
  401122:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401124:	683b      	ldr	r3, [r7, #0]
  401126:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40112a:	2b00      	cmp	r3, #0
  40112c:	bf14      	ite	ne
  40112e:	2301      	movne	r3, #1
  401130:	2300      	moveq	r3, #0
  401132:	b2db      	uxtb	r3, r3
  401134:	9300      	str	r3, [sp, #0]
  401136:	4603      	mov	r3, r0
  401138:	68f8      	ldr	r0, [r7, #12]
  40113a:	4d0a      	ldr	r5, [pc, #40]	; (401164 <pio_configure_pin+0x1cc>)
  40113c:	5964      	ldr	r4, [r4, r5]
  40113e:	47a0      	blx	r4
		break;
  401140:	e001      	b.n	401146 <pio_configure_pin+0x1ae>

	default:
		return 0;
  401142:	2300      	movs	r3, #0
  401144:	e000      	b.n	401148 <pio_configure_pin+0x1b0>
	}

	return 1;
  401146:	2301      	movs	r3, #1
}
  401148:	4618      	mov	r0, r3
  40114a:	3710      	adds	r7, #16
  40114c:	46bd      	mov	sp, r7
  40114e:	bdb0      	pop	{r4, r5, r7, pc}
  401150:	000024cc 	.word	0x000024cc
  401154:	00000004 	.word	0x00000004
  401158:	00000058 	.word	0x00000058
  40115c:	00000090 	.word	0x00000090
  401160:	000000a8 	.word	0x000000a8
  401164:	00000080 	.word	0x00000080

00401168 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  401168:	b480      	push	{r7}
  40116a:	b085      	sub	sp, #20
  40116c:	af00      	add	r7, sp, #0
  40116e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401170:	687b      	ldr	r3, [r7, #4]
  401172:	095b      	lsrs	r3, r3, #5
  401174:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401178:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40117c:	025b      	lsls	r3, r3, #9
  40117e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401180:	68fb      	ldr	r3, [r7, #12]
}
  401182:	4618      	mov	r0, r3
  401184:	3714      	adds	r7, #20
  401186:	46bd      	mov	sp, r7
  401188:	bc80      	pop	{r7}
  40118a:	4770      	bx	lr

0040118c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40118c:	b480      	push	{r7}
  40118e:	b085      	sub	sp, #20
  401190:	af00      	add	r7, sp, #0
  401192:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401194:	491c      	ldr	r1, [pc, #112]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  401196:	4b1c      	ldr	r3, [pc, #112]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  401198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40119a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40119e:	687b      	ldr	r3, [r7, #4]
  4011a0:	4313      	orrs	r3, r2
  4011a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011a8:	60fb      	str	r3, [r7, #12]
  4011aa:	e007      	b.n	4011bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011ac:	68fb      	ldr	r3, [r7, #12]
  4011ae:	2b00      	cmp	r3, #0
  4011b0:	d101      	bne.n	4011b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4011b2:	2301      	movs	r3, #1
  4011b4:	e023      	b.n	4011fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4011b6:	68fb      	ldr	r3, [r7, #12]
  4011b8:	3b01      	subs	r3, #1
  4011ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011bc:	4b12      	ldr	r3, [pc, #72]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  4011be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011c0:	f003 0308 	and.w	r3, r3, #8
  4011c4:	2b00      	cmp	r3, #0
  4011c6:	d0f1      	beq.n	4011ac <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011c8:	4a0f      	ldr	r2, [pc, #60]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  4011ca:	4b0f      	ldr	r3, [pc, #60]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  4011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ce:	f023 0303 	bic.w	r3, r3, #3
  4011d2:	f043 0302 	orr.w	r3, r3, #2
  4011d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011dc:	60fb      	str	r3, [r7, #12]
  4011de:	e007      	b.n	4011f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011e0:	68fb      	ldr	r3, [r7, #12]
  4011e2:	2b00      	cmp	r3, #0
  4011e4:	d101      	bne.n	4011ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4011e6:	2301      	movs	r3, #1
  4011e8:	e009      	b.n	4011fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4011ea:	68fb      	ldr	r3, [r7, #12]
  4011ec:	3b01      	subs	r3, #1
  4011ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011f0:	4b05      	ldr	r3, [pc, #20]	; (401208 <pmc_switch_mck_to_pllack+0x7c>)
  4011f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011f4:	f003 0308 	and.w	r3, r3, #8
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	d0f1      	beq.n	4011e0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4011fc:	2300      	movs	r3, #0
}
  4011fe:	4618      	mov	r0, r3
  401200:	3714      	adds	r7, #20
  401202:	46bd      	mov	sp, r7
  401204:	bc80      	pop	{r7}
  401206:	4770      	bx	lr
  401208:	400e0400 	.word	0x400e0400

0040120c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40120c:	b480      	push	{r7}
  40120e:	b083      	sub	sp, #12
  401210:	af00      	add	r7, sp, #0
  401212:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401214:	687b      	ldr	r3, [r7, #4]
  401216:	2b01      	cmp	r3, #1
  401218:	d107      	bne.n	40122a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40121a:	4a08      	ldr	r2, [pc, #32]	; (40123c <pmc_switch_sclk_to_32kxtal+0x30>)
  40121c:	4b07      	ldr	r3, [pc, #28]	; (40123c <pmc_switch_sclk_to_32kxtal+0x30>)
  40121e:	689b      	ldr	r3, [r3, #8]
  401220:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  401224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401228:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40122a:	4b04      	ldr	r3, [pc, #16]	; (40123c <pmc_switch_sclk_to_32kxtal+0x30>)
  40122c:	4a04      	ldr	r2, [pc, #16]	; (401240 <pmc_switch_sclk_to_32kxtal+0x34>)
  40122e:	601a      	str	r2, [r3, #0]
}
  401230:	bf00      	nop
  401232:	370c      	adds	r7, #12
  401234:	46bd      	mov	sp, r7
  401236:	bc80      	pop	{r7}
  401238:	4770      	bx	lr
  40123a:	bf00      	nop
  40123c:	400e1410 	.word	0x400e1410
  401240:	a5000008 	.word	0xa5000008

00401244 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401244:	b480      	push	{r7}
  401246:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  401248:	4b09      	ldr	r3, [pc, #36]	; (401270 <pmc_osc_is_ready_32kxtal+0x2c>)
  40124a:	695b      	ldr	r3, [r3, #20]
  40124c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401250:	2b00      	cmp	r3, #0
  401252:	d007      	beq.n	401264 <pmc_osc_is_ready_32kxtal+0x20>
  401254:	4b07      	ldr	r3, [pc, #28]	; (401274 <pmc_osc_is_ready_32kxtal+0x30>)
  401256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401258:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40125c:	2b00      	cmp	r3, #0
  40125e:	d001      	beq.n	401264 <pmc_osc_is_ready_32kxtal+0x20>
  401260:	2301      	movs	r3, #1
  401262:	e000      	b.n	401266 <pmc_osc_is_ready_32kxtal+0x22>
  401264:	2300      	movs	r3, #0
}
  401266:	4618      	mov	r0, r3
  401268:	46bd      	mov	sp, r7
  40126a:	bc80      	pop	{r7}
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop
  401270:	400e1410 	.word	0x400e1410
  401274:	400e0400 	.word	0x400e0400

00401278 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  401278:	b480      	push	{r7}
  40127a:	b083      	sub	sp, #12
  40127c:	af00      	add	r7, sp, #0
  40127e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401280:	4a18      	ldr	r2, [pc, #96]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401282:	4b18      	ldr	r3, [pc, #96]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401284:	6a1b      	ldr	r3, [r3, #32]
  401286:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40128a:	f043 0308 	orr.w	r3, r3, #8
  40128e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401290:	bf00      	nop
  401292:	4b14      	ldr	r3, [pc, #80]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  401294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40129a:	2b00      	cmp	r3, #0
  40129c:	d0f9      	beq.n	401292 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40129e:	4911      	ldr	r1, [pc, #68]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012a0:	4b10      	ldr	r3, [pc, #64]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012a2:	6a1b      	ldr	r3, [r3, #32]
  4012a4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4012a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4012ac:	687a      	ldr	r2, [r7, #4]
  4012ae:	4313      	orrs	r3, r2
  4012b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4012b4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4012b6:	bf00      	nop
  4012b8:	4b0a      	ldr	r3, [pc, #40]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4012c0:	2b00      	cmp	r3, #0
  4012c2:	d0f9      	beq.n	4012b8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4012c4:	4a07      	ldr	r2, [pc, #28]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012c6:	4b07      	ldr	r3, [pc, #28]	; (4012e4 <pmc_switch_mainck_to_fastrc+0x6c>)
  4012c8:	6a1b      	ldr	r3, [r3, #32]
  4012ca:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4012d2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012d6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4012d8:	bf00      	nop
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	bc80      	pop	{r7}
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	400e0400 	.word	0x400e0400

004012e8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4012e8:	b480      	push	{r7}
  4012ea:	b083      	sub	sp, #12
  4012ec:	af00      	add	r7, sp, #0
  4012ee:	6078      	str	r0, [r7, #4]
  4012f0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4012f2:	687b      	ldr	r3, [r7, #4]
  4012f4:	2b00      	cmp	r3, #0
  4012f6:	d008      	beq.n	40130a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012f8:	4916      	ldr	r1, [pc, #88]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  4012fa:	4b16      	ldr	r3, [pc, #88]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  4012fc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4012fe:	4a16      	ldr	r2, [pc, #88]	; (401358 <pmc_switch_mainck_to_xtal+0x70>)
  401300:	401a      	ands	r2, r3
  401302:	4b16      	ldr	r3, [pc, #88]	; (40135c <pmc_switch_mainck_to_xtal+0x74>)
  401304:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401306:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  401308:	e01e      	b.n	401348 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40130a:	4912      	ldr	r1, [pc, #72]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  40130c:	4b11      	ldr	r3, [pc, #68]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  40130e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401310:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401314:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401318:	683a      	ldr	r2, [r7, #0]
  40131a:	0212      	lsls	r2, r2, #8
  40131c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40131e:	4313      	orrs	r3, r2
  401320:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401324:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401328:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40132a:	bf00      	nop
  40132c:	4b09      	ldr	r3, [pc, #36]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  40132e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401330:	f003 0301 	and.w	r3, r3, #1
  401334:	2b00      	cmp	r3, #0
  401336:	d0f9      	beq.n	40132c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401338:	4a06      	ldr	r2, [pc, #24]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  40133a:	4b06      	ldr	r3, [pc, #24]	; (401354 <pmc_switch_mainck_to_xtal+0x6c>)
  40133c:	6a1b      	ldr	r3, [r3, #32]
  40133e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401346:	6213      	str	r3, [r2, #32]
}
  401348:	bf00      	nop
  40134a:	370c      	adds	r7, #12
  40134c:	46bd      	mov	sp, r7
  40134e:	bc80      	pop	{r7}
  401350:	4770      	bx	lr
  401352:	bf00      	nop
  401354:	400e0400 	.word	0x400e0400
  401358:	fec8fffc 	.word	0xfec8fffc
  40135c:	01370002 	.word	0x01370002

00401360 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401360:	b480      	push	{r7}
  401362:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401364:	4b03      	ldr	r3, [pc, #12]	; (401374 <pmc_osc_is_ready_mainck+0x14>)
  401366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40136c:	4618      	mov	r0, r3
  40136e:	46bd      	mov	sp, r7
  401370:	bc80      	pop	{r7}
  401372:	4770      	bx	lr
  401374:	400e0400 	.word	0x400e0400

00401378 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401378:	b480      	push	{r7}
  40137a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <pmc_disable_pllack+0x14>)
  40137e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401382:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401384:	bf00      	nop
  401386:	46bd      	mov	sp, r7
  401388:	bc80      	pop	{r7}
  40138a:	4770      	bx	lr
  40138c:	400e0400 	.word	0x400e0400

00401390 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401390:	b480      	push	{r7}
  401392:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401394:	4b03      	ldr	r3, [pc, #12]	; (4013a4 <pmc_is_locked_pllack+0x14>)
  401396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401398:	f003 0302 	and.w	r3, r3, #2
}
  40139c:	4618      	mov	r0, r3
  40139e:	46bd      	mov	sp, r7
  4013a0:	bc80      	pop	{r7}
  4013a2:	4770      	bx	lr
  4013a4:	400e0400 	.word	0x400e0400

004013a8 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4013a8:	b480      	push	{r7}
  4013aa:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4013ac:	4b03      	ldr	r3, [pc, #12]	; (4013bc <pmc_disable_pllbck+0x14>)
  4013ae:	2200      	movs	r2, #0
  4013b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4013b2:	bf00      	nop
  4013b4:	46bd      	mov	sp, r7
  4013b6:	bc80      	pop	{r7}
  4013b8:	4770      	bx	lr
  4013ba:	bf00      	nop
  4013bc:	400e0400 	.word	0x400e0400

004013c0 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4013c0:	b480      	push	{r7}
  4013c2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4013c4:	4b03      	ldr	r3, [pc, #12]	; (4013d4 <pmc_is_locked_pllbck+0x14>)
  4013c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4013c8:	f003 0304 	and.w	r3, r3, #4
}
  4013cc:	4618      	mov	r0, r3
  4013ce:	46bd      	mov	sp, r7
  4013d0:	bc80      	pop	{r7}
  4013d2:	4770      	bx	lr
  4013d4:	400e0400 	.word	0x400e0400

004013d8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4013d8:	b480      	push	{r7}
  4013da:	b083      	sub	sp, #12
  4013dc:	af00      	add	r7, sp, #0
  4013de:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4013e0:	687b      	ldr	r3, [r7, #4]
  4013e2:	2b22      	cmp	r3, #34	; 0x22
  4013e4:	d901      	bls.n	4013ea <pmc_enable_periph_clk+0x12>
		return 1;
  4013e6:	2301      	movs	r3, #1
  4013e8:	e02f      	b.n	40144a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4013ea:	687b      	ldr	r3, [r7, #4]
  4013ec:	2b1f      	cmp	r3, #31
  4013ee:	d813      	bhi.n	401418 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4013f0:	4b18      	ldr	r3, [pc, #96]	; (401454 <pmc_enable_periph_clk+0x7c>)
  4013f2:	699a      	ldr	r2, [r3, #24]
  4013f4:	2101      	movs	r1, #1
  4013f6:	687b      	ldr	r3, [r7, #4]
  4013f8:	fa01 f303 	lsl.w	r3, r1, r3
  4013fc:	401a      	ands	r2, r3
  4013fe:	2101      	movs	r1, #1
  401400:	687b      	ldr	r3, [r7, #4]
  401402:	fa01 f303 	lsl.w	r3, r1, r3
  401406:	429a      	cmp	r2, r3
  401408:	d01e      	beq.n	401448 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40140a:	4a12      	ldr	r2, [pc, #72]	; (401454 <pmc_enable_periph_clk+0x7c>)
  40140c:	2101      	movs	r1, #1
  40140e:	687b      	ldr	r3, [r7, #4]
  401410:	fa01 f303 	lsl.w	r3, r1, r3
  401414:	6113      	str	r3, [r2, #16]
  401416:	e017      	b.n	401448 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401418:	687b      	ldr	r3, [r7, #4]
  40141a:	3b20      	subs	r3, #32
  40141c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40141e:	4b0d      	ldr	r3, [pc, #52]	; (401454 <pmc_enable_periph_clk+0x7c>)
  401420:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401424:	2101      	movs	r1, #1
  401426:	687b      	ldr	r3, [r7, #4]
  401428:	fa01 f303 	lsl.w	r3, r1, r3
  40142c:	401a      	ands	r2, r3
  40142e:	2101      	movs	r1, #1
  401430:	687b      	ldr	r3, [r7, #4]
  401432:	fa01 f303 	lsl.w	r3, r1, r3
  401436:	429a      	cmp	r2, r3
  401438:	d006      	beq.n	401448 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40143a:	4a06      	ldr	r2, [pc, #24]	; (401454 <pmc_enable_periph_clk+0x7c>)
  40143c:	2101      	movs	r1, #1
  40143e:	687b      	ldr	r3, [r7, #4]
  401440:	fa01 f303 	lsl.w	r3, r1, r3
  401444:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401448:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40144a:	4618      	mov	r0, r3
  40144c:	370c      	adds	r7, #12
  40144e:	46bd      	mov	sp, r7
  401450:	bc80      	pop	{r7}
  401452:	4770      	bx	lr
  401454:	400e0400 	.word	0x400e0400

00401458 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401458:	b480      	push	{r7}
  40145a:	b083      	sub	sp, #12
  40145c:	af00      	add	r7, sp, #0
  40145e:	4603      	mov	r3, r0
  401460:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401462:	4908      	ldr	r1, [pc, #32]	; (401484 <NVIC_EnableIRQ+0x2c>)
  401464:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401468:	095b      	lsrs	r3, r3, #5
  40146a:	79fa      	ldrb	r2, [r7, #7]
  40146c:	f002 021f 	and.w	r2, r2, #31
  401470:	2001      	movs	r0, #1
  401472:	fa00 f202 	lsl.w	r2, r0, r2
  401476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40147a:	bf00      	nop
  40147c:	370c      	adds	r7, #12
  40147e:	46bd      	mov	sp, r7
  401480:	bc80      	pop	{r7}
  401482:	4770      	bx	lr
  401484:	e000e100 	.word	0xe000e100

00401488 <osc_get_rate>:
{
  401488:	b480      	push	{r7}
  40148a:	b083      	sub	sp, #12
  40148c:	af00      	add	r7, sp, #0
  40148e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401490:	687b      	ldr	r3, [r7, #4]
  401492:	2b07      	cmp	r3, #7
  401494:	d827      	bhi.n	4014e6 <osc_get_rate+0x5e>
  401496:	a202      	add	r2, pc, #8	; (adr r2, 4014a0 <osc_get_rate+0x18>)
  401498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40149c:	441a      	add	r2, r3
  40149e:	4710      	bx	r2
  4014a0:	00000021 	.word	0x00000021
  4014a4:	00000027 	.word	0x00000027
  4014a8:	0000002d 	.word	0x0000002d
  4014ac:	00000033 	.word	0x00000033
  4014b0:	00000037 	.word	0x00000037
  4014b4:	0000003b 	.word	0x0000003b
  4014b8:	0000003f 	.word	0x0000003f
  4014bc:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  4014c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4014c4:	e010      	b.n	4014e8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  4014c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014ca:	e00d      	b.n	4014e8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  4014cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4014d0:	e00a      	b.n	4014e8 <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  4014d2:	4b08      	ldr	r3, [pc, #32]	; (4014f4 <osc_get_rate+0x6c>)
  4014d4:	e008      	b.n	4014e8 <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  4014d6:	4b08      	ldr	r3, [pc, #32]	; (4014f8 <osc_get_rate+0x70>)
  4014d8:	e006      	b.n	4014e8 <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  4014da:	4b08      	ldr	r3, [pc, #32]	; (4014fc <osc_get_rate+0x74>)
  4014dc:	e004      	b.n	4014e8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  4014de:	4b07      	ldr	r3, [pc, #28]	; (4014fc <osc_get_rate+0x74>)
  4014e0:	e002      	b.n	4014e8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  4014e2:	4b06      	ldr	r3, [pc, #24]	; (4014fc <osc_get_rate+0x74>)
  4014e4:	e000      	b.n	4014e8 <osc_get_rate+0x60>
	return 0;
  4014e6:	2300      	movs	r3, #0
}
  4014e8:	4618      	mov	r0, r3
  4014ea:	370c      	adds	r7, #12
  4014ec:	46bd      	mov	sp, r7
  4014ee:	bc80      	pop	{r7}
  4014f0:	4770      	bx	lr
  4014f2:	bf00      	nop
  4014f4:	003d0900 	.word	0x003d0900
  4014f8:	007a1200 	.word	0x007a1200
  4014fc:	00b71b00 	.word	0x00b71b00

00401500 <sysclk_get_main_hz>:
{
  401500:	b580      	push	{r7, lr}
  401502:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401504:	2006      	movs	r0, #6
  401506:	4b05      	ldr	r3, [pc, #20]	; (40151c <sysclk_get_main_hz+0x1c>)
  401508:	447b      	add	r3, pc
  40150a:	4798      	blx	r3
  40150c:	4602      	mov	r2, r0
  40150e:	4613      	mov	r3, r2
  401510:	009b      	lsls	r3, r3, #2
  401512:	4413      	add	r3, r2
  401514:	009b      	lsls	r3, r3, #2
}
  401516:	4618      	mov	r0, r3
  401518:	bd80      	pop	{r7, pc}
  40151a:	bf00      	nop
  40151c:	ffffff7d 	.word	0xffffff7d

00401520 <sysclk_get_cpu_hz>:
{
  401520:	b580      	push	{r7, lr}
  401522:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401524:	4b03      	ldr	r3, [pc, #12]	; (401534 <sysclk_get_cpu_hz+0x14>)
  401526:	447b      	add	r3, pc
  401528:	4798      	blx	r3
  40152a:	4603      	mov	r3, r0
  40152c:	085b      	lsrs	r3, r3, #1
}
  40152e:	4618      	mov	r0, r3
  401530:	bd80      	pop	{r7, pc}
  401532:	bf00      	nop
  401534:	ffffffd7 	.word	0xffffffd7

00401538 <TC0_Handler>:

#include "timer_interface.h"


void TC0_Handler(void)
{
  401538:	b590      	push	{r4, r7, lr}
  40153a:	b083      	sub	sp, #12
  40153c:	af00      	add	r7, sp, #0
  40153e:	4c0e      	ldr	r4, [pc, #56]	; (401578 <TC0_Handler+0x40>)
  401540:	447c      	add	r4, pc
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  401542:	2100      	movs	r1, #0
  401544:	480b      	ldr	r0, [pc, #44]	; (401574 <TC0_Handler+0x3c>)
  401546:	4b0d      	ldr	r3, [pc, #52]	; (40157c <TC0_Handler+0x44>)
  401548:	58e3      	ldr	r3, [r4, r3]
  40154a:	4798      	blx	r3
  40154c:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  40154e:	687b      	ldr	r3, [r7, #4]
  401550:	f003 0310 	and.w	r3, r3, #16
  401554:	2b00      	cmp	r3, #0
  401556:	d008      	beq.n	40156a <TC0_Handler+0x32>
		counts++;
  401558:	4b09      	ldr	r3, [pc, #36]	; (401580 <TC0_Handler+0x48>)
  40155a:	58e3      	ldr	r3, [r4, r3]
  40155c:	781b      	ldrb	r3, [r3, #0]
  40155e:	b2db      	uxtb	r3, r3
  401560:	3301      	adds	r3, #1
  401562:	b2da      	uxtb	r2, r3
  401564:	4b06      	ldr	r3, [pc, #24]	; (401580 <TC0_Handler+0x48>)
  401566:	58e3      	ldr	r3, [r4, r3]
  401568:	701a      	strb	r2, [r3, #0]
	}
}
  40156a:	bf00      	nop
  40156c:	370c      	adds	r7, #12
  40156e:	46bd      	mov	sp, r7
  401570:	bd90      	pop	{r4, r7, pc}
  401572:	bf00      	nop
  401574:	40010000 	.word	0x40010000
  401578:	00001f30 	.word	0x00001f30
  40157c:	00000130 	.word	0x00000130
  401580:	00000154 	.word	0x00000154

00401584 <configure_tc>:

void configure_tc(void)
{
  401584:	b5b0      	push	{r4, r5, r7, lr}
  401586:	b086      	sub	sp, #24
  401588:	af02      	add	r7, sp, #8
  40158a:	4c1e      	ldr	r4, [pc, #120]	; (401604 <configure_tc+0x80>)
  40158c:	447c      	add	r4, pc
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  40158e:	4b1e      	ldr	r3, [pc, #120]	; (401608 <configure_tc+0x84>)
  401590:	447b      	add	r3, pc
  401592:	4798      	blx	r3
  401594:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  401596:	2017      	movs	r0, #23
  401598:	4b1c      	ldr	r3, [pc, #112]	; (40160c <configure_tc+0x88>)
  40159a:	58e3      	ldr	r3, [r4, r3]
  40159c:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40159e:	1d39      	adds	r1, r7, #4
  4015a0:	f107 0208 	add.w	r2, r7, #8
  4015a4:	68fb      	ldr	r3, [r7, #12]
  4015a6:	9300      	str	r3, [sp, #0]
  4015a8:	460b      	mov	r3, r1
  4015aa:	68f9      	ldr	r1, [r7, #12]
  4015ac:	2001      	movs	r0, #1
  4015ae:	4d18      	ldr	r5, [pc, #96]	; (401610 <configure_tc+0x8c>)
  4015b0:	5965      	ldr	r5, [r4, r5]
  4015b2:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4015b4:	687b      	ldr	r3, [r7, #4]
  4015b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4015ba:	461a      	mov	r2, r3
  4015bc:	2100      	movs	r1, #0
  4015be:	4810      	ldr	r0, [pc, #64]	; (401600 <configure_tc+0x7c>)
  4015c0:	4b14      	ldr	r3, [pc, #80]	; (401614 <configure_tc+0x90>)
  4015c2:	58e3      	ldr	r3, [r4, r3]
  4015c4:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  4015c6:	68bb      	ldr	r3, [r7, #8]
  4015c8:	68fa      	ldr	r2, [r7, #12]
  4015ca:	fbb2 f3f3 	udiv	r3, r2, r3
  4015ce:	461a      	mov	r2, r3
  4015d0:	2100      	movs	r1, #0
  4015d2:	480b      	ldr	r0, [pc, #44]	; (401600 <configure_tc+0x7c>)
  4015d4:	4b10      	ldr	r3, [pc, #64]	; (401618 <configure_tc+0x94>)
  4015d6:	58e3      	ldr	r3, [r4, r3]
  4015d8:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  4015da:	2017      	movs	r0, #23
  4015dc:	4b0f      	ldr	r3, [pc, #60]	; (40161c <configure_tc+0x98>)
  4015de:	447b      	add	r3, pc
  4015e0:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4015e2:	2210      	movs	r2, #16
  4015e4:	2100      	movs	r1, #0
  4015e6:	4806      	ldr	r0, [pc, #24]	; (401600 <configure_tc+0x7c>)
  4015e8:	4b0d      	ldr	r3, [pc, #52]	; (401620 <configure_tc+0x9c>)
  4015ea:	58e3      	ldr	r3, [r4, r3]
  4015ec:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  4015ee:	2100      	movs	r1, #0
  4015f0:	4803      	ldr	r0, [pc, #12]	; (401600 <configure_tc+0x7c>)
  4015f2:	4b0c      	ldr	r3, [pc, #48]	; (401624 <configure_tc+0xa0>)
  4015f4:	58e3      	ldr	r3, [r4, r3]
  4015f6:	4798      	blx	r3
  4015f8:	bf00      	nop
  4015fa:	3710      	adds	r7, #16
  4015fc:	46bd      	mov	sp, r7
  4015fe:	bdb0      	pop	{r4, r5, r7, pc}
  401600:	40010000 	.word	0x40010000
  401604:	00001ee4 	.word	0x00001ee4
  401608:	ffffff8d 	.word	0xffffff8d
  40160c:	000000e4 	.word	0x000000e4
  401610:	00000084 	.word	0x00000084
  401614:	0000015c 	.word	0x0000015c
  401618:	00000100 	.word	0x00000100
  40161c:	fffffe77 	.word	0xfffffe77
  401620:	000000bc 	.word	0x000000bc
  401624:	0000006c 	.word	0x0000006c

00401628 <NVIC_EnableIRQ>:
{
  401628:	b480      	push	{r7}
  40162a:	b083      	sub	sp, #12
  40162c:	af00      	add	r7, sp, #0
  40162e:	4603      	mov	r3, r0
  401630:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401632:	4908      	ldr	r1, [pc, #32]	; (401654 <NVIC_EnableIRQ+0x2c>)
  401634:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401638:	095b      	lsrs	r3, r3, #5
  40163a:	79fa      	ldrb	r2, [r7, #7]
  40163c:	f002 021f 	and.w	r2, r2, #31
  401640:	2001      	movs	r0, #1
  401642:	fa00 f202 	lsl.w	r2, r0, r2
  401646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40164a:	bf00      	nop
  40164c:	370c      	adds	r7, #12
  40164e:	46bd      	mov	sp, r7
  401650:	bc80      	pop	{r7}
  401652:	4770      	bx	lr
  401654:	e000e100 	.word	0xe000e100

00401658 <osc_get_rate>:
{
  401658:	b480      	push	{r7}
  40165a:	b083      	sub	sp, #12
  40165c:	af00      	add	r7, sp, #0
  40165e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401660:	687b      	ldr	r3, [r7, #4]
  401662:	2b07      	cmp	r3, #7
  401664:	d827      	bhi.n	4016b6 <osc_get_rate+0x5e>
  401666:	a202      	add	r2, pc, #8	; (adr r2, 401670 <osc_get_rate+0x18>)
  401668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40166c:	441a      	add	r2, r3
  40166e:	4710      	bx	r2
  401670:	00000021 	.word	0x00000021
  401674:	00000027 	.word	0x00000027
  401678:	0000002d 	.word	0x0000002d
  40167c:	00000033 	.word	0x00000033
  401680:	00000037 	.word	0x00000037
  401684:	0000003b 	.word	0x0000003b
  401688:	0000003f 	.word	0x0000003f
  40168c:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  401690:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401694:	e010      	b.n	4016b8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  401696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40169a:	e00d      	b.n	4016b8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  40169c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4016a0:	e00a      	b.n	4016b8 <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  4016a2:	4b08      	ldr	r3, [pc, #32]	; (4016c4 <osc_get_rate+0x6c>)
  4016a4:	e008      	b.n	4016b8 <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  4016a6:	4b08      	ldr	r3, [pc, #32]	; (4016c8 <osc_get_rate+0x70>)
  4016a8:	e006      	b.n	4016b8 <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  4016aa:	4b08      	ldr	r3, [pc, #32]	; (4016cc <osc_get_rate+0x74>)
  4016ac:	e004      	b.n	4016b8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  4016ae:	4b07      	ldr	r3, [pc, #28]	; (4016cc <osc_get_rate+0x74>)
  4016b0:	e002      	b.n	4016b8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  4016b2:	4b06      	ldr	r3, [pc, #24]	; (4016cc <osc_get_rate+0x74>)
  4016b4:	e000      	b.n	4016b8 <osc_get_rate+0x60>
	return 0;
  4016b6:	2300      	movs	r3, #0
}
  4016b8:	4618      	mov	r0, r3
  4016ba:	370c      	adds	r7, #12
  4016bc:	46bd      	mov	sp, r7
  4016be:	bc80      	pop	{r7}
  4016c0:	4770      	bx	lr
  4016c2:	bf00      	nop
  4016c4:	003d0900 	.word	0x003d0900
  4016c8:	007a1200 	.word	0x007a1200
  4016cc:	00b71b00 	.word	0x00b71b00

004016d0 <sysclk_get_main_hz>:
{
  4016d0:	b580      	push	{r7, lr}
  4016d2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4016d4:	2006      	movs	r0, #6
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <sysclk_get_main_hz+0x1c>)
  4016d8:	447b      	add	r3, pc
  4016da:	4798      	blx	r3
  4016dc:	4602      	mov	r2, r0
  4016de:	4613      	mov	r3, r2
  4016e0:	009b      	lsls	r3, r3, #2
  4016e2:	4413      	add	r3, r2
  4016e4:	009b      	lsls	r3, r3, #2
}
  4016e6:	4618      	mov	r0, r3
  4016e8:	bd80      	pop	{r7, pc}
  4016ea:	bf00      	nop
  4016ec:	ffffff7d 	.word	0xffffff7d

004016f0 <sysclk_get_cpu_hz>:
{
  4016f0:	b580      	push	{r7, lr}
  4016f2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4016f4:	4b03      	ldr	r3, [pc, #12]	; (401704 <sysclk_get_cpu_hz+0x14>)
  4016f6:	447b      	add	r3, pc
  4016f8:	4798      	blx	r3
  4016fa:	4603      	mov	r3, r0
  4016fc:	085b      	lsrs	r3, r3, #1
}
  4016fe:	4618      	mov	r0, r3
  401700:	bd80      	pop	{r7, pc}
  401702:	bf00      	nop
  401704:	ffffffd7 	.word	0xffffffd7

00401708 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401708:	b580      	push	{r7, lr}
  40170a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40170c:	4b03      	ldr	r3, [pc, #12]	; (40171c <sysclk_get_peripheral_hz+0x14>)
  40170e:	447b      	add	r3, pc
  401710:	4798      	blx	r3
  401712:	4603      	mov	r3, r0
  401714:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401716:	4618      	mov	r0, r3
  401718:	bd80      	pop	{r7, pc}
  40171a:	bf00      	nop
  40171c:	ffffffbf 	.word	0xffffffbf

00401720 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  401720:	b580      	push	{r7, lr}
  401722:	b082      	sub	sp, #8
  401724:	af00      	add	r7, sp, #0
  401726:	6078      	str	r0, [r7, #4]
  401728:	4a04      	ldr	r2, [pc, #16]	; (40173c <sysclk_enable_peripheral_clock+0x1c>)
  40172a:	447a      	add	r2, pc
	pmc_enable_periph_clk(ul_id);
  40172c:	6878      	ldr	r0, [r7, #4]
  40172e:	4b04      	ldr	r3, [pc, #16]	; (401740 <sysclk_enable_peripheral_clock+0x20>)
  401730:	58d3      	ldr	r3, [r2, r3]
  401732:	4798      	blx	r3
}
  401734:	bf00      	nop
  401736:	3708      	adds	r7, #8
  401738:	46bd      	mov	sp, r7
  40173a:	bd80      	pop	{r7, pc}
  40173c:	00001d46 	.word	0x00001d46
  401740:	000000e4 	.word	0x000000e4

00401744 <USART0_Handler>:
volatile bool fall_flag = false;
volatile bool okay_flag = true;


void WIFI_USART_HANDLER(void)
{
  401744:	b590      	push	{r4, r7, lr}
  401746:	b083      	sub	sp, #12
  401748:	af00      	add	r7, sp, #0
  40174a:	4c12      	ldr	r4, [pc, #72]	; (401794 <USART0_Handler+0x50>)
  40174c:	447c      	add	r4, pc
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  40174e:	4810      	ldr	r0, [pc, #64]	; (401790 <USART0_Handler+0x4c>)
  401750:	4b11      	ldr	r3, [pc, #68]	; (401798 <USART0_Handler+0x54>)
  401752:	58e3      	ldr	r3, [r4, r3]
  401754:	4798      	blx	r3
  401756:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  401758:	687b      	ldr	r3, [r7, #4]
  40175a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40175e:	2b00      	cmp	r3, #0
  401760:	d012      	beq.n	401788 <USART0_Handler+0x44>
		usart_read(BOARD_USART, &received_byte_wifi);
  401762:	4b0e      	ldr	r3, [pc, #56]	; (40179c <USART0_Handler+0x58>)
  401764:	58e3      	ldr	r3, [r4, r3]
  401766:	4619      	mov	r1, r3
  401768:	4809      	ldr	r0, [pc, #36]	; (401790 <USART0_Handler+0x4c>)
  40176a:	4b0d      	ldr	r3, [pc, #52]	; (4017a0 <USART0_Handler+0x5c>)
  40176c:	58e3      	ldr	r3, [r4, r3]
  40176e:	4798      	blx	r3
		new_rx_wifi = true;
  401770:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <USART0_Handler+0x60>)
  401772:	58e3      	ldr	r3, [r4, r3]
  401774:	2201      	movs	r2, #1
  401776:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  401778:	4b08      	ldr	r3, [pc, #32]	; (40179c <USART0_Handler+0x58>)
  40177a:	58e3      	ldr	r3, [r4, r3]
  40177c:	681b      	ldr	r3, [r3, #0]
  40177e:	b2db      	uxtb	r3, r3
  401780:	4618      	mov	r0, r3
  401782:	4b09      	ldr	r3, [pc, #36]	; (4017a8 <USART0_Handler+0x64>)
  401784:	58e3      	ldr	r3, [r4, r3]
  401786:	4798      	blx	r3
	}
}
  401788:	bf00      	nop
  40178a:	370c      	adds	r7, #12
  40178c:	46bd      	mov	sp, r7
  40178e:	bd90      	pop	{r4, r7, pc}
  401790:	40024000 	.word	0x40024000
  401794:	00001d24 	.word	0x00001d24
  401798:	00000000 	.word	0x00000000
  40179c:	00000028 	.word	0x00000028
  4017a0:	000000f8 	.word	0x000000f8
  4017a4:	0000004c 	.word	0x0000004c
  4017a8:	00000118 	.word	0x00000118

004017ac <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  4017ac:	b590      	push	{r4, r7, lr}
  4017ae:	b085      	sub	sp, #20
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	6078      	str	r0, [r7, #4]
  4017b4:	6039      	str	r1, [r7, #0]
  4017b6:	4c11      	ldr	r4, [pc, #68]	; (4017fc <wifi_command_response_handler+0x50>)
  4017b8:	447c      	add	r4, pc
	unused(ul_id);
	unused(ul_mask);
	
	command_received_flag = true;
  4017ba:	4b11      	ldr	r3, [pc, #68]	; (401800 <wifi_command_response_handler+0x54>)
  4017bc:	58e3      	ldr	r3, [r4, r3]
  4017be:	2201      	movs	r2, #1
  4017c0:	701a      	strb	r2, [r3, #0]

	process_data_wifi();
  4017c2:	4b10      	ldr	r3, [pc, #64]	; (401804 <wifi_command_response_handler+0x58>)
  4017c4:	58e3      	ldr	r3, [r4, r3]
  4017c6:	4798      	blx	r3
	for (int jj=0;jj<MAX_INPUT_WIFI;jj++) input_line_wifi[jj] = 0;
  4017c8:	2300      	movs	r3, #0
  4017ca:	60fb      	str	r3, [r7, #12]
  4017cc:	e009      	b.n	4017e2 <wifi_command_response_handler+0x36>
  4017ce:	4b0e      	ldr	r3, [pc, #56]	; (401808 <wifi_command_response_handler+0x5c>)
  4017d0:	58e3      	ldr	r3, [r4, r3]
  4017d2:	461a      	mov	r2, r3
  4017d4:	68fb      	ldr	r3, [r7, #12]
  4017d6:	4413      	add	r3, r2
  4017d8:	2200      	movs	r2, #0
  4017da:	701a      	strb	r2, [r3, #0]
  4017dc:	68fb      	ldr	r3, [r7, #12]
  4017de:	3301      	adds	r3, #1
  4017e0:	60fb      	str	r3, [r7, #12]
  4017e2:	68fb      	ldr	r3, [r7, #12]
  4017e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4017e8:	dbf1      	blt.n	4017ce <wifi_command_response_handler+0x22>
	input_pos_wifi = 0;
  4017ea:	4b08      	ldr	r3, [pc, #32]	; (40180c <wifi_command_response_handler+0x60>)
  4017ec:	58e3      	ldr	r3, [r4, r3]
  4017ee:	461a      	mov	r2, r3
  4017f0:	2300      	movs	r3, #0
  4017f2:	6013      	str	r3, [r2, #0]
}
  4017f4:	bf00      	nop
  4017f6:	3714      	adds	r7, #20
  4017f8:	46bd      	mov	sp, r7
  4017fa:	bd90      	pop	{r4, r7, pc}
  4017fc:	00001cb8 	.word	0x00001cb8
  401800:	00000034 	.word	0x00000034
  401804:	00000070 	.word	0x00000070
  401808:	0000001c 	.word	0x0000001c
  40180c:	000000ec 	.word	0x000000ec

00401810 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401810:	b480      	push	{r7}
  401812:	b083      	sub	sp, #12
  401814:	af00      	add	r7, sp, #0
  401816:	6078      	str	r0, [r7, #4]
  401818:	6039      	str	r1, [r7, #0]
  40181a:	4a05      	ldr	r2, [pc, #20]	; (401830 <wifi_web_setup_handler+0x20>)
  40181c:	447a      	add	r2, pc
	unused(ul_id);
	unused(ul_mask);

	web_setup_flag = true;
  40181e:	4b05      	ldr	r3, [pc, #20]	; (401834 <wifi_web_setup_handler+0x24>)
  401820:	58d3      	ldr	r3, [r2, r3]
  401822:	2201      	movs	r2, #1
  401824:	701a      	strb	r2, [r3, #0]
}
  401826:	bf00      	nop
  401828:	370c      	adds	r7, #12
  40182a:	46bd      	mov	sp, r7
  40182c:	bc80      	pop	{r7}
  40182e:	4770      	bx	lr
  401830:	00001c54 	.word	0x00001c54
  401834:	00000010 	.word	0x00000010

00401838 <configure_usart_wifi>:

	led_rst_flag = true;
}

void configure_usart_wifi(void)
{
  401838:	b5f0      	push	{r4, r5, r6, r7, lr}
  40183a:	b087      	sub	sp, #28
  40183c:	af00      	add	r7, sp, #0
  40183e:	4c27      	ldr	r4, [pc, #156]	; (4018dc <configure_usart_wifi+0xa4>)
  401840:	447c      	add	r4, pc
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  401842:	4924      	ldr	r1, [pc, #144]	; (4018d4 <configure_usart_wifi+0x9c>)
  401844:	2005      	movs	r0, #5
  401846:	4b26      	ldr	r3, [pc, #152]	; (4018e0 <configure_usart_wifi+0xa8>)
  401848:	58e3      	ldr	r3, [r4, r3]
  40184a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  40184c:	4921      	ldr	r1, [pc, #132]	; (4018d4 <configure_usart_wifi+0x9c>)
  40184e:	2006      	movs	r0, #6
  401850:	4b23      	ldr	r3, [pc, #140]	; (4018e0 <configure_usart_wifi+0xa8>)
  401852:	58e3      	ldr	r3, [r4, r3]
  401854:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  401856:	491f      	ldr	r1, [pc, #124]	; (4018d4 <configure_usart_wifi+0x9c>)
  401858:	2008      	movs	r0, #8
  40185a:	4b21      	ldr	r3, [pc, #132]	; (4018e0 <configure_usart_wifi+0xa8>)
  40185c:	58e3      	ldr	r3, [r4, r3]
  40185e:	4798      	blx	r3
// 	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  401860:	4b20      	ldr	r3, [pc, #128]	; (4018e4 <configure_usart_wifi+0xac>)
  401862:	447b      	add	r3, pc
  401864:	463d      	mov	r5, r7
  401866:	461e      	mov	r6, r3
  401868:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40186a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40186c:	e896 0003 	ldmia.w	r6, {r0, r1}
  401870:	e885 0003 	stmia.w	r5, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  401874:	4b1c      	ldr	r3, [pc, #112]	; (4018e8 <configure_usart_wifi+0xb0>)
  401876:	447b      	add	r3, pc
  401878:	4798      	blx	r3
  40187a:	4602      	mov	r2, r0
  40187c:	4b1b      	ldr	r3, [pc, #108]	; (4018ec <configure_usart_wifi+0xb4>)
  40187e:	447b      	add	r3, pc
  401880:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_USART_ID);
  401882:	200e      	movs	r0, #14
  401884:	4b1a      	ldr	r3, [pc, #104]	; (4018f0 <configure_usart_wifi+0xb8>)
  401886:	447b      	add	r3, pc
  401888:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  40188a:	4b1a      	ldr	r3, [pc, #104]	; (4018f4 <configure_usart_wifi+0xbc>)
  40188c:	447b      	add	r3, pc
  40188e:	681a      	ldr	r2, [r3, #0]
  401890:	463b      	mov	r3, r7
  401892:	4619      	mov	r1, r3
  401894:	4810      	ldr	r0, [pc, #64]	; (4018d8 <configure_usart_wifi+0xa0>)
  401896:	4b18      	ldr	r3, [pc, #96]	; (4018f8 <configure_usart_wifi+0xc0>)
  401898:	58e3      	ldr	r3, [r4, r3]
  40189a:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  40189c:	f04f 31ff 	mov.w	r1, #4294967295
  4018a0:	480d      	ldr	r0, [pc, #52]	; (4018d8 <configure_usart_wifi+0xa0>)
  4018a2:	4b16      	ldr	r3, [pc, #88]	; (4018fc <configure_usart_wifi+0xc4>)
  4018a4:	58e3      	ldr	r3, [r4, r3]
  4018a6:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  4018a8:	480b      	ldr	r0, [pc, #44]	; (4018d8 <configure_usart_wifi+0xa0>)
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <configure_usart_wifi+0xc8>)
  4018ac:	58e3      	ldr	r3, [r4, r3]
  4018ae:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  4018b0:	4809      	ldr	r0, [pc, #36]	; (4018d8 <configure_usart_wifi+0xa0>)
  4018b2:	4b14      	ldr	r3, [pc, #80]	; (401904 <configure_usart_wifi+0xcc>)
  4018b4:	58e3      	ldr	r3, [r4, r3]
  4018b6:	4798      	blx	r3
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  4018b8:	2101      	movs	r1, #1
  4018ba:	4807      	ldr	r0, [pc, #28]	; (4018d8 <configure_usart_wifi+0xa0>)
  4018bc:	4b12      	ldr	r3, [pc, #72]	; (401908 <configure_usart_wifi+0xd0>)
  4018be:	58e3      	ldr	r3, [r4, r3]
  4018c0:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(BOARD_USART_IRQn);
  4018c2:	200e      	movs	r0, #14
  4018c4:	4b11      	ldr	r3, [pc, #68]	; (40190c <configure_usart_wifi+0xd4>)
  4018c6:	447b      	add	r3, pc
  4018c8:	4798      	blx	r3
}
  4018ca:	bf00      	nop
  4018cc:	371c      	adds	r7, #28
  4018ce:	46bd      	mov	sp, r7
  4018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018d2:	bf00      	nop
  4018d4:	08000001 	.word	0x08000001
  4018d8:	40024000 	.word	0x40024000
  4018dc:	00001c30 	.word	0x00001c30
  4018e0:	00000044 	.word	0x00000044
  4018e4:	00001a86 	.word	0x00001a86
  4018e8:	fffffe8f 	.word	0xfffffe8f
  4018ec:	1fbfec66 	.word	0x1fbfec66
  4018f0:	fffffe97 	.word	0xfffffe97
  4018f4:	1fbfec58 	.word	0x1fbfec58
  4018f8:	00000038 	.word	0x00000038
  4018fc:	00000014 	.word	0x00000014
  401900:	000000cc 	.word	0x000000cc
  401904:	000000b4 	.word	0x000000b4
  401908:	00000048 	.word	0x00000048
  40190c:	fffffd5f 	.word	0xfffffd5f

00401910 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  401910:	b5b0      	push	{r4, r5, r7, lr}
  401912:	b082      	sub	sp, #8
  401914:	af02      	add	r7, sp, #8
  401916:	4c10      	ldr	r4, [pc, #64]	; (401958 <configure_wifi_comm_pin+0x48>)
  401918:	447c      	add	r4, pc
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  40191a:	200c      	movs	r0, #12
  40191c:	4b0f      	ldr	r3, [pc, #60]	; (40195c <configure_wifi_comm_pin+0x4c>)
  40191e:	58e3      	ldr	r3, [r4, r3]
  401920:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  401922:	4b0f      	ldr	r3, [pc, #60]	; (401960 <configure_wifi_comm_pin+0x50>)
  401924:	58e3      	ldr	r3, [r4, r3]
  401926:	9300      	str	r3, [sp, #0]
  401928:	2379      	movs	r3, #121	; 0x79
  40192a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40192e:	210c      	movs	r1, #12
  401930:	4808      	ldr	r0, [pc, #32]	; (401954 <configure_wifi_comm_pin+0x44>)
  401932:	4d0c      	ldr	r5, [pc, #48]	; (401964 <configure_wifi_comm_pin+0x54>)
  401934:	5965      	ldr	r5, [r4, r5]
  401936:	47a8      	blx	r5
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  401938:	200c      	movs	r0, #12
  40193a:	4b0b      	ldr	r3, [pc, #44]	; (401968 <configure_wifi_comm_pin+0x58>)
  40193c:	447b      	add	r3, pc
  40193e:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  401940:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401944:	4803      	ldr	r0, [pc, #12]	; (401954 <configure_wifi_comm_pin+0x44>)
  401946:	4b09      	ldr	r3, [pc, #36]	; (40196c <configure_wifi_comm_pin+0x5c>)
  401948:	58e3      	ldr	r3, [r4, r3]
  40194a:	4798      	blx	r3
}
  40194c:	bf00      	nop
  40194e:	46bd      	mov	sp, r7
  401950:	bdb0      	pop	{r4, r5, r7, pc}
  401952:	bf00      	nop
  401954:	400e1000 	.word	0x400e1000
  401958:	00001b58 	.word	0x00001b58
  40195c:	000000e4 	.word	0x000000e4
  401960:	000000d8 	.word	0x000000d8
  401964:	0000002c 	.word	0x0000002c
  401968:	fffffce9 	.word	0xfffffce9
  40196c:	00000158 	.word	0x00000158

00401970 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  401970:	b5b0      	push	{r4, r5, r7, lr}
  401972:	b082      	sub	sp, #8
  401974:	af02      	add	r7, sp, #8
  401976:	4c13      	ldr	r4, [pc, #76]	; (4019c4 <configure_wifi_web_setup_pin+0x54>)
  401978:	447c      	add	r4, pc
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WEB_SETUP_ID);
  40197a:	200b      	movs	r0, #11
  40197c:	4b12      	ldr	r3, [pc, #72]	; (4019c8 <configure_wifi_web_setup_pin+0x58>)
  40197e:	58e3      	ldr	r3, [r4, r3]
  401980:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WEB_SETUP_PIO, WEB_SETUP_PIN_MSK, 10);
  401982:	220a      	movs	r2, #10
  401984:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401988:	480d      	ldr	r0, [pc, #52]	; (4019c0 <configure_wifi_web_setup_pin+0x50>)
  40198a:	4b10      	ldr	r3, [pc, #64]	; (4019cc <configure_wifi_web_setup_pin+0x5c>)
  40198c:	58e3      	ldr	r3, [r4, r3]
  40198e:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WEB_SETUP_PIO, WEB_SETUP_ID, WEB_SETUP_PIN_MSK,
  401990:	4b0f      	ldr	r3, [pc, #60]	; (4019d0 <configure_wifi_web_setup_pin+0x60>)
  401992:	58e3      	ldr	r3, [r4, r3]
  401994:	9300      	str	r3, [sp, #0]
  401996:	2379      	movs	r3, #121	; 0x79
  401998:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40199c:	210b      	movs	r1, #11
  40199e:	4808      	ldr	r0, [pc, #32]	; (4019c0 <configure_wifi_web_setup_pin+0x50>)
  4019a0:	4d0c      	ldr	r5, [pc, #48]	; (4019d4 <configure_wifi_web_setup_pin+0x64>)
  4019a2:	5965      	ldr	r5, [r4, r5]
  4019a4:	47a8      	blx	r5
			WEB_SETUP_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WEB_SETUP_ID);
  4019a6:	200b      	movs	r0, #11
  4019a8:	4b0b      	ldr	r3, [pc, #44]	; (4019d8 <configure_wifi_web_setup_pin+0x68>)
  4019aa:	447b      	add	r3, pc
  4019ac:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WEB_SETUP_PIO, WEB_SETUP_PIN_MSK);
  4019ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4019b2:	4803      	ldr	r0, [pc, #12]	; (4019c0 <configure_wifi_web_setup_pin+0x50>)
  4019b4:	4b09      	ldr	r3, [pc, #36]	; (4019dc <configure_wifi_web_setup_pin+0x6c>)
  4019b6:	58e3      	ldr	r3, [r4, r3]
  4019b8:	4798      	blx	r3
}
  4019ba:	bf00      	nop
  4019bc:	46bd      	mov	sp, r7
  4019be:	bdb0      	pop	{r4, r5, r7, pc}
  4019c0:	400e0e00 	.word	0x400e0e00
  4019c4:	00001af8 	.word	0x00001af8
  4019c8:	000000e4 	.word	0x000000e4
  4019cc:	000000a4 	.word	0x000000a4
  4019d0:	000000b0 	.word	0x000000b0
  4019d4:	0000002c 	.word	0x0000002c
  4019d8:	fffffc7b 	.word	0xfffffc7b
  4019dc:	00000158 	.word	0x00000158

004019e0 <process_incoming_byte_wifi>:
	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(LED_RST_PIO, LED_RST_PIN_MSK);
}

void process_incoming_byte_wifi(uint8_t in_byte)
{ 
  4019e0:	b480      	push	{r7}
  4019e2:	b083      	sub	sp, #12
  4019e4:	af00      	add	r7, sp, #0
  4019e6:	4603      	mov	r3, r0
  4019e8:	71fb      	strb	r3, [r7, #7]
  4019ea:	4b09      	ldr	r3, [pc, #36]	; (401a10 <process_incoming_byte_wifi+0x30>)
  4019ec:	447b      	add	r3, pc
	input_line_wifi[input_pos_wifi++] = in_byte;
  4019ee:	4a09      	ldr	r2, [pc, #36]	; (401a14 <process_incoming_byte_wifi+0x34>)
  4019f0:	589a      	ldr	r2, [r3, r2]
  4019f2:	6812      	ldr	r2, [r2, #0]
  4019f4:	1c51      	adds	r1, r2, #1
  4019f6:	4807      	ldr	r0, [pc, #28]	; (401a14 <process_incoming_byte_wifi+0x34>)
  4019f8:	5818      	ldr	r0, [r3, r0]
  4019fa:	6001      	str	r1, [r0, #0]
  4019fc:	4906      	ldr	r1, [pc, #24]	; (401a18 <process_incoming_byte_wifi+0x38>)
  4019fe:	585b      	ldr	r3, [r3, r1]
  401a00:	4619      	mov	r1, r3
  401a02:	79fb      	ldrb	r3, [r7, #7]
  401a04:	548b      	strb	r3, [r1, r2]
}
  401a06:	bf00      	nop
  401a08:	370c      	adds	r7, #12
  401a0a:	46bd      	mov	sp, r7
  401a0c:	bc80      	pop	{r7}
  401a0e:	4770      	bx	lr
  401a10:	00001a84 	.word	0x00001a84
  401a14:	000000ec 	.word	0x000000ec
  401a18:	0000001c 	.word	0x0000001c

00401a1c <process_data_wifi>:

void process_data_wifi (void)
{
  401a1c:	b598      	push	{r3, r4, r7, lr}
  401a1e:	af00      	add	r7, sp, #0
  401a20:	4c2f      	ldr	r4, [pc, #188]	; (401ae0 <process_data_wifi+0xc4>)
  401a22:	447c      	add	r4, pc
	
	if (strstr(input_line_wifi, "Start transfer"))
  401a24:	4b2f      	ldr	r3, [pc, #188]	; (401ae4 <process_data_wifi+0xc8>)
  401a26:	447b      	add	r3, pc
  401a28:	4619      	mov	r1, r3
  401a2a:	4b2f      	ldr	r3, [pc, #188]	; (401ae8 <process_data_wifi+0xcc>)
  401a2c:	58e3      	ldr	r3, [r4, r3]
  401a2e:	4618      	mov	r0, r3
  401a30:	4b2e      	ldr	r3, [pc, #184]	; (401aec <process_data_wifi+0xd0>)
  401a32:	58e3      	ldr	r3, [r4, r3]
  401a34:	4798      	blx	r3
  401a36:	4603      	mov	r3, r0
  401a38:	2b00      	cmp	r3, #0
  401a3a:	d004      	beq.n	401a46 <process_data_wifi+0x2a>
	{
		start_transfer_flag = true;
  401a3c:	4b2c      	ldr	r3, [pc, #176]	; (401af0 <process_data_wifi+0xd4>)
  401a3e:	58e3      	ldr	r3, [r4, r3]
  401a40:	2201      	movs	r2, #1
  401a42:	701a      	strb	r2, [r3, #0]
	 else if (strstr(input_line_wifi, "OKAY"))
	 {
		 okay_flag = true;
		 fall_flag = false;
	 }
}
  401a44:	e04a      	b.n	401adc <process_data_wifi+0xc0>
	 else if (strstr(input_line_wifi, "None"))
  401a46:	4b2b      	ldr	r3, [pc, #172]	; (401af4 <process_data_wifi+0xd8>)
  401a48:	447b      	add	r3, pc
  401a4a:	4619      	mov	r1, r3
  401a4c:	4b26      	ldr	r3, [pc, #152]	; (401ae8 <process_data_wifi+0xcc>)
  401a4e:	58e3      	ldr	r3, [r4, r3]
  401a50:	4618      	mov	r0, r3
  401a52:	4b26      	ldr	r3, [pc, #152]	; (401aec <process_data_wifi+0xd0>)
  401a54:	58e3      	ldr	r3, [r4, r3]
  401a56:	4798      	blx	r3
  401a58:	4603      	mov	r3, r0
  401a5a:	2b00      	cmp	r3, #0
  401a5c:	d004      	beq.n	401a68 <process_data_wifi+0x4c>
		 none_flag = true;
  401a5e:	4b26      	ldr	r3, [pc, #152]	; (401af8 <process_data_wifi+0xdc>)
  401a60:	58e3      	ldr	r3, [r4, r3]
  401a62:	2201      	movs	r2, #1
  401a64:	701a      	strb	r2, [r3, #0]
}
  401a66:	e039      	b.n	401adc <process_data_wifi+0xc0>
	 else if (strstr(input_line_wifi, "[Closed: 0]"))
  401a68:	4b24      	ldr	r3, [pc, #144]	; (401afc <process_data_wifi+0xe0>)
  401a6a:	447b      	add	r3, pc
  401a6c:	4619      	mov	r1, r3
  401a6e:	4b1e      	ldr	r3, [pc, #120]	; (401ae8 <process_data_wifi+0xcc>)
  401a70:	58e3      	ldr	r3, [r4, r3]
  401a72:	4618      	mov	r0, r3
  401a74:	4b1d      	ldr	r3, [pc, #116]	; (401aec <process_data_wifi+0xd0>)
  401a76:	58e3      	ldr	r3, [r4, r3]
  401a78:	4798      	blx	r3
  401a7a:	4603      	mov	r3, r0
  401a7c:	2b00      	cmp	r3, #0
  401a7e:	d004      	beq.n	401a8a <process_data_wifi+0x6e>
		 closed_flag = true;
  401a80:	4b1f      	ldr	r3, [pc, #124]	; (401b00 <process_data_wifi+0xe4>)
  401a82:	58e3      	ldr	r3, [r4, r3]
  401a84:	2201      	movs	r2, #1
  401a86:	701a      	strb	r2, [r3, #0]
}
  401a88:	e028      	b.n	401adc <process_data_wifi+0xc0>
	 else if (strstr(input_line_wifi, "FALL"))
  401a8a:	4b1e      	ldr	r3, [pc, #120]	; (401b04 <process_data_wifi+0xe8>)
  401a8c:	447b      	add	r3, pc
  401a8e:	4619      	mov	r1, r3
  401a90:	4b15      	ldr	r3, [pc, #84]	; (401ae8 <process_data_wifi+0xcc>)
  401a92:	58e3      	ldr	r3, [r4, r3]
  401a94:	4618      	mov	r0, r3
  401a96:	4b15      	ldr	r3, [pc, #84]	; (401aec <process_data_wifi+0xd0>)
  401a98:	58e3      	ldr	r3, [r4, r3]
  401a9a:	4798      	blx	r3
  401a9c:	4603      	mov	r3, r0
  401a9e:	2b00      	cmp	r3, #0
  401aa0:	d008      	beq.n	401ab4 <process_data_wifi+0x98>
		 fall_flag = true;
  401aa2:	4b19      	ldr	r3, [pc, #100]	; (401b08 <process_data_wifi+0xec>)
  401aa4:	58e3      	ldr	r3, [r4, r3]
  401aa6:	2201      	movs	r2, #1
  401aa8:	701a      	strb	r2, [r3, #0]
		 okay_flag = false;
  401aaa:	4b18      	ldr	r3, [pc, #96]	; (401b0c <process_data_wifi+0xf0>)
  401aac:	58e3      	ldr	r3, [r4, r3]
  401aae:	2200      	movs	r2, #0
  401ab0:	701a      	strb	r2, [r3, #0]
}
  401ab2:	e013      	b.n	401adc <process_data_wifi+0xc0>
	 else if (strstr(input_line_wifi, "OKAY"))
  401ab4:	4b16      	ldr	r3, [pc, #88]	; (401b10 <process_data_wifi+0xf4>)
  401ab6:	447b      	add	r3, pc
  401ab8:	4619      	mov	r1, r3
  401aba:	4b0b      	ldr	r3, [pc, #44]	; (401ae8 <process_data_wifi+0xcc>)
  401abc:	58e3      	ldr	r3, [r4, r3]
  401abe:	4618      	mov	r0, r3
  401ac0:	4b0a      	ldr	r3, [pc, #40]	; (401aec <process_data_wifi+0xd0>)
  401ac2:	58e3      	ldr	r3, [r4, r3]
  401ac4:	4798      	blx	r3
  401ac6:	4603      	mov	r3, r0
  401ac8:	2b00      	cmp	r3, #0
  401aca:	d007      	beq.n	401adc <process_data_wifi+0xc0>
		 okay_flag = true;
  401acc:	4b0f      	ldr	r3, [pc, #60]	; (401b0c <process_data_wifi+0xf0>)
  401ace:	58e3      	ldr	r3, [r4, r3]
  401ad0:	2201      	movs	r2, #1
  401ad2:	701a      	strb	r2, [r3, #0]
		 fall_flag = false;
  401ad4:	4b0c      	ldr	r3, [pc, #48]	; (401b08 <process_data_wifi+0xec>)
  401ad6:	58e3      	ldr	r3, [r4, r3]
  401ad8:	2200      	movs	r2, #0
  401ada:	701a      	strb	r2, [r3, #0]
}
  401adc:	bf00      	nop
  401ade:	bd98      	pop	{r3, r4, r7, pc}
  401ae0:	00001a4e 	.word	0x00001a4e
  401ae4:	000018da 	.word	0x000018da
  401ae8:	0000001c 	.word	0x0000001c
  401aec:	000000ac 	.word	0x000000ac
  401af0:	000000d4 	.word	0x000000d4
  401af4:	000018c8 	.word	0x000018c8
  401af8:	00000110 	.word	0x00000110
  401afc:	000018ae 	.word	0x000018ae
  401b00:	00000098 	.word	0x00000098
  401b04:	00001898 	.word	0x00001898
  401b08:	0000011c 	.word	0x0000011c
  401b0c:	00000148 	.word	0x00000148
  401b10:	00001876 	.word	0x00001876

00401b14 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  401b14:	b590      	push	{r4, r7, lr}
  401b16:	b083      	sub	sp, #12
  401b18:	af00      	add	r7, sp, #0
  401b1a:	6078      	str	r0, [r7, #4]
  401b1c:	460b      	mov	r3, r1
  401b1e:	70fb      	strb	r3, [r7, #3]
  401b20:	4c11      	ldr	r4, [pc, #68]	; (401b68 <write_wifi_command+0x54>)
  401b22:	447c      	add	r4, pc
	counts = 0;
  401b24:	4b11      	ldr	r3, [pc, #68]	; (401b6c <write_wifi_command+0x58>)
  401b26:	58e3      	ldr	r3, [r4, r3]
  401b28:	2200      	movs	r2, #0
  401b2a:	701a      	strb	r2, [r3, #0]
	command_received_flag = false;
  401b2c:	4b10      	ldr	r3, [pc, #64]	; (401b70 <write_wifi_command+0x5c>)
  401b2e:	58e3      	ldr	r3, [r4, r3]
  401b30:	2200      	movs	r2, #0
  401b32:	701a      	strb	r2, [r3, #0]

	usart_write_line(BOARD_USART, comm);
  401b34:	6879      	ldr	r1, [r7, #4]
  401b36:	480b      	ldr	r0, [pc, #44]	; (401b64 <write_wifi_command+0x50>)
  401b38:	4b0e      	ldr	r3, [pc, #56]	; (401b74 <write_wifi_command+0x60>)
  401b3a:	58e3      	ldr	r3, [r4, r3]
  401b3c:	4798      	blx	r3
		
	while (counts < cnt)
  401b3e:	e005      	b.n	401b4c <write_wifi_command+0x38>
	{
		if (command_received_flag == true)
  401b40:	4b0b      	ldr	r3, [pc, #44]	; (401b70 <write_wifi_command+0x5c>)
  401b42:	58e3      	ldr	r3, [r4, r3]
  401b44:	781b      	ldrb	r3, [r3, #0]
  401b46:	b2db      	uxtb	r3, r3
  401b48:	2b00      	cmp	r3, #0
  401b4a:	d107      	bne.n	401b5c <write_wifi_command+0x48>
	while (counts < cnt)
  401b4c:	4b07      	ldr	r3, [pc, #28]	; (401b6c <write_wifi_command+0x58>)
  401b4e:	58e3      	ldr	r3, [r4, r3]
  401b50:	781b      	ldrb	r3, [r3, #0]
  401b52:	b2db      	uxtb	r3, r3
  401b54:	78fa      	ldrb	r2, [r7, #3]
  401b56:	429a      	cmp	r2, r3
  401b58:	d8f2      	bhi.n	401b40 <write_wifi_command+0x2c>
  401b5a:	e000      	b.n	401b5e <write_wifi_command+0x4a>
		{
			return;
  401b5c:	bf00      	nop
		}
	}
}
  401b5e:	370c      	adds	r7, #12
  401b60:	46bd      	mov	sp, r7
  401b62:	bd90      	pop	{r4, r7, pc}
  401b64:	40024000 	.word	0x40024000
  401b68:	0000194e 	.word	0x0000194e
  401b6c:	00000154 	.word	0x00000154
  401b70:	00000034 	.word	0x00000034
  401b74:	0000012c 	.word	0x0000012c

00401b78 <query_server>:

void query_server(void)
{
  401b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  401b7c:	b084      	sub	sp, #16
  401b7e:	af00      	add	r7, sp, #0
  401b80:	4d69      	ldr	r5, [pc, #420]	; (401d28 <query_server+0x1b0>)
  401b82:	447d      	add	r5, pc
	usart_write_line(BOARD_USART, "http_get -o 18.191.102.247:8000/fallinfo\r\n");
  401b84:	4b69      	ldr	r3, [pc, #420]	; (401d2c <query_server+0x1b4>)
  401b86:	447b      	add	r3, pc
  401b88:	4619      	mov	r1, r3
  401b8a:	4866      	ldr	r0, [pc, #408]	; (401d24 <query_server+0x1ac>)
  401b8c:	4b68      	ldr	r3, [pc, #416]	; (401d30 <query_server+0x1b8>)
  401b8e:	58eb      	ldr	r3, [r5, r3]
  401b90:	4798      	blx	r3
	delay_ms(10);
  401b92:	4b68      	ldr	r3, [pc, #416]	; (401d34 <query_server+0x1bc>)
  401b94:	447b      	add	r3, pc
  401b96:	4798      	blx	r3
  401b98:	4603      	mov	r3, r0
  401b9a:	4619      	mov	r1, r3
  401b9c:	f04f 0200 	mov.w	r2, #0
  401ba0:	460b      	mov	r3, r1
  401ba2:	4614      	mov	r4, r2
  401ba4:	00a0      	lsls	r0, r4, #2
  401ba6:	4681      	mov	r9, r0
  401ba8:	4648      	mov	r0, r9
  401baa:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  401bae:	4681      	mov	r9, r0
  401bb0:	009b      	lsls	r3, r3, #2
  401bb2:	4698      	mov	r8, r3
  401bb4:	4643      	mov	r3, r8
  401bb6:	464c      	mov	r4, r9
  401bb8:	185b      	adds	r3, r3, r1
  401bba:	eb44 0402 	adc.w	r4, r4, r2
  401bbe:	18db      	adds	r3, r3, r3
  401bc0:	eb44 0404 	adc.w	r4, r4, r4
  401bc4:	4619      	mov	r1, r3
  401bc6:	4622      	mov	r2, r4
  401bc8:	f243 63af 	movw	r3, #13999	; 0x36af
  401bcc:	f04f 0400 	mov.w	r4, #0
  401bd0:	eb11 0803 	adds.w	r8, r1, r3
  401bd4:	eb42 0904 	adc.w	r9, r2, r4
  401bd8:	4640      	mov	r0, r8
  401bda:	4649      	mov	r1, r9
  401bdc:	4b56      	ldr	r3, [pc, #344]	; (401d38 <query_server+0x1c0>)
  401bde:	58eb      	ldr	r3, [r5, r3]
  401be0:	461c      	mov	r4, r3
  401be2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401be6:	f04f 0300 	mov.w	r3, #0
  401bea:	47a0      	blx	r4
  401bec:	4603      	mov	r3, r0
  401bee:	460c      	mov	r4, r1
  401bf0:	4618      	mov	r0, r3
  401bf2:	4b52      	ldr	r3, [pc, #328]	; (401d3c <query_server+0x1c4>)
  401bf4:	58eb      	ldr	r3, [r5, r3]
  401bf6:	4798      	blx	r3
	
	usart_write_line(BOARD_USART, "http_read_status 0\r\n");
  401bf8:	4b51      	ldr	r3, [pc, #324]	; (401d40 <query_server+0x1c8>)
  401bfa:	447b      	add	r3, pc
  401bfc:	4619      	mov	r1, r3
  401bfe:	4849      	ldr	r0, [pc, #292]	; (401d24 <query_server+0x1ac>)
  401c00:	4b4b      	ldr	r3, [pc, #300]	; (401d30 <query_server+0x1b8>)
  401c02:	58eb      	ldr	r3, [r5, r3]
  401c04:	4798      	blx	r3
	delay_ms(10);
  401c06:	4b4f      	ldr	r3, [pc, #316]	; (401d44 <query_server+0x1cc>)
  401c08:	447b      	add	r3, pc
  401c0a:	4798      	blx	r3
  401c0c:	4603      	mov	r3, r0
  401c0e:	4619      	mov	r1, r3
  401c10:	f04f 0200 	mov.w	r2, #0
  401c14:	460b      	mov	r3, r1
  401c16:	4614      	mov	r4, r2
  401c18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  401c1c:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  401c20:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  401c24:	4653      	mov	r3, sl
  401c26:	465c      	mov	r4, fp
  401c28:	185b      	adds	r3, r3, r1
  401c2a:	eb44 0402 	adc.w	r4, r4, r2
  401c2e:	18db      	adds	r3, r3, r3
  401c30:	eb44 0404 	adc.w	r4, r4, r4
  401c34:	4619      	mov	r1, r3
  401c36:	4622      	mov	r2, r4
  401c38:	f243 63af 	movw	r3, #13999	; 0x36af
  401c3c:	f04f 0400 	mov.w	r4, #0
  401c40:	eb11 0803 	adds.w	r8, r1, r3
  401c44:	eb42 0904 	adc.w	r9, r2, r4
  401c48:	4640      	mov	r0, r8
  401c4a:	4649      	mov	r1, r9
  401c4c:	4b3a      	ldr	r3, [pc, #232]	; (401d38 <query_server+0x1c0>)
  401c4e:	58eb      	ldr	r3, [r5, r3]
  401c50:	461c      	mov	r4, r3
  401c52:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401c56:	f04f 0300 	mov.w	r3, #0
  401c5a:	47a0      	blx	r4
  401c5c:	4603      	mov	r3, r0
  401c5e:	460c      	mov	r4, r1
  401c60:	4618      	mov	r0, r3
  401c62:	4b36      	ldr	r3, [pc, #216]	; (401d3c <query_server+0x1c4>)
  401c64:	58eb      	ldr	r3, [r5, r3]
  401c66:	4798      	blx	r3
	
	usart_write_line(BOARD_USART, "read 0 1000\r\n");
  401c68:	4b37      	ldr	r3, [pc, #220]	; (401d48 <query_server+0x1d0>)
  401c6a:	447b      	add	r3, pc
  401c6c:	4619      	mov	r1, r3
  401c6e:	482d      	ldr	r0, [pc, #180]	; (401d24 <query_server+0x1ac>)
  401c70:	4b2f      	ldr	r3, [pc, #188]	; (401d30 <query_server+0x1b8>)
  401c72:	58eb      	ldr	r3, [r5, r3]
  401c74:	4798      	blx	r3
	
	delay_ms(50);
  401c76:	4b35      	ldr	r3, [pc, #212]	; (401d4c <query_server+0x1d4>)
  401c78:	447b      	add	r3, pc
  401c7a:	4798      	blx	r3
  401c7c:	4603      	mov	r3, r0
  401c7e:	4619      	mov	r1, r3
  401c80:	f04f 0200 	mov.w	r2, #0
  401c84:	460b      	mov	r3, r1
  401c86:	4614      	mov	r4, r2
  401c88:	18db      	adds	r3, r3, r3
  401c8a:	eb44 0404 	adc.w	r4, r4, r4
  401c8e:	185b      	adds	r3, r3, r1
  401c90:	eb44 0402 	adc.w	r4, r4, r2
  401c94:	00e0      	lsls	r0, r4, #3
  401c96:	6078      	str	r0, [r7, #4]
  401c98:	6878      	ldr	r0, [r7, #4]
  401c9a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  401c9e:	6078      	str	r0, [r7, #4]
  401ca0:	00db      	lsls	r3, r3, #3
  401ca2:	603b      	str	r3, [r7, #0]
  401ca4:	e9d7 3400 	ldrd	r3, r4, [r7]
  401ca8:	185b      	adds	r3, r3, r1
  401caa:	eb44 0402 	adc.w	r4, r4, r2
  401cae:	18db      	adds	r3, r3, r3
  401cb0:	eb44 0404 	adc.w	r4, r4, r4
  401cb4:	4619      	mov	r1, r3
  401cb6:	4622      	mov	r2, r4
  401cb8:	f243 63af 	movw	r3, #13999	; 0x36af
  401cbc:	f04f 0400 	mov.w	r4, #0
  401cc0:	eb11 0803 	adds.w	r8, r1, r3
  401cc4:	eb42 0904 	adc.w	r9, r2, r4
  401cc8:	4640      	mov	r0, r8
  401cca:	4649      	mov	r1, r9
  401ccc:	4b1a      	ldr	r3, [pc, #104]	; (401d38 <query_server+0x1c0>)
  401cce:	58eb      	ldr	r3, [r5, r3]
  401cd0:	461c      	mov	r4, r3
  401cd2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401cd6:	f04f 0300 	mov.w	r3, #0
  401cda:	47a0      	blx	r4
  401cdc:	4603      	mov	r3, r0
  401cde:	460c      	mov	r4, r1
  401ce0:	4618      	mov	r0, r3
  401ce2:	4b16      	ldr	r3, [pc, #88]	; (401d3c <query_server+0x1c4>)
  401ce4:	58eb      	ldr	r3, [r5, r3]
  401ce6:	4798      	blx	r3
	
	process_data_wifi();
  401ce8:	4b19      	ldr	r3, [pc, #100]	; (401d50 <query_server+0x1d8>)
  401cea:	58eb      	ldr	r3, [r5, r3]
  401cec:	4798      	blx	r3
	for (int jj=0;jj<MAX_INPUT_WIFI;jj++) input_line_wifi[jj] = 0;
  401cee:	2300      	movs	r3, #0
  401cf0:	60fb      	str	r3, [r7, #12]
  401cf2:	e009      	b.n	401d08 <query_server+0x190>
  401cf4:	4b17      	ldr	r3, [pc, #92]	; (401d54 <query_server+0x1dc>)
  401cf6:	58eb      	ldr	r3, [r5, r3]
  401cf8:	461a      	mov	r2, r3
  401cfa:	68fb      	ldr	r3, [r7, #12]
  401cfc:	4413      	add	r3, r2
  401cfe:	2200      	movs	r2, #0
  401d00:	701a      	strb	r2, [r3, #0]
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	3301      	adds	r3, #1
  401d06:	60fb      	str	r3, [r7, #12]
  401d08:	68fb      	ldr	r3, [r7, #12]
  401d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401d0e:	dbf1      	blt.n	401cf4 <query_server+0x17c>
	input_pos_wifi = 0;
  401d10:	4b11      	ldr	r3, [pc, #68]	; (401d58 <query_server+0x1e0>)
  401d12:	58eb      	ldr	r3, [r5, r3]
  401d14:	461a      	mov	r2, r3
  401d16:	2300      	movs	r3, #0
  401d18:	6013      	str	r3, [r2, #0]
}
  401d1a:	bf00      	nop
  401d1c:	3710      	adds	r7, #16
  401d1e:	46bd      	mov	sp, r7
  401d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  401d24:	40024000 	.word	0x40024000
  401d28:	000018ee 	.word	0x000018ee
  401d2c:	000017ae 	.word	0x000017ae
  401d30:	0000012c 	.word	0x0000012c
  401d34:	fffffb59 	.word	0xfffffb59
  401d38:	0000005c 	.word	0x0000005c
  401d3c:	00000108 	.word	0x00000108
  401d40:	00001766 	.word	0x00001766
  401d44:	fffffae5 	.word	0xfffffae5
  401d48:	0000170e 	.word	0x0000170e
  401d4c:	fffffa75 	.word	0xfffffa75
  401d50:	00000070 	.word	0x00000070
  401d54:	0000001c 	.word	0x0000001c
  401d58:	000000ec 	.word	0x000000ec

00401d5c <sysclk_enable_peripheral_clock>:
{
  401d5c:	b580      	push	{r7, lr}
  401d5e:	b082      	sub	sp, #8
  401d60:	af00      	add	r7, sp, #0
  401d62:	6078      	str	r0, [r7, #4]
  401d64:	4a04      	ldr	r2, [pc, #16]	; (401d78 <sysclk_enable_peripheral_clock+0x1c>)
  401d66:	447a      	add	r2, pc
	pmc_enable_periph_clk(ul_id);
  401d68:	6878      	ldr	r0, [r7, #4]
  401d6a:	4b04      	ldr	r3, [pc, #16]	; (401d7c <sysclk_enable_peripheral_clock+0x20>)
  401d6c:	58d3      	ldr	r3, [r2, r3]
  401d6e:	4798      	blx	r3
}
  401d70:	bf00      	nop
  401d72:	3708      	adds	r7, #8
  401d74:	46bd      	mov	sp, r7
  401d76:	bd80      	pop	{r7, pc}
  401d78:	0000170a 	.word	0x0000170a
  401d7c:	000000e4 	.word	0x000000e4

00401d80 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  401d80:	b580      	push	{r7, lr}
  401d82:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  401d84:	200b      	movs	r0, #11
  401d86:	4b04      	ldr	r3, [pc, #16]	; (401d98 <ioport_init+0x18>)
  401d88:	447b      	add	r3, pc
  401d8a:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  401d8c:	200c      	movs	r0, #12
  401d8e:	4b03      	ldr	r3, [pc, #12]	; (401d9c <ioport_init+0x1c>)
  401d90:	447b      	add	r3, pc
  401d92:	4798      	blx	r3
	arch_ioport_init();
}
  401d94:	bf00      	nop
  401d96:	bd80      	pop	{r7, pc}
  401d98:	ffffffd1 	.word	0xffffffd1
  401d9c:	ffffffc9 	.word	0xffffffc9

00401da0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  401da0:	b480      	push	{r7}
  401da2:	b08d      	sub	sp, #52	; 0x34
  401da4:	af00      	add	r7, sp, #0
  401da6:	6078      	str	r0, [r7, #4]
  401da8:	460b      	mov	r3, r1
  401daa:	70fb      	strb	r3, [r7, #3]
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  401db0:	78fb      	ldrb	r3, [r7, #3]
  401db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401db8:	627b      	str	r3, [r7, #36]	; 0x24
  401dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dbc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401dbe:	6a3b      	ldr	r3, [r7, #32]
  401dc0:	095b      	lsrs	r3, r3, #5
  401dc2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401dc4:	69fb      	ldr	r3, [r7, #28]
  401dc6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401dca:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401dce:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401dd0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  401dd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401dd6:	2b01      	cmp	r3, #1
  401dd8:	d109      	bne.n	401dee <ioport_set_pin_dir+0x4e>
  401dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ddc:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401dde:	697b      	ldr	r3, [r7, #20]
  401de0:	f003 031f 	and.w	r3, r3, #31
  401de4:	2201      	movs	r2, #1
  401de6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401de8:	69bb      	ldr	r3, [r7, #24]
  401dea:	611a      	str	r2, [r3, #16]
  401dec:	e00c      	b.n	401e08 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  401dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401df2:	2b00      	cmp	r3, #0
  401df4:	d108      	bne.n	401e08 <ioport_set_pin_dir+0x68>
  401df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401df8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401dfa:	693b      	ldr	r3, [r7, #16]
  401dfc:	f003 031f 	and.w	r3, r3, #31
  401e00:	2201      	movs	r2, #1
  401e02:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401e04:	69bb      	ldr	r3, [r7, #24]
  401e06:	615a      	str	r2, [r3, #20]
  401e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401e0a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401e0c:	68fb      	ldr	r3, [r7, #12]
  401e0e:	f003 031f 	and.w	r3, r3, #31
  401e12:	2201      	movs	r2, #1
  401e14:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401e16:	69bb      	ldr	r3, [r7, #24]
  401e18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  401e1c:	bf00      	nop
  401e1e:	3734      	adds	r7, #52	; 0x34
  401e20:	46bd      	mov	sp, r7
  401e22:	bc80      	pop	{r7}
  401e24:	4770      	bx	lr

00401e26 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  401e26:	b480      	push	{r7}
  401e28:	b08b      	sub	sp, #44	; 0x2c
  401e2a:	af00      	add	r7, sp, #0
  401e2c:	6078      	str	r0, [r7, #4]
  401e2e:	460b      	mov	r3, r1
  401e30:	70fb      	strb	r3, [r7, #3]
  401e32:	687b      	ldr	r3, [r7, #4]
  401e34:	627b      	str	r3, [r7, #36]	; 0x24
  401e36:	78fb      	ldrb	r3, [r7, #3]
  401e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e3e:	61fb      	str	r3, [r7, #28]
  401e40:	69fb      	ldr	r3, [r7, #28]
  401e42:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401e44:	69bb      	ldr	r3, [r7, #24]
  401e46:	095b      	lsrs	r3, r3, #5
  401e48:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401e4a:	697b      	ldr	r3, [r7, #20]
  401e4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401e50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401e54:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  401e56:	613b      	str	r3, [r7, #16]

	if (level) {
  401e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401e5c:	2b00      	cmp	r3, #0
  401e5e:	d009      	beq.n	401e74 <ioport_set_pin_level+0x4e>
  401e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e62:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401e64:	68fb      	ldr	r3, [r7, #12]
  401e66:	f003 031f 	and.w	r3, r3, #31
  401e6a:	2201      	movs	r2, #1
  401e6c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e6e:	693b      	ldr	r3, [r7, #16]
  401e70:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401e72:	e008      	b.n	401e86 <ioport_set_pin_level+0x60>
  401e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e76:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401e78:	68bb      	ldr	r3, [r7, #8]
  401e7a:	f003 031f 	and.w	r3, r3, #31
  401e7e:	2201      	movs	r2, #1
  401e80:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401e82:	693b      	ldr	r3, [r7, #16]
  401e84:	635a      	str	r2, [r3, #52]	; 0x34
  401e86:	bf00      	nop
  401e88:	372c      	adds	r7, #44	; 0x2c
  401e8a:	46bd      	mov	sp, r7
  401e8c:	bc80      	pop	{r7}
  401e8e:	4770      	bx	lr

00401e90 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{	
  401e90:	b580      	push	{r7, lr}
  401e92:	af00      	add	r7, sp, #0
	ioport_init();
  401e94:	4b13      	ldr	r3, [pc, #76]	; (401ee4 <board_init+0x54>)
  401e96:	447b      	add	r3, pc
  401e98:	4798      	blx	r3
	
	
// 	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
// 	ioport_set_pin_level(WIFI_CTS_PIN, false);
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  401e9a:	2101      	movs	r1, #1
  401e9c:	2020      	movs	r0, #32
  401e9e:	4b12      	ldr	r3, [pc, #72]	; (401ee8 <board_init+0x58>)
  401ea0:	447b      	add	r3, pc
  401ea2:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  401ea4:	2101      	movs	r1, #1
  401ea6:	2020      	movs	r0, #32
  401ea8:	4b10      	ldr	r3, [pc, #64]	; (401eec <board_init+0x5c>)
  401eaa:	447b      	add	r3, pc
  401eac:	4798      	blx	r3
	
	ioport_set_pin_dir(LED1_PIN, IOPORT_DIR_OUTPUT);
  401eae:	2101      	movs	r1, #1
  401eb0:	2003      	movs	r0, #3
  401eb2:	4b0f      	ldr	r3, [pc, #60]	; (401ef0 <board_init+0x60>)
  401eb4:	447b      	add	r3, pc
  401eb6:	4798      	blx	r3
	
	ioport_set_pin_dir(LED2_PIN, IOPORT_DIR_OUTPUT);
  401eb8:	2101      	movs	r1, #1
  401eba:	2002      	movs	r0, #2
  401ebc:	4b0d      	ldr	r3, [pc, #52]	; (401ef4 <board_init+0x64>)
  401ebe:	447b      	add	r3, pc
  401ec0:	4798      	blx	r3
	
	ioport_set_pin_dir(LED3_PIN, IOPORT_DIR_OUTPUT);
  401ec2:	2101      	movs	r1, #1
  401ec4:	201e      	movs	r0, #30
  401ec6:	4b0c      	ldr	r3, [pc, #48]	; (401ef8 <board_init+0x68>)
  401ec8:	447b      	add	r3, pc
  401eca:	4798      	blx	r3
	
	ioport_set_pin_dir(LED4_PIN, IOPORT_DIR_OUTPUT);
  401ecc:	2101      	movs	r1, #1
  401ece:	201b      	movs	r0, #27
  401ed0:	4b0a      	ldr	r3, [pc, #40]	; (401efc <board_init+0x6c>)
  401ed2:	447b      	add	r3, pc
  401ed4:	4798      	blx	r3
	
	ioport_set_pin_dir(LED5_PIN, IOPORT_DIR_OUTPUT);
  401ed6:	2101      	movs	r1, #1
  401ed8:	201d      	movs	r0, #29
  401eda:	4b09      	ldr	r3, [pc, #36]	; (401f00 <board_init+0x70>)
  401edc:	447b      	add	r3, pc
  401ede:	4798      	blx	r3
	
}
  401ee0:	bf00      	nop
  401ee2:	bd80      	pop	{r7, pc}
  401ee4:	fffffee7 	.word	0xfffffee7
  401ee8:	fffffefd 	.word	0xfffffefd
  401eec:	ffffff79 	.word	0xffffff79
  401ef0:	fffffee9 	.word	0xfffffee9
  401ef4:	fffffedf 	.word	0xfffffedf
  401ef8:	fffffed5 	.word	0xfffffed5
  401efc:	fffffecb 	.word	0xfffffecb
  401f00:	fffffec1 	.word	0xfffffec1

00401f04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401f04:	b590      	push	{r4, r7, lr}
  401f06:	b085      	sub	sp, #20
  401f08:	af00      	add	r7, sp, #0
  401f0a:	4c2e      	ldr	r4, [pc, #184]	; (401fc4 <Reset_Handler+0xc0>)
  401f0c:	447c      	add	r4, pc
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401f0e:	4b2e      	ldr	r3, [pc, #184]	; (401fc8 <Reset_Handler+0xc4>)
  401f10:	58e3      	ldr	r3, [r4, r3]
  401f12:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401f14:	4b2d      	ldr	r3, [pc, #180]	; (401fcc <Reset_Handler+0xc8>)
  401f16:	58e3      	ldr	r3, [r4, r3]
  401f18:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401f1a:	68fa      	ldr	r2, [r7, #12]
  401f1c:	68bb      	ldr	r3, [r7, #8]
  401f1e:	429a      	cmp	r2, r3
  401f20:	d90e      	bls.n	401f40 <Reset_Handler+0x3c>
		for (; pDest < &_erelocate;) {
  401f22:	e007      	b.n	401f34 <Reset_Handler+0x30>
			*pDest++ = *pSrc++;
  401f24:	68bb      	ldr	r3, [r7, #8]
  401f26:	1d1a      	adds	r2, r3, #4
  401f28:	60ba      	str	r2, [r7, #8]
  401f2a:	68fa      	ldr	r2, [r7, #12]
  401f2c:	1d11      	adds	r1, r2, #4
  401f2e:	60f9      	str	r1, [r7, #12]
  401f30:	6812      	ldr	r2, [r2, #0]
  401f32:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  401f34:	68bb      	ldr	r3, [r7, #8]
  401f36:	4a26      	ldr	r2, [pc, #152]	; (401fd0 <Reset_Handler+0xcc>)
  401f38:	58a2      	ldr	r2, [r4, r2]
  401f3a:	4293      	cmp	r3, r2
  401f3c:	d3f2      	bcc.n	401f24 <Reset_Handler+0x20>
  401f3e:	e023      	b.n	401f88 <Reset_Handler+0x84>
		}
	} else if (pSrc < pDest) {
  401f40:	68fa      	ldr	r2, [r7, #12]
  401f42:	68bb      	ldr	r3, [r7, #8]
  401f44:	429a      	cmp	r2, r3
  401f46:	d21f      	bcs.n	401f88 <Reset_Handler+0x84>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401f48:	4b21      	ldr	r3, [pc, #132]	; (401fd0 <Reset_Handler+0xcc>)
  401f4a:	58e3      	ldr	r3, [r4, r3]
  401f4c:	461a      	mov	r2, r3
  401f4e:	4b1f      	ldr	r3, [pc, #124]	; (401fcc <Reset_Handler+0xc8>)
  401f50:	58e3      	ldr	r3, [r4, r3]
  401f52:	1ad3      	subs	r3, r2, r3
  401f54:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401f56:	68fa      	ldr	r2, [r7, #12]
  401f58:	687b      	ldr	r3, [r7, #4]
  401f5a:	4413      	add	r3, r2
  401f5c:	3b04      	subs	r3, #4
  401f5e:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401f60:	68ba      	ldr	r2, [r7, #8]
  401f62:	687b      	ldr	r3, [r7, #4]
  401f64:	4413      	add	r3, r2
  401f66:	3b04      	subs	r3, #4
  401f68:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401f6a:	e00a      	b.n	401f82 <Reset_Handler+0x7e>
			*pDest-- = *pSrc--;
  401f6c:	68bb      	ldr	r3, [r7, #8]
  401f6e:	1f1a      	subs	r2, r3, #4
  401f70:	60ba      	str	r2, [r7, #8]
  401f72:	68fa      	ldr	r2, [r7, #12]
  401f74:	1f11      	subs	r1, r2, #4
  401f76:	60f9      	str	r1, [r7, #12]
  401f78:	6812      	ldr	r2, [r2, #0]
  401f7a:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	3b04      	subs	r3, #4
  401f80:	607b      	str	r3, [r7, #4]
  401f82:	687b      	ldr	r3, [r7, #4]
  401f84:	2b00      	cmp	r3, #0
  401f86:	d1f1      	bne.n	401f6c <Reset_Handler+0x68>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f88:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401f8a:	4b12      	ldr	r3, [pc, #72]	; (401fd4 <Reset_Handler+0xd0>)
  401f8c:	58e3      	ldr	r3, [r4, r3]
  401f8e:	60bb      	str	r3, [r7, #8]
  401f90:	e004      	b.n	401f9c <Reset_Handler+0x98>
		*pDest++ = 0;
  401f92:	68bb      	ldr	r3, [r7, #8]
  401f94:	1d1a      	adds	r2, r3, #4
  401f96:	60ba      	str	r2, [r7, #8]
  401f98:	2200      	movs	r2, #0
  401f9a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401f9c:	68bb      	ldr	r3, [r7, #8]
  401f9e:	4a0e      	ldr	r2, [pc, #56]	; (401fd8 <Reset_Handler+0xd4>)
  401fa0:	58a2      	ldr	r2, [r4, r2]
  401fa2:	4293      	cmp	r3, r2
  401fa4:	d3f5      	bcc.n	401f92 <Reset_Handler+0x8e>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  401fa6:	4b0d      	ldr	r3, [pc, #52]	; (401fdc <Reset_Handler+0xd8>)
  401fa8:	58e3      	ldr	r3, [r4, r3]
  401faa:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  401fac:	4a04      	ldr	r2, [pc, #16]	; (401fc0 <Reset_Handler+0xbc>)
  401fae:	68fb      	ldr	r3, [r7, #12]
  401fb0:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401fb2:	4b0b      	ldr	r3, [pc, #44]	; (401fe0 <Reset_Handler+0xdc>)
  401fb4:	58e3      	ldr	r3, [r4, r3]
  401fb6:	4798      	blx	r3

	/* Branch to main function */
	main();
  401fb8:	4b0a      	ldr	r3, [pc, #40]	; (401fe4 <Reset_Handler+0xe0>)
  401fba:	58e3      	ldr	r3, [r4, r3]
  401fbc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  401fbe:	e7fe      	b.n	401fbe <Reset_Handler+0xba>
  401fc0:	e000ed00 	.word	0xe000ed00
  401fc4:	00001564 	.word	0x00001564
  401fc8:	0000003c 	.word	0x0000003c
  401fcc:	00000054 	.word	0x00000054
  401fd0:	00000124 	.word	0x00000124
  401fd4:	00000050 	.word	0x00000050
  401fd8:	000000f4 	.word	0x000000f4
  401fdc:	00000030 	.word	0x00000030
  401fe0:	0000007c 	.word	0x0000007c
  401fe4:	000000e8 	.word	0x000000e8

00401fe8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401fe8:	b480      	push	{r7}
  401fea:	af00      	add	r7, sp, #0
	while (1) {
  401fec:	e7fe      	b.n	401fec <Dummy_Handler+0x4>
	...

00401ff0 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  401ff0:	b480      	push	{r7}
  401ff2:	af00      	add	r7, sp, #0
  401ff4:	4b77      	ldr	r3, [pc, #476]	; (4021d4 <SystemCoreClockUpdate+0x1e4>)
  401ff6:	447b      	add	r3, pc
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401ff8:	4a70      	ldr	r2, [pc, #448]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  401ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401ffc:	f002 0203 	and.w	r2, r2, #3
  402000:	2a03      	cmp	r2, #3
  402002:	f200 80b8 	bhi.w	402176 <SystemCoreClockUpdate+0x186>
  402006:	a102      	add	r1, pc, #8	; (adr r1, 402010 <SystemCoreClockUpdate+0x20>)
  402008:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  40200c:	4411      	add	r1, r2
  40200e:	4708      	bx	r1
  402010:	00000011 	.word	0x00000011
  402014:	00000039 	.word	0x00000039
  402018:	00000097 	.word	0x00000097
  40201c:	00000097 	.word	0x00000097
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402020:	4a67      	ldr	r2, [pc, #412]	; (4021c0 <SystemCoreClockUpdate+0x1d0>)
  402022:	6952      	ldr	r2, [r2, #20]
  402024:	f002 0280 	and.w	r2, r2, #128	; 0x80
  402028:	2a00      	cmp	r2, #0
  40202a:	d006      	beq.n	40203a <SystemCoreClockUpdate+0x4a>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40202c:	4a6a      	ldr	r2, [pc, #424]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40202e:	589a      	ldr	r2, [r3, r2]
  402030:	4611      	mov	r1, r2
  402032:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402036:	600a      	str	r2, [r1, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402038:	e09e      	b.n	402178 <SystemCoreClockUpdate+0x188>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40203a:	4a67      	ldr	r2, [pc, #412]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40203c:	589a      	ldr	r2, [r3, r2]
  40203e:	4611      	mov	r1, r2
  402040:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402044:	600a      	str	r2, [r1, #0]
		break;
  402046:	e097      	b.n	402178 <SystemCoreClockUpdate+0x188>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402048:	4a5c      	ldr	r2, [pc, #368]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  40204a:	6a12      	ldr	r2, [r2, #32]
  40204c:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
  402050:	2a00      	cmp	r2, #0
  402052:	d005      	beq.n	402060 <SystemCoreClockUpdate+0x70>
			SystemCoreClock = CHIP_FREQ_XTAL;
  402054:	4a60      	ldr	r2, [pc, #384]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402056:	589a      	ldr	r2, [r3, r2]
  402058:	4611      	mov	r1, r2
  40205a:	4a5a      	ldr	r2, [pc, #360]	; (4021c4 <SystemCoreClockUpdate+0x1d4>)
  40205c:	600a      	str	r2, [r1, #0]
			
			default:
			break;
			}
		}
		break;
  40205e:	e08b      	b.n	402178 <SystemCoreClockUpdate+0x188>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402060:	4a5d      	ldr	r2, [pc, #372]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402062:	589a      	ldr	r2, [r3, r2]
  402064:	4611      	mov	r1, r2
  402066:	4a58      	ldr	r2, [pc, #352]	; (4021c8 <SystemCoreClockUpdate+0x1d8>)
  402068:	600a      	str	r2, [r1, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40206a:	4a54      	ldr	r2, [pc, #336]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  40206c:	6a12      	ldr	r2, [r2, #32]
  40206e:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402072:	2a10      	cmp	r2, #16
  402074:	d00a      	beq.n	40208c <SystemCoreClockUpdate+0x9c>
  402076:	2a20      	cmp	r2, #32
  402078:	d00e      	beq.n	402098 <SystemCoreClockUpdate+0xa8>
  40207a:	2a00      	cmp	r2, #0
  40207c:	d000      	beq.n	402080 <SystemCoreClockUpdate+0x90>
			break;
  40207e:	e011      	b.n	4020a4 <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402080:	4a55      	ldr	r2, [pc, #340]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402082:	589a      	ldr	r2, [r3, r2]
  402084:	4611      	mov	r1, r2
  402086:	4a50      	ldr	r2, [pc, #320]	; (4021c8 <SystemCoreClockUpdate+0x1d8>)
  402088:	600a      	str	r2, [r1, #0]
			break;
  40208a:	e00b      	b.n	4020a4 <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40208c:	4a52      	ldr	r2, [pc, #328]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40208e:	589a      	ldr	r2, [r3, r2]
  402090:	4611      	mov	r1, r2
  402092:	4a4e      	ldr	r2, [pc, #312]	; (4021cc <SystemCoreClockUpdate+0x1dc>)
  402094:	600a      	str	r2, [r1, #0]
			break;
  402096:	e005      	b.n	4020a4 <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402098:	4a4f      	ldr	r2, [pc, #316]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40209a:	589a      	ldr	r2, [r3, r2]
  40209c:	4611      	mov	r1, r2
  40209e:	4a49      	ldr	r2, [pc, #292]	; (4021c4 <SystemCoreClockUpdate+0x1d4>)
  4020a0:	600a      	str	r2, [r1, #0]
			break;
  4020a2:	bf00      	nop
		break;
  4020a4:	e068      	b.n	402178 <SystemCoreClockUpdate+0x188>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020a6:	4a45      	ldr	r2, [pc, #276]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  4020a8:	6a12      	ldr	r2, [r2, #32]
  4020aa:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
  4020ae:	2a00      	cmp	r2, #0
  4020b0:	d005      	beq.n	4020be <SystemCoreClockUpdate+0xce>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4020b2:	4a49      	ldr	r2, [pc, #292]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4020b4:	589a      	ldr	r2, [r3, r2]
  4020b6:	4611      	mov	r1, r2
  4020b8:	4a42      	ldr	r2, [pc, #264]	; (4021c4 <SystemCoreClockUpdate+0x1d4>)
  4020ba:	600a      	str	r2, [r1, #0]
  4020bc:	e021      	b.n	402102 <SystemCoreClockUpdate+0x112>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020be:	4a46      	ldr	r2, [pc, #280]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4020c0:	589a      	ldr	r2, [r3, r2]
  4020c2:	4611      	mov	r1, r2
  4020c4:	4a40      	ldr	r2, [pc, #256]	; (4021c8 <SystemCoreClockUpdate+0x1d8>)
  4020c6:	600a      	str	r2, [r1, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020c8:	4a3c      	ldr	r2, [pc, #240]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  4020ca:	6a12      	ldr	r2, [r2, #32]
  4020cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4020d0:	2a10      	cmp	r2, #16
  4020d2:	d00a      	beq.n	4020ea <SystemCoreClockUpdate+0xfa>
  4020d4:	2a20      	cmp	r2, #32
  4020d6:	d00e      	beq.n	4020f6 <SystemCoreClockUpdate+0x106>
  4020d8:	2a00      	cmp	r2, #0
  4020da:	d000      	beq.n	4020de <SystemCoreClockUpdate+0xee>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  4020dc:	e011      	b.n	402102 <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020de:	4a3e      	ldr	r2, [pc, #248]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4020e0:	589a      	ldr	r2, [r3, r2]
  4020e2:	4611      	mov	r1, r2
  4020e4:	4a38      	ldr	r2, [pc, #224]	; (4021c8 <SystemCoreClockUpdate+0x1d8>)
  4020e6:	600a      	str	r2, [r1, #0]
					break;
  4020e8:	e00b      	b.n	402102 <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020ea:	4a3b      	ldr	r2, [pc, #236]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4020ec:	589a      	ldr	r2, [r3, r2]
  4020ee:	4611      	mov	r1, r2
  4020f0:	4a36      	ldr	r2, [pc, #216]	; (4021cc <SystemCoreClockUpdate+0x1dc>)
  4020f2:	600a      	str	r2, [r1, #0]
					break;
  4020f4:	e005      	b.n	402102 <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4020f6:	4a38      	ldr	r2, [pc, #224]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4020f8:	589a      	ldr	r2, [r3, r2]
  4020fa:	4611      	mov	r1, r2
  4020fc:	4a31      	ldr	r2, [pc, #196]	; (4021c4 <SystemCoreClockUpdate+0x1d4>)
  4020fe:	600a      	str	r2, [r1, #0]
					break;
  402100:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402102:	4a2e      	ldr	r2, [pc, #184]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  402104:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402106:	f002 0203 	and.w	r2, r2, #3
  40210a:	2a02      	cmp	r2, #2
  40210c:	d119      	bne.n	402142 <SystemCoreClockUpdate+0x152>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40210e:	4a2b      	ldr	r2, [pc, #172]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  402110:	6a92      	ldr	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  402112:	0c12      	lsrs	r2, r2, #16
  402114:	f3c2 020a 	ubfx	r2, r2, #0, #11
  402118:	3201      	adds	r2, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40211a:	492f      	ldr	r1, [pc, #188]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40211c:	5859      	ldr	r1, [r3, r1]
  40211e:	6809      	ldr	r1, [r1, #0]
  402120:	fb01 f202 	mul.w	r2, r1, r2
  402124:	492c      	ldr	r1, [pc, #176]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402126:	5859      	ldr	r1, [r3, r1]
  402128:	600a      	str	r2, [r1, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40212a:	4a24      	ldr	r2, [pc, #144]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  40212c:	6a92      	ldr	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40212e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402130:	4929      	ldr	r1, [pc, #164]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402132:	5859      	ldr	r1, [r3, r1]
  402134:	6809      	ldr	r1, [r1, #0]
  402136:	fbb1 f2f2 	udiv	r2, r1, r2
  40213a:	4927      	ldr	r1, [pc, #156]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40213c:	5859      	ldr	r1, [r3, r1]
  40213e:	600a      	str	r2, [r1, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402140:	e01a      	b.n	402178 <SystemCoreClockUpdate+0x188>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402142:	4a1e      	ldr	r2, [pc, #120]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  402144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402146:	0c12      	lsrs	r2, r2, #16
  402148:	f3c2 020a 	ubfx	r2, r2, #0, #11
  40214c:	3201      	adds	r2, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40214e:	4922      	ldr	r1, [pc, #136]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402150:	5859      	ldr	r1, [r3, r1]
  402152:	6809      	ldr	r1, [r1, #0]
  402154:	fb01 f202 	mul.w	r2, r1, r2
  402158:	491f      	ldr	r1, [pc, #124]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  40215a:	5859      	ldr	r1, [r3, r1]
  40215c:	600a      	str	r2, [r1, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40215e:	4a17      	ldr	r2, [pc, #92]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  402160:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  402162:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402164:	491c      	ldr	r1, [pc, #112]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402166:	5859      	ldr	r1, [r3, r1]
  402168:	6809      	ldr	r1, [r1, #0]
  40216a:	fbb1 f2f2 	udiv	r2, r1, r2
  40216e:	491a      	ldr	r1, [pc, #104]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402170:	5859      	ldr	r1, [r3, r1]
  402172:	600a      	str	r2, [r1, #0]
		break;
  402174:	e000      	b.n	402178 <SystemCoreClockUpdate+0x188>
		
	default:
		break;
  402176:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402178:	4a10      	ldr	r2, [pc, #64]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  40217a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40217c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  402180:	2a70      	cmp	r2, #112	; 0x70
  402182:	d10a      	bne.n	40219a <SystemCoreClockUpdate+0x1aa>
		SystemCoreClock /= 3U;
  402184:	4a14      	ldr	r2, [pc, #80]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402186:	589a      	ldr	r2, [r3, r2]
  402188:	6812      	ldr	r2, [r2, #0]
  40218a:	4911      	ldr	r1, [pc, #68]	; (4021d0 <SystemCoreClockUpdate+0x1e0>)
  40218c:	fba1 1202 	umull	r1, r2, r1, r2
  402190:	0852      	lsrs	r2, r2, #1
  402192:	4911      	ldr	r1, [pc, #68]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  402194:	585b      	ldr	r3, [r3, r1]
  402196:	601a      	str	r2, [r3, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  402198:	e00c      	b.n	4021b4 <SystemCoreClockUpdate+0x1c4>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40219a:	4a08      	ldr	r2, [pc, #32]	; (4021bc <SystemCoreClockUpdate+0x1cc>)
  40219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40219e:	0912      	lsrs	r2, r2, #4
  4021a0:	f002 0207 	and.w	r2, r2, #7
		SystemCoreClock >>=
  4021a4:	490c      	ldr	r1, [pc, #48]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4021a6:	5859      	ldr	r1, [r3, r1]
  4021a8:	6809      	ldr	r1, [r1, #0]
  4021aa:	fa21 f202 	lsr.w	r2, r1, r2
  4021ae:	490a      	ldr	r1, [pc, #40]	; (4021d8 <SystemCoreClockUpdate+0x1e8>)
  4021b0:	585b      	ldr	r3, [r3, r1]
  4021b2:	601a      	str	r2, [r3, #0]
}
  4021b4:	bf00      	nop
  4021b6:	46bd      	mov	sp, r7
  4021b8:	bc80      	pop	{r7}
  4021ba:	4770      	bx	lr
  4021bc:	400e0400 	.word	0x400e0400
  4021c0:	400e1410 	.word	0x400e1410
  4021c4:	00b71b00 	.word	0x00b71b00
  4021c8:	003d0900 	.word	0x003d0900
  4021cc:	007a1200 	.word	0x007a1200
  4021d0:	aaaaaaab 	.word	0xaaaaaaab
  4021d4:	0000147a 	.word	0x0000147a
  4021d8:	00000060 	.word	0x00000060

004021dc <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4021dc:	b480      	push	{r7}
  4021de:	b083      	sub	sp, #12
  4021e0:	af00      	add	r7, sp, #0
  4021e2:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4021e4:	687b      	ldr	r3, [r7, #4]
  4021e6:	4a18      	ldr	r2, [pc, #96]	; (402248 <system_init_flash+0x6c>)
  4021e8:	4293      	cmp	r3, r2
  4021ea:	d804      	bhi.n	4021f6 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4021ec:	4b17      	ldr	r3, [pc, #92]	; (40224c <system_init_flash+0x70>)
  4021ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021f2:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  4021f4:	e023      	b.n	40223e <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4021f6:	687b      	ldr	r3, [r7, #4]
  4021f8:	4a15      	ldr	r2, [pc, #84]	; (402250 <system_init_flash+0x74>)
  4021fa:	4293      	cmp	r3, r2
  4021fc:	d803      	bhi.n	402206 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021fe:	4b13      	ldr	r3, [pc, #76]	; (40224c <system_init_flash+0x70>)
  402200:	4a14      	ldr	r2, [pc, #80]	; (402254 <system_init_flash+0x78>)
  402202:	601a      	str	r2, [r3, #0]
}
  402204:	e01b      	b.n	40223e <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402206:	687b      	ldr	r3, [r7, #4]
  402208:	4a13      	ldr	r2, [pc, #76]	; (402258 <system_init_flash+0x7c>)
  40220a:	4293      	cmp	r3, r2
  40220c:	d803      	bhi.n	402216 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40220e:	4b0f      	ldr	r3, [pc, #60]	; (40224c <system_init_flash+0x70>)
  402210:	4a12      	ldr	r2, [pc, #72]	; (40225c <system_init_flash+0x80>)
  402212:	601a      	str	r2, [r3, #0]
}
  402214:	e013      	b.n	40223e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	4a11      	ldr	r2, [pc, #68]	; (402260 <system_init_flash+0x84>)
  40221a:	4293      	cmp	r3, r2
  40221c:	d803      	bhi.n	402226 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40221e:	4b0b      	ldr	r3, [pc, #44]	; (40224c <system_init_flash+0x70>)
  402220:	4a10      	ldr	r2, [pc, #64]	; (402264 <system_init_flash+0x88>)
  402222:	601a      	str	r2, [r3, #0]
}
  402224:	e00b      	b.n	40223e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402226:	687b      	ldr	r3, [r7, #4]
  402228:	4a0f      	ldr	r2, [pc, #60]	; (402268 <system_init_flash+0x8c>)
  40222a:	4293      	cmp	r3, r2
  40222c:	d804      	bhi.n	402238 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40222e:	4b07      	ldr	r3, [pc, #28]	; (40224c <system_init_flash+0x70>)
  402230:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402234:	601a      	str	r2, [r3, #0]
}
  402236:	e002      	b.n	40223e <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402238:	4b04      	ldr	r3, [pc, #16]	; (40224c <system_init_flash+0x70>)
  40223a:	4a0c      	ldr	r2, [pc, #48]	; (40226c <system_init_flash+0x90>)
  40223c:	601a      	str	r2, [r3, #0]
}
  40223e:	bf00      	nop
  402240:	370c      	adds	r7, #12
  402242:	46bd      	mov	sp, r7
  402244:	bc80      	pop	{r7}
  402246:	4770      	bx	lr
  402248:	01312cff 	.word	0x01312cff
  40224c:	400e0a00 	.word	0x400e0a00
  402250:	026259ff 	.word	0x026259ff
  402254:	04000100 	.word	0x04000100
  402258:	039386ff 	.word	0x039386ff
  40225c:	04000200 	.word	0x04000200
  402260:	04c4b3ff 	.word	0x04c4b3ff
  402264:	04000300 	.word	0x04000300
  402268:	05f5e0ff 	.word	0x05f5e0ff
  40226c:	04000500 	.word	0x04000500

00402270 <osc_get_rate>:
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	2b07      	cmp	r3, #7
  40227c:	d827      	bhi.n	4022ce <osc_get_rate+0x5e>
  40227e:	a202      	add	r2, pc, #8	; (adr r2, 402288 <osc_get_rate+0x18>)
  402280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402284:	441a      	add	r2, r3
  402286:	4710      	bx	r2
  402288:	00000021 	.word	0x00000021
  40228c:	00000027 	.word	0x00000027
  402290:	0000002d 	.word	0x0000002d
  402294:	00000033 	.word	0x00000033
  402298:	00000037 	.word	0x00000037
  40229c:	0000003b 	.word	0x0000003b
  4022a0:	0000003f 	.word	0x0000003f
  4022a4:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  4022a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022ac:	e010      	b.n	4022d0 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  4022ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022b2:	e00d      	b.n	4022d0 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  4022b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022b8:	e00a      	b.n	4022d0 <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  4022ba:	4b08      	ldr	r3, [pc, #32]	; (4022dc <osc_get_rate+0x6c>)
  4022bc:	e008      	b.n	4022d0 <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  4022be:	4b08      	ldr	r3, [pc, #32]	; (4022e0 <osc_get_rate+0x70>)
  4022c0:	e006      	b.n	4022d0 <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  4022c2:	4b08      	ldr	r3, [pc, #32]	; (4022e4 <osc_get_rate+0x74>)
  4022c4:	e004      	b.n	4022d0 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  4022c6:	4b07      	ldr	r3, [pc, #28]	; (4022e4 <osc_get_rate+0x74>)
  4022c8:	e002      	b.n	4022d0 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  4022ca:	4b06      	ldr	r3, [pc, #24]	; (4022e4 <osc_get_rate+0x74>)
  4022cc:	e000      	b.n	4022d0 <osc_get_rate+0x60>
	return 0;
  4022ce:	2300      	movs	r3, #0
}
  4022d0:	4618      	mov	r0, r3
  4022d2:	370c      	adds	r7, #12
  4022d4:	46bd      	mov	sp, r7
  4022d6:	bc80      	pop	{r7}
  4022d8:	4770      	bx	lr
  4022da:	bf00      	nop
  4022dc:	003d0900 	.word	0x003d0900
  4022e0:	007a1200 	.word	0x007a1200
  4022e4:	00b71b00 	.word	0x00b71b00

004022e8 <sysclk_get_main_hz>:
{
  4022e8:	b580      	push	{r7, lr}
  4022ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4022ec:	2006      	movs	r0, #6
  4022ee:	4b05      	ldr	r3, [pc, #20]	; (402304 <sysclk_get_main_hz+0x1c>)
  4022f0:	447b      	add	r3, pc
  4022f2:	4798      	blx	r3
  4022f4:	4602      	mov	r2, r0
  4022f6:	4613      	mov	r3, r2
  4022f8:	009b      	lsls	r3, r3, #2
  4022fa:	4413      	add	r3, r2
  4022fc:	009b      	lsls	r3, r3, #2
}
  4022fe:	4618      	mov	r0, r3
  402300:	bd80      	pop	{r7, pc}
  402302:	bf00      	nop
  402304:	ffffff7d 	.word	0xffffff7d

00402308 <sysclk_get_cpu_hz>:
{
  402308:	b580      	push	{r7, lr}
  40230a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40230c:	4b03      	ldr	r3, [pc, #12]	; (40231c <sysclk_get_cpu_hz+0x14>)
  40230e:	447b      	add	r3, pc
  402310:	4798      	blx	r3
  402312:	4603      	mov	r3, r0
  402314:	085b      	lsrs	r3, r3, #1
}
  402316:	4618      	mov	r0, r3
  402318:	bd80      	pop	{r7, pc}
  40231a:	bf00      	nop
  40231c:	ffffffd7 	.word	0xffffffd7

00402320 <ioport_set_pin_level>:
{
  402320:	b480      	push	{r7}
  402322:	b08b      	sub	sp, #44	; 0x2c
  402324:	af00      	add	r7, sp, #0
  402326:	6078      	str	r0, [r7, #4]
  402328:	460b      	mov	r3, r1
  40232a:	70fb      	strb	r3, [r7, #3]
  40232c:	687b      	ldr	r3, [r7, #4]
  40232e:	627b      	str	r3, [r7, #36]	; 0x24
  402330:	78fb      	ldrb	r3, [r7, #3]
  402332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402338:	61fb      	str	r3, [r7, #28]
  40233a:	69fb      	ldr	r3, [r7, #28]
  40233c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40233e:	69bb      	ldr	r3, [r7, #24]
  402340:	095b      	lsrs	r3, r3, #5
  402342:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402344:	697b      	ldr	r3, [r7, #20]
  402346:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40234a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40234e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  402350:	613b      	str	r3, [r7, #16]
	if (level) {
  402352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402356:	2b00      	cmp	r3, #0
  402358:	d009      	beq.n	40236e <ioport_set_pin_level+0x4e>
  40235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40235c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40235e:	68fb      	ldr	r3, [r7, #12]
  402360:	f003 031f 	and.w	r3, r3, #31
  402364:	2201      	movs	r2, #1
  402366:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402368:	693b      	ldr	r3, [r7, #16]
  40236a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40236c:	e008      	b.n	402380 <ioport_set_pin_level+0x60>
  40236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402370:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402372:	68bb      	ldr	r3, [r7, #8]
  402374:	f003 031f 	and.w	r3, r3, #31
  402378:	2201      	movs	r2, #1
  40237a:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40237c:	693b      	ldr	r3, [r7, #16]
  40237e:	635a      	str	r2, [r3, #52]	; 0x34
  402380:	bf00      	nop
  402382:	372c      	adds	r7, #44	; 0x2c
  402384:	46bd      	mov	sp, r7
  402386:	bc80      	pop	{r7}
  402388:	4770      	bx	lr

0040238a <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  40238a:	b480      	push	{r7}
  40238c:	b089      	sub	sp, #36	; 0x24
  40238e:	af00      	add	r7, sp, #0
  402390:	6078      	str	r0, [r7, #4]
  402392:	687b      	ldr	r3, [r7, #4]
  402394:	61fb      	str	r3, [r7, #28]
  402396:	69fb      	ldr	r3, [r7, #28]
  402398:	61bb      	str	r3, [r7, #24]
  40239a:	69bb      	ldr	r3, [r7, #24]
  40239c:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  40239e:	697b      	ldr	r3, [r7, #20]
  4023a0:	095b      	lsrs	r3, r3, #5
  4023a2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4023a4:	693b      	ldr	r3, [r7, #16]
  4023a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4023aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4023ae:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4023b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4023b2:	69fb      	ldr	r3, [r7, #28]
  4023b4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4023b6:	68fb      	ldr	r3, [r7, #12]
  4023b8:	f003 031f 	and.w	r3, r3, #31
  4023bc:	2101      	movs	r1, #1
  4023be:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4023c2:	4013      	ands	r3, r2
  4023c4:	2b00      	cmp	r3, #0
  4023c6:	bf14      	ite	ne
  4023c8:	2301      	movne	r3, #1
  4023ca:	2300      	moveq	r3, #0
  4023cc:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4023ce:	4618      	mov	r0, r3
  4023d0:	3724      	adds	r7, #36	; 0x24
  4023d2:	46bd      	mov	sp, r7
  4023d4:	bc80      	pop	{r7}
  4023d6:	4770      	bx	lr

004023d8 <main>:
#include "conf_board.h"
#include "conf_clock.h"


int main (void)
{	
  4023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  4023dc:	b08e      	sub	sp, #56	; 0x38
  4023de:	af00      	add	r7, sp, #0
  4023e0:	4d95      	ldr	r5, [pc, #596]	; (402638 <main+0x260>)
  4023e2:	447d      	add	r5, pc
	int state_position = 1;
  4023e4:	2301      	movs	r3, #1
  4023e6:	637b      	str	r3, [r7, #52]	; 0x34
	
	sysclk_init();
  4023e8:	4b94      	ldr	r3, [pc, #592]	; (40263c <main+0x264>)
  4023ea:	58eb      	ldr	r3, [r5, r3]
  4023ec:	4798      	blx	r3
	wdt_disable(WDT);
  4023ee:	4891      	ldr	r0, [pc, #580]	; (402634 <main+0x25c>)
  4023f0:	4b93      	ldr	r3, [pc, #588]	; (402640 <main+0x268>)
  4023f2:	58eb      	ldr	r3, [r5, r3]
  4023f4:	4798      	blx	r3
	board_init();
  4023f6:	4b93      	ldr	r3, [pc, #588]	; (402644 <main+0x26c>)
  4023f8:	58eb      	ldr	r3, [r5, r3]
  4023fa:	4798      	blx	r3
	
	configure_tc();
  4023fc:	4b92      	ldr	r3, [pc, #584]	; (402648 <main+0x270>)
  4023fe:	58eb      	ldr	r3, [r5, r3]
  402400:	4798      	blx	r3
	
	configure_usart_wifi();
  402402:	4b92      	ldr	r3, [pc, #584]	; (40264c <main+0x274>)
  402404:	58eb      	ldr	r3, [r5, r3]
  402406:	4798      	blx	r3
	configure_wifi_comm_pin();
  402408:	4b91      	ldr	r3, [pc, #580]	; (402650 <main+0x278>)
  40240a:	58eb      	ldr	r3, [r5, r3]
  40240c:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  40240e:	4b91      	ldr	r3, [pc, #580]	; (402654 <main+0x27c>)
  402410:	58eb      	ldr	r3, [r5, r3]
  402412:	4798      	blx	r3
		
	write_wifi_command("set uart.flow 0 on \r\n", 5);
  402414:	2105      	movs	r1, #5
  402416:	4b90      	ldr	r3, [pc, #576]	; (402658 <main+0x280>)
  402418:	447b      	add	r3, pc
  40241a:	4618      	mov	r0, r3
  40241c:	4b8f      	ldr	r3, [pc, #572]	; (40265c <main+0x284>)
  40241e:	58eb      	ldr	r3, [r5, r3]
  402420:	4798      	blx	r3
	write_wifi_command("set bu c r 5000 \r\n", 5);
  402422:	2105      	movs	r1, #5
  402424:	4b8e      	ldr	r3, [pc, #568]	; (402660 <main+0x288>)
  402426:	447b      	add	r3, pc
  402428:	4618      	mov	r0, r3
  40242a:	4b8c      	ldr	r3, [pc, #560]	; (40265c <main+0x284>)
  40242c:	58eb      	ldr	r3, [r5, r3]
  40242e:	4798      	blx	r3
	write_wifi_command("set sy i g wlan 20 \r\n", 5);
  402430:	2105      	movs	r1, #5
  402432:	4b8c      	ldr	r3, [pc, #560]	; (402664 <main+0x28c>)
  402434:	447b      	add	r3, pc
  402436:	4618      	mov	r0, r3
  402438:	4b88      	ldr	r3, [pc, #544]	; (40265c <main+0x284>)
  40243a:	58eb      	ldr	r3, [r5, r3]
  40243c:	4798      	blx	r3
	write_wifi_command("set sy i g network 18 \r\n", 5);
  40243e:	2105      	movs	r1, #5
  402440:	4b89      	ldr	r3, [pc, #548]	; (402668 <main+0x290>)
  402442:	447b      	add	r3, pc
  402444:	4618      	mov	r0, r3
  402446:	4b85      	ldr	r3, [pc, #532]	; (40265c <main+0x284>)
  402448:	58eb      	ldr	r3, [r5, r3]
  40244a:	4798      	blx	r3
	write_wifi_command("set sy i g softap 21 \r\n", 5);
  40244c:	2105      	movs	r1, #5
  40244e:	4b87      	ldr	r3, [pc, #540]	; (40266c <main+0x294>)
  402450:	447b      	add	r3, pc
  402452:	4618      	mov	r0, r3
  402454:	4b81      	ldr	r3, [pc, #516]	; (40265c <main+0x284>)
  402456:	58eb      	ldr	r3, [r5, r3]
  402458:	4798      	blx	r3
	write_wifi_command("set sy c g 16 \r\n", 5);
  40245a:	2105      	movs	r1, #5
  40245c:	4b84      	ldr	r3, [pc, #528]	; (402670 <main+0x298>)
  40245e:	447b      	add	r3, pc
  402460:	4618      	mov	r0, r3
  402462:	4b7e      	ldr	r3, [pc, #504]	; (40265c <main+0x284>)
  402464:	58eb      	ldr	r3, [r5, r3]
  402466:	4798      	blx	r3
	write_wifi_command("set wl n o 13 \r\n", 5);
  402468:	2105      	movs	r1, #5
  40246a:	4b82      	ldr	r3, [pc, #520]	; (402674 <main+0x29c>)
  40246c:	447b      	add	r3, pc
  40246e:	4618      	mov	r0, r3
  402470:	4b7a      	ldr	r3, [pc, #488]	; (40265c <main+0x284>)
  402472:	58eb      	ldr	r3, [r5, r3]
  402474:	4798      	blx	r3
	write_wifi_command("save \r\n", 5);
  402476:	2105      	movs	r1, #5
  402478:	4b7f      	ldr	r3, [pc, #508]	; (402678 <main+0x2a0>)
  40247a:	447b      	add	r3, pc
  40247c:	4618      	mov	r0, r3
  40247e:	4b77      	ldr	r3, [pc, #476]	; (40265c <main+0x284>)
  402480:	58eb      	ldr	r3, [r5, r3]
  402482:	4798      	blx	r3
	
	command_received_flag = false;
  402484:	4b7d      	ldr	r3, [pc, #500]	; (40267c <main+0x2a4>)
  402486:	58eb      	ldr	r3, [r5, r3]
  402488:	461a      	mov	r2, r3
  40248a:	2300      	movs	r3, #0
  40248c:	7013      	strb	r3, [r2, #0]
	
	ioport_set_pin_level(WIFI_RESET_PIN, false);
  40248e:	2100      	movs	r1, #0
  402490:	2020      	movs	r0, #32
  402492:	4b7b      	ldr	r3, [pc, #492]	; (402680 <main+0x2a8>)
  402494:	447b      	add	r3, pc
  402496:	4798      	blx	r3
	delay_ms(100);
  402498:	4b7a      	ldr	r3, [pc, #488]	; (402684 <main+0x2ac>)
  40249a:	447b      	add	r3, pc
  40249c:	4798      	blx	r3
  40249e:	4603      	mov	r3, r0
  4024a0:	4619      	mov	r1, r3
  4024a2:	f04f 0200 	mov.w	r2, #0
  4024a6:	460b      	mov	r3, r1
  4024a8:	4614      	mov	r4, r2
  4024aa:	18db      	adds	r3, r3, r3
  4024ac:	eb44 0404 	adc.w	r4, r4, r4
  4024b0:	185b      	adds	r3, r3, r1
  4024b2:	eb44 0402 	adc.w	r4, r4, r2
  4024b6:	ea4f 1944 	mov.w	r9, r4, lsl #5
  4024ba:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  4024be:	ea4f 1843 	mov.w	r8, r3, lsl #5
  4024c2:	eb13 0308 	adds.w	r3, r3, r8
  4024c6:	eb44 0409 	adc.w	r4, r4, r9
  4024ca:	185b      	adds	r3, r3, r1
  4024cc:	eb44 0402 	adc.w	r4, r4, r2
  4024d0:	f243 61af 	movw	r1, #13999	; 0x36af
  4024d4:	f04f 0200 	mov.w	r2, #0
  4024d8:	eb13 0801 	adds.w	r8, r3, r1
  4024dc:	eb44 0902 	adc.w	r9, r4, r2
  4024e0:	4640      	mov	r0, r8
  4024e2:	4649      	mov	r1, r9
  4024e4:	4b68      	ldr	r3, [pc, #416]	; (402688 <main+0x2b0>)
  4024e6:	58eb      	ldr	r3, [r5, r3]
  4024e8:	461c      	mov	r4, r3
  4024ea:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4024ee:	f04f 0300 	mov.w	r3, #0
  4024f2:	47a0      	blx	r4
  4024f4:	4603      	mov	r3, r0
  4024f6:	460c      	mov	r4, r1
  4024f8:	4618      	mov	r0, r3
  4024fa:	4b64      	ldr	r3, [pc, #400]	; (40268c <main+0x2b4>)
  4024fc:	58eb      	ldr	r3, [r5, r3]
  4024fe:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  402500:	2101      	movs	r1, #1
  402502:	2020      	movs	r0, #32
  402504:	4b62      	ldr	r3, [pc, #392]	; (402690 <main+0x2b8>)
  402506:	447b      	add	r3, pc
  402508:	4798      	blx	r3
	
	delay_ms(10000);
  40250a:	4b62      	ldr	r3, [pc, #392]	; (402694 <main+0x2bc>)
  40250c:	447b      	add	r3, pc
  40250e:	4798      	blx	r3
  402510:	4603      	mov	r3, r0
  402512:	4619      	mov	r1, r3
  402514:	f04f 0200 	mov.w	r2, #0
  402518:	460b      	mov	r3, r1
  40251a:	4614      	mov	r4, r2
  40251c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  402520:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  402524:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  402528:	4653      	mov	r3, sl
  40252a:	465c      	mov	r4, fp
  40252c:	185b      	adds	r3, r3, r1
  40252e:	eb44 0402 	adc.w	r4, r4, r2
  402532:	00e0      	lsls	r0, r4, #3
  402534:	62f8      	str	r0, [r7, #44]	; 0x2c
  402536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  402538:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  40253c:	62f8      	str	r0, [r7, #44]	; 0x2c
  40253e:	00db      	lsls	r3, r3, #3
  402540:	62bb      	str	r3, [r7, #40]	; 0x28
  402542:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  402546:	1a5b      	subs	r3, r3, r1
  402548:	eb64 0402 	sbc.w	r4, r4, r2
  40254c:	0120      	lsls	r0, r4, #4
  40254e:	6278      	str	r0, [r7, #36]	; 0x24
  402550:	6a78      	ldr	r0, [r7, #36]	; 0x24
  402552:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  402556:	6278      	str	r0, [r7, #36]	; 0x24
  402558:	011b      	lsls	r3, r3, #4
  40255a:	623b      	str	r3, [r7, #32]
  40255c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  402560:	185b      	adds	r3, r3, r1
  402562:	eb44 0402 	adc.w	r4, r4, r2
  402566:	0122      	lsls	r2, r4, #4
  402568:	61fa      	str	r2, [r7, #28]
  40256a:	69fa      	ldr	r2, [r7, #28]
  40256c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  402570:	61fa      	str	r2, [r7, #28]
  402572:	011b      	lsls	r3, r3, #4
  402574:	61bb      	str	r3, [r7, #24]
  402576:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  40257a:	4619      	mov	r1, r3
  40257c:	4622      	mov	r2, r4
  40257e:	f243 63af 	movw	r3, #13999	; 0x36af
  402582:	f04f 0400 	mov.w	r4, #0
  402586:	eb11 0803 	adds.w	r8, r1, r3
  40258a:	eb42 0904 	adc.w	r9, r2, r4
  40258e:	4640      	mov	r0, r8
  402590:	4649      	mov	r1, r9
  402592:	4b3d      	ldr	r3, [pc, #244]	; (402688 <main+0x2b0>)
  402594:	58eb      	ldr	r3, [r5, r3]
  402596:	461c      	mov	r4, r3
  402598:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40259c:	f04f 0300 	mov.w	r3, #0
  4025a0:	47a0      	blx	r4
  4025a2:	4603      	mov	r3, r0
  4025a4:	460c      	mov	r4, r1
  4025a6:	4618      	mov	r0, r3
  4025a8:	4b38      	ldr	r3, [pc, #224]	; (40268c <main+0x2b4>)
  4025aa:	58eb      	ldr	r3, [r5, r3]
  4025ac:	4798      	blx	r3
	
	web_setup_flag = false; 
  4025ae:	4b3a      	ldr	r3, [pc, #232]	; (402698 <main+0x2c0>)
  4025b0:	58eb      	ldr	r3, [r5, r3]
  4025b2:	2200      	movs	r2, #0
  4025b4:	701a      	strb	r2, [r3, #0]
	
	while (ioport_get_pin_level(NETWORK_STATUS_PIN) == false)
  4025b6:	e010      	b.n	4025da <main+0x202>
	{
		if (web_setup_flag == true)
  4025b8:	4b37      	ldr	r3, [pc, #220]	; (402698 <main+0x2c0>)
  4025ba:	58eb      	ldr	r3, [r5, r3]
  4025bc:	781b      	ldrb	r3, [r3, #0]
  4025be:	b2db      	uxtb	r3, r3
  4025c0:	2b00      	cmp	r3, #0
  4025c2:	d00a      	beq.n	4025da <main+0x202>
		{
			write_wifi_command("setup web \r\n", 100);
  4025c4:	2164      	movs	r1, #100	; 0x64
  4025c6:	4b35      	ldr	r3, [pc, #212]	; (40269c <main+0x2c4>)
  4025c8:	447b      	add	r3, pc
  4025ca:	4618      	mov	r0, r3
  4025cc:	4b23      	ldr	r3, [pc, #140]	; (40265c <main+0x284>)
  4025ce:	58eb      	ldr	r3, [r5, r3]
  4025d0:	4798      	blx	r3
			
			web_setup_flag = false;
  4025d2:	4b31      	ldr	r3, [pc, #196]	; (402698 <main+0x2c0>)
  4025d4:	58eb      	ldr	r3, [r5, r3]
  4025d6:	2200      	movs	r2, #0
  4025d8:	701a      	strb	r2, [r3, #0]
	while (ioport_get_pin_level(NETWORK_STATUS_PIN) == false)
  4025da:	202b      	movs	r0, #43	; 0x2b
  4025dc:	4b30      	ldr	r3, [pc, #192]	; (4026a0 <main+0x2c8>)
  4025de:	447b      	add	r3, pc
  4025e0:	4798      	blx	r3
  4025e2:	4603      	mov	r3, r0
  4025e4:	f083 0301 	eor.w	r3, r3, #1
  4025e8:	b2db      	uxtb	r3, r3
  4025ea:	2b00      	cmp	r3, #0
  4025ec:	d1e4      	bne.n	4025b8 <main+0x1e0>
 	//write_wifi_command("set sy c p off \r\n", 5);
 	//write_wifi_command("set sy c e off \r\n", 5);
	
	while(1)
	{
		query_server();
  4025ee:	4b2d      	ldr	r3, [pc, #180]	; (4026a4 <main+0x2cc>)
  4025f0:	58eb      	ldr	r3, [r5, r3]
  4025f2:	4798      	blx	r3
		
		if (fall_flag == true)
  4025f4:	4b2c      	ldr	r3, [pc, #176]	; (4026a8 <main+0x2d0>)
  4025f6:	58eb      	ldr	r3, [r5, r3]
  4025f8:	781b      	ldrb	r3, [r3, #0]
  4025fa:	b2db      	uxtb	r3, r3
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d05f      	beq.n	4026c0 <main+0x2e8>
		{
			ioport_set_pin_level(LED1_PIN, 1);
  402600:	2101      	movs	r1, #1
  402602:	2003      	movs	r0, #3
  402604:	4b29      	ldr	r3, [pc, #164]	; (4026ac <main+0x2d4>)
  402606:	447b      	add	r3, pc
  402608:	4798      	blx	r3
			ioport_set_pin_level(LED2_PIN, 1);
  40260a:	2101      	movs	r1, #1
  40260c:	2002      	movs	r0, #2
  40260e:	4b28      	ldr	r3, [pc, #160]	; (4026b0 <main+0x2d8>)
  402610:	447b      	add	r3, pc
  402612:	4798      	blx	r3
			ioport_set_pin_level(LED3_PIN, 1);
  402614:	2101      	movs	r1, #1
  402616:	201e      	movs	r0, #30
  402618:	4b26      	ldr	r3, [pc, #152]	; (4026b4 <main+0x2dc>)
  40261a:	447b      	add	r3, pc
  40261c:	4798      	blx	r3
			ioport_set_pin_level(LED4_PIN, 1);
  40261e:	2101      	movs	r1, #1
  402620:	201b      	movs	r0, #27
  402622:	4b25      	ldr	r3, [pc, #148]	; (4026b8 <main+0x2e0>)
  402624:	447b      	add	r3, pc
  402626:	4798      	blx	r3
			ioport_set_pin_level(LED5_PIN, 0);
  402628:	2100      	movs	r1, #0
  40262a:	201d      	movs	r0, #29
  40262c:	4b23      	ldr	r3, [pc, #140]	; (4026bc <main+0x2e4>)
  40262e:	447b      	add	r3, pc
  402630:	4798      	blx	r3
  402632:	e064      	b.n	4026fe <main+0x326>
  402634:	400e1450 	.word	0x400e1450
  402638:	0000108e 	.word	0x0000108e
  40263c:	00000144 	.word	0x00000144
  402640:	00000140 	.word	0x00000140
  402644:	000000d0 	.word	0x000000d0
  402648:	00000088 	.word	0x00000088
  40264c:	00000078 	.word	0x00000078
  402650:	0000010c 	.word	0x0000010c
  402654:	00000104 	.word	0x00000104
  402658:	00000f70 	.word	0x00000f70
  40265c:	000000e0 	.word	0x000000e0
  402660:	00000f7a 	.word	0x00000f7a
  402664:	00000f80 	.word	0x00000f80
  402668:	00000f8a 	.word	0x00000f8a
  40266c:	00000f98 	.word	0x00000f98
  402670:	00000fa2 	.word	0x00000fa2
  402674:	00000fa8 	.word	0x00000fa8
  402678:	00000fae 	.word	0x00000fae
  40267c:	00000034 	.word	0x00000034
  402680:	fffffe89 	.word	0xfffffe89
  402684:	fffffe6b 	.word	0xfffffe6b
  402688:	0000005c 	.word	0x0000005c
  40268c:	00000108 	.word	0x00000108
  402690:	fffffe17 	.word	0xfffffe17
  402694:	fffffdf9 	.word	0xfffffdf9
  402698:	00000010 	.word	0x00000010
  40269c:	00000e68 	.word	0x00000e68
  4026a0:	fffffda9 	.word	0xfffffda9
  4026a4:	0000009c 	.word	0x0000009c
  4026a8:	0000011c 	.word	0x0000011c
  4026ac:	fffffd17 	.word	0xfffffd17
  4026b0:	fffffd0d 	.word	0xfffffd0d
  4026b4:	fffffd03 	.word	0xfffffd03
  4026b8:	fffffcf9 	.word	0xfffffcf9
  4026bc:	fffffcef 	.word	0xfffffcef
		}
		
		else if (okay_flag == true)
  4026c0:	4b33      	ldr	r3, [pc, #204]	; (402790 <main+0x3b8>)
  4026c2:	58eb      	ldr	r3, [r5, r3]
  4026c4:	781b      	ldrb	r3, [r3, #0]
  4026c6:	b2db      	uxtb	r3, r3
  4026c8:	2b00      	cmp	r3, #0
  4026ca:	d018      	beq.n	4026fe <main+0x326>
		{
			ioport_set_pin_level(LED1_PIN, 0);
  4026cc:	2100      	movs	r1, #0
  4026ce:	2003      	movs	r0, #3
  4026d0:	4b30      	ldr	r3, [pc, #192]	; (402794 <main+0x3bc>)
  4026d2:	447b      	add	r3, pc
  4026d4:	4798      	blx	r3
			ioport_set_pin_level(LED2_PIN, 0);
  4026d6:	2100      	movs	r1, #0
  4026d8:	2002      	movs	r0, #2
  4026da:	4b2f      	ldr	r3, [pc, #188]	; (402798 <main+0x3c0>)
  4026dc:	447b      	add	r3, pc
  4026de:	4798      	blx	r3
			ioport_set_pin_level(LED3_PIN, 0);
  4026e0:	2100      	movs	r1, #0
  4026e2:	201e      	movs	r0, #30
  4026e4:	4b2d      	ldr	r3, [pc, #180]	; (40279c <main+0x3c4>)
  4026e6:	447b      	add	r3, pc
  4026e8:	4798      	blx	r3
			ioport_set_pin_level(LED4_PIN, 0);
  4026ea:	2100      	movs	r1, #0
  4026ec:	201b      	movs	r0, #27
  4026ee:	4b2c      	ldr	r3, [pc, #176]	; (4027a0 <main+0x3c8>)
  4026f0:	447b      	add	r3, pc
  4026f2:	4798      	blx	r3
			ioport_set_pin_level(LED5_PIN, 0);
  4026f4:	2100      	movs	r1, #0
  4026f6:	201d      	movs	r0, #29
  4026f8:	4b2a      	ldr	r3, [pc, #168]	; (4027a4 <main+0x3cc>)
  4026fa:	447b      	add	r3, pc
  4026fc:	4798      	blx	r3
		}
		
		delay_ms(2000);
  4026fe:	4b2a      	ldr	r3, [pc, #168]	; (4027a8 <main+0x3d0>)
  402700:	447b      	add	r3, pc
  402702:	4798      	blx	r3
  402704:	4603      	mov	r3, r0
  402706:	4619      	mov	r1, r3
  402708:	f04f 0200 	mov.w	r2, #0
  40270c:	460b      	mov	r3, r1
  40270e:	4614      	mov	r4, r2
  402710:	0160      	lsls	r0, r4, #5
  402712:	6178      	str	r0, [r7, #20]
  402714:	6978      	ldr	r0, [r7, #20]
  402716:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  40271a:	6178      	str	r0, [r7, #20]
  40271c:	015b      	lsls	r3, r3, #5
  40271e:	613b      	str	r3, [r7, #16]
  402720:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  402724:	1a5b      	subs	r3, r3, r1
  402726:	eb64 0402 	sbc.w	r4, r4, r2
  40272a:	00a0      	lsls	r0, r4, #2
  40272c:	60f8      	str	r0, [r7, #12]
  40272e:	68f8      	ldr	r0, [r7, #12]
  402730:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  402734:	60f8      	str	r0, [r7, #12]
  402736:	009b      	lsls	r3, r3, #2
  402738:	60bb      	str	r3, [r7, #8]
  40273a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40273e:	185b      	adds	r3, r3, r1
  402740:	eb44 0402 	adc.w	r4, r4, r2
  402744:	0122      	lsls	r2, r4, #4
  402746:	607a      	str	r2, [r7, #4]
  402748:	687a      	ldr	r2, [r7, #4]
  40274a:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  40274e:	607a      	str	r2, [r7, #4]
  402750:	011b      	lsls	r3, r3, #4
  402752:	603b      	str	r3, [r7, #0]
  402754:	e9d7 3400 	ldrd	r3, r4, [r7]
  402758:	4619      	mov	r1, r3
  40275a:	4622      	mov	r2, r4
  40275c:	f243 63af 	movw	r3, #13999	; 0x36af
  402760:	f04f 0400 	mov.w	r4, #0
  402764:	eb11 0803 	adds.w	r8, r1, r3
  402768:	eb42 0904 	adc.w	r9, r2, r4
  40276c:	4640      	mov	r0, r8
  40276e:	4649      	mov	r1, r9
  402770:	4b0e      	ldr	r3, [pc, #56]	; (4027ac <main+0x3d4>)
  402772:	58eb      	ldr	r3, [r5, r3]
  402774:	461c      	mov	r4, r3
  402776:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40277a:	f04f 0300 	mov.w	r3, #0
  40277e:	47a0      	blx	r4
  402780:	4603      	mov	r3, r0
  402782:	460c      	mov	r4, r1
  402784:	4618      	mov	r0, r3
  402786:	4b0a      	ldr	r3, [pc, #40]	; (4027b0 <main+0x3d8>)
  402788:	58eb      	ldr	r3, [r5, r3]
  40278a:	4798      	blx	r3
		query_server();
  40278c:	e72f      	b.n	4025ee <main+0x216>
  40278e:	bf00      	nop
  402790:	00000148 	.word	0x00000148
  402794:	fffffc4b 	.word	0xfffffc4b
  402798:	fffffc41 	.word	0xfffffc41
  40279c:	fffffc37 	.word	0xfffffc37
  4027a0:	fffffc2d 	.word	0xfffffc2d
  4027a4:	fffffc23 	.word	0xfffffc23
  4027a8:	fffffc05 	.word	0xfffffc05
  4027ac:	0000005c 	.word	0x0000005c
  4027b0:	00000108 	.word	0x00000108

004027b4 <__aeabi_uldivmod>:
  4027b4:	b953      	cbnz	r3, 4027cc <__aeabi_uldivmod+0x18>
  4027b6:	b94a      	cbnz	r2, 4027cc <__aeabi_uldivmod+0x18>
  4027b8:	2900      	cmp	r1, #0
  4027ba:	bf08      	it	eq
  4027bc:	2800      	cmpeq	r0, #0
  4027be:	bf1c      	itt	ne
  4027c0:	f04f 31ff 	movne.w	r1, #4294967295
  4027c4:	f04f 30ff 	movne.w	r0, #4294967295
  4027c8:	f000 b97a 	b.w	402ac0 <__aeabi_idiv0>
  4027cc:	f1ad 0c08 	sub.w	ip, sp, #8
  4027d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4027d4:	f000 f806 	bl	4027e4 <__udivmoddi4>
  4027d8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4027dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4027e0:	b004      	add	sp, #16
  4027e2:	4770      	bx	lr

004027e4 <__udivmoddi4>:
  4027e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027e8:	468c      	mov	ip, r1
  4027ea:	460d      	mov	r5, r1
  4027ec:	4604      	mov	r4, r0
  4027ee:	9e08      	ldr	r6, [sp, #32]
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d151      	bne.n	402898 <__udivmoddi4+0xb4>
  4027f4:	428a      	cmp	r2, r1
  4027f6:	4617      	mov	r7, r2
  4027f8:	d96d      	bls.n	4028d6 <__udivmoddi4+0xf2>
  4027fa:	fab2 fe82 	clz	lr, r2
  4027fe:	f1be 0f00 	cmp.w	lr, #0
  402802:	d00b      	beq.n	40281c <__udivmoddi4+0x38>
  402804:	f1ce 0c20 	rsb	ip, lr, #32
  402808:	fa01 f50e 	lsl.w	r5, r1, lr
  40280c:	fa20 fc0c 	lsr.w	ip, r0, ip
  402810:	fa02 f70e 	lsl.w	r7, r2, lr
  402814:	ea4c 0c05 	orr.w	ip, ip, r5
  402818:	fa00 f40e 	lsl.w	r4, r0, lr
  40281c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402820:	0c25      	lsrs	r5, r4, #16
  402822:	fbbc f8fa 	udiv	r8, ip, sl
  402826:	fa1f f987 	uxth.w	r9, r7
  40282a:	fb0a cc18 	mls	ip, sl, r8, ip
  40282e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402832:	fb08 f309 	mul.w	r3, r8, r9
  402836:	42ab      	cmp	r3, r5
  402838:	d90a      	bls.n	402850 <__udivmoddi4+0x6c>
  40283a:	19ed      	adds	r5, r5, r7
  40283c:	f108 32ff 	add.w	r2, r8, #4294967295
  402840:	f080 8123 	bcs.w	402a8a <__udivmoddi4+0x2a6>
  402844:	42ab      	cmp	r3, r5
  402846:	f240 8120 	bls.w	402a8a <__udivmoddi4+0x2a6>
  40284a:	f1a8 0802 	sub.w	r8, r8, #2
  40284e:	443d      	add	r5, r7
  402850:	1aed      	subs	r5, r5, r3
  402852:	b2a4      	uxth	r4, r4
  402854:	fbb5 f0fa 	udiv	r0, r5, sl
  402858:	fb0a 5510 	mls	r5, sl, r0, r5
  40285c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402860:	fb00 f909 	mul.w	r9, r0, r9
  402864:	45a1      	cmp	r9, r4
  402866:	d909      	bls.n	40287c <__udivmoddi4+0x98>
  402868:	19e4      	adds	r4, r4, r7
  40286a:	f100 33ff 	add.w	r3, r0, #4294967295
  40286e:	f080 810a 	bcs.w	402a86 <__udivmoddi4+0x2a2>
  402872:	45a1      	cmp	r9, r4
  402874:	f240 8107 	bls.w	402a86 <__udivmoddi4+0x2a2>
  402878:	3802      	subs	r0, #2
  40287a:	443c      	add	r4, r7
  40287c:	eba4 0409 	sub.w	r4, r4, r9
  402880:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402884:	2100      	movs	r1, #0
  402886:	2e00      	cmp	r6, #0
  402888:	d061      	beq.n	40294e <__udivmoddi4+0x16a>
  40288a:	fa24 f40e 	lsr.w	r4, r4, lr
  40288e:	2300      	movs	r3, #0
  402890:	6034      	str	r4, [r6, #0]
  402892:	6073      	str	r3, [r6, #4]
  402894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402898:	428b      	cmp	r3, r1
  40289a:	d907      	bls.n	4028ac <__udivmoddi4+0xc8>
  40289c:	2e00      	cmp	r6, #0
  40289e:	d054      	beq.n	40294a <__udivmoddi4+0x166>
  4028a0:	2100      	movs	r1, #0
  4028a2:	e886 0021 	stmia.w	r6, {r0, r5}
  4028a6:	4608      	mov	r0, r1
  4028a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028ac:	fab3 f183 	clz	r1, r3
  4028b0:	2900      	cmp	r1, #0
  4028b2:	f040 808e 	bne.w	4029d2 <__udivmoddi4+0x1ee>
  4028b6:	42ab      	cmp	r3, r5
  4028b8:	d302      	bcc.n	4028c0 <__udivmoddi4+0xdc>
  4028ba:	4282      	cmp	r2, r0
  4028bc:	f200 80fa 	bhi.w	402ab4 <__udivmoddi4+0x2d0>
  4028c0:	1a84      	subs	r4, r0, r2
  4028c2:	eb65 0503 	sbc.w	r5, r5, r3
  4028c6:	2001      	movs	r0, #1
  4028c8:	46ac      	mov	ip, r5
  4028ca:	2e00      	cmp	r6, #0
  4028cc:	d03f      	beq.n	40294e <__udivmoddi4+0x16a>
  4028ce:	e886 1010 	stmia.w	r6, {r4, ip}
  4028d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028d6:	b912      	cbnz	r2, 4028de <__udivmoddi4+0xfa>
  4028d8:	2701      	movs	r7, #1
  4028da:	fbb7 f7f2 	udiv	r7, r7, r2
  4028de:	fab7 fe87 	clz	lr, r7
  4028e2:	f1be 0f00 	cmp.w	lr, #0
  4028e6:	d134      	bne.n	402952 <__udivmoddi4+0x16e>
  4028e8:	1beb      	subs	r3, r5, r7
  4028ea:	0c3a      	lsrs	r2, r7, #16
  4028ec:	fa1f fc87 	uxth.w	ip, r7
  4028f0:	2101      	movs	r1, #1
  4028f2:	fbb3 f8f2 	udiv	r8, r3, r2
  4028f6:	0c25      	lsrs	r5, r4, #16
  4028f8:	fb02 3318 	mls	r3, r2, r8, r3
  4028fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402900:	fb0c f308 	mul.w	r3, ip, r8
  402904:	42ab      	cmp	r3, r5
  402906:	d907      	bls.n	402918 <__udivmoddi4+0x134>
  402908:	19ed      	adds	r5, r5, r7
  40290a:	f108 30ff 	add.w	r0, r8, #4294967295
  40290e:	d202      	bcs.n	402916 <__udivmoddi4+0x132>
  402910:	42ab      	cmp	r3, r5
  402912:	f200 80d1 	bhi.w	402ab8 <__udivmoddi4+0x2d4>
  402916:	4680      	mov	r8, r0
  402918:	1aed      	subs	r5, r5, r3
  40291a:	b2a3      	uxth	r3, r4
  40291c:	fbb5 f0f2 	udiv	r0, r5, r2
  402920:	fb02 5510 	mls	r5, r2, r0, r5
  402924:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402928:	fb0c fc00 	mul.w	ip, ip, r0
  40292c:	45a4      	cmp	ip, r4
  40292e:	d907      	bls.n	402940 <__udivmoddi4+0x15c>
  402930:	19e4      	adds	r4, r4, r7
  402932:	f100 33ff 	add.w	r3, r0, #4294967295
  402936:	d202      	bcs.n	40293e <__udivmoddi4+0x15a>
  402938:	45a4      	cmp	ip, r4
  40293a:	f200 80b8 	bhi.w	402aae <__udivmoddi4+0x2ca>
  40293e:	4618      	mov	r0, r3
  402940:	eba4 040c 	sub.w	r4, r4, ip
  402944:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402948:	e79d      	b.n	402886 <__udivmoddi4+0xa2>
  40294a:	4631      	mov	r1, r6
  40294c:	4630      	mov	r0, r6
  40294e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402952:	f1ce 0420 	rsb	r4, lr, #32
  402956:	fa05 f30e 	lsl.w	r3, r5, lr
  40295a:	fa07 f70e 	lsl.w	r7, r7, lr
  40295e:	fa20 f804 	lsr.w	r8, r0, r4
  402962:	0c3a      	lsrs	r2, r7, #16
  402964:	fa25 f404 	lsr.w	r4, r5, r4
  402968:	ea48 0803 	orr.w	r8, r8, r3
  40296c:	fbb4 f1f2 	udiv	r1, r4, r2
  402970:	ea4f 4518 	mov.w	r5, r8, lsr #16
  402974:	fb02 4411 	mls	r4, r2, r1, r4
  402978:	fa1f fc87 	uxth.w	ip, r7
  40297c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402980:	fb01 f30c 	mul.w	r3, r1, ip
  402984:	42ab      	cmp	r3, r5
  402986:	fa00 f40e 	lsl.w	r4, r0, lr
  40298a:	d909      	bls.n	4029a0 <__udivmoddi4+0x1bc>
  40298c:	19ed      	adds	r5, r5, r7
  40298e:	f101 30ff 	add.w	r0, r1, #4294967295
  402992:	f080 808a 	bcs.w	402aaa <__udivmoddi4+0x2c6>
  402996:	42ab      	cmp	r3, r5
  402998:	f240 8087 	bls.w	402aaa <__udivmoddi4+0x2c6>
  40299c:	3902      	subs	r1, #2
  40299e:	443d      	add	r5, r7
  4029a0:	1aeb      	subs	r3, r5, r3
  4029a2:	fa1f f588 	uxth.w	r5, r8
  4029a6:	fbb3 f0f2 	udiv	r0, r3, r2
  4029aa:	fb02 3310 	mls	r3, r2, r0, r3
  4029ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4029b2:	fb00 f30c 	mul.w	r3, r0, ip
  4029b6:	42ab      	cmp	r3, r5
  4029b8:	d907      	bls.n	4029ca <__udivmoddi4+0x1e6>
  4029ba:	19ed      	adds	r5, r5, r7
  4029bc:	f100 38ff 	add.w	r8, r0, #4294967295
  4029c0:	d26f      	bcs.n	402aa2 <__udivmoddi4+0x2be>
  4029c2:	42ab      	cmp	r3, r5
  4029c4:	d96d      	bls.n	402aa2 <__udivmoddi4+0x2be>
  4029c6:	3802      	subs	r0, #2
  4029c8:	443d      	add	r5, r7
  4029ca:	1aeb      	subs	r3, r5, r3
  4029cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4029d0:	e78f      	b.n	4028f2 <__udivmoddi4+0x10e>
  4029d2:	f1c1 0720 	rsb	r7, r1, #32
  4029d6:	fa22 f807 	lsr.w	r8, r2, r7
  4029da:	408b      	lsls	r3, r1
  4029dc:	fa05 f401 	lsl.w	r4, r5, r1
  4029e0:	ea48 0303 	orr.w	r3, r8, r3
  4029e4:	fa20 fe07 	lsr.w	lr, r0, r7
  4029e8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4029ec:	40fd      	lsrs	r5, r7
  4029ee:	ea4e 0e04 	orr.w	lr, lr, r4
  4029f2:	fbb5 f9fc 	udiv	r9, r5, ip
  4029f6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4029fa:	fb0c 5519 	mls	r5, ip, r9, r5
  4029fe:	fa1f f883 	uxth.w	r8, r3
  402a02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  402a06:	fb09 f408 	mul.w	r4, r9, r8
  402a0a:	42ac      	cmp	r4, r5
  402a0c:	fa02 f201 	lsl.w	r2, r2, r1
  402a10:	fa00 fa01 	lsl.w	sl, r0, r1
  402a14:	d908      	bls.n	402a28 <__udivmoddi4+0x244>
  402a16:	18ed      	adds	r5, r5, r3
  402a18:	f109 30ff 	add.w	r0, r9, #4294967295
  402a1c:	d243      	bcs.n	402aa6 <__udivmoddi4+0x2c2>
  402a1e:	42ac      	cmp	r4, r5
  402a20:	d941      	bls.n	402aa6 <__udivmoddi4+0x2c2>
  402a22:	f1a9 0902 	sub.w	r9, r9, #2
  402a26:	441d      	add	r5, r3
  402a28:	1b2d      	subs	r5, r5, r4
  402a2a:	fa1f fe8e 	uxth.w	lr, lr
  402a2e:	fbb5 f0fc 	udiv	r0, r5, ip
  402a32:	fb0c 5510 	mls	r5, ip, r0, r5
  402a36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402a3a:	fb00 f808 	mul.w	r8, r0, r8
  402a3e:	45a0      	cmp	r8, r4
  402a40:	d907      	bls.n	402a52 <__udivmoddi4+0x26e>
  402a42:	18e4      	adds	r4, r4, r3
  402a44:	f100 35ff 	add.w	r5, r0, #4294967295
  402a48:	d229      	bcs.n	402a9e <__udivmoddi4+0x2ba>
  402a4a:	45a0      	cmp	r8, r4
  402a4c:	d927      	bls.n	402a9e <__udivmoddi4+0x2ba>
  402a4e:	3802      	subs	r0, #2
  402a50:	441c      	add	r4, r3
  402a52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  402a56:	eba4 0408 	sub.w	r4, r4, r8
  402a5a:	fba0 8902 	umull	r8, r9, r0, r2
  402a5e:	454c      	cmp	r4, r9
  402a60:	46c6      	mov	lr, r8
  402a62:	464d      	mov	r5, r9
  402a64:	d315      	bcc.n	402a92 <__udivmoddi4+0x2ae>
  402a66:	d012      	beq.n	402a8e <__udivmoddi4+0x2aa>
  402a68:	b156      	cbz	r6, 402a80 <__udivmoddi4+0x29c>
  402a6a:	ebba 030e 	subs.w	r3, sl, lr
  402a6e:	eb64 0405 	sbc.w	r4, r4, r5
  402a72:	fa04 f707 	lsl.w	r7, r4, r7
  402a76:	40cb      	lsrs	r3, r1
  402a78:	431f      	orrs	r7, r3
  402a7a:	40cc      	lsrs	r4, r1
  402a7c:	6037      	str	r7, [r6, #0]
  402a7e:	6074      	str	r4, [r6, #4]
  402a80:	2100      	movs	r1, #0
  402a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a86:	4618      	mov	r0, r3
  402a88:	e6f8      	b.n	40287c <__udivmoddi4+0x98>
  402a8a:	4690      	mov	r8, r2
  402a8c:	e6e0      	b.n	402850 <__udivmoddi4+0x6c>
  402a8e:	45c2      	cmp	sl, r8
  402a90:	d2ea      	bcs.n	402a68 <__udivmoddi4+0x284>
  402a92:	ebb8 0e02 	subs.w	lr, r8, r2
  402a96:	eb69 0503 	sbc.w	r5, r9, r3
  402a9a:	3801      	subs	r0, #1
  402a9c:	e7e4      	b.n	402a68 <__udivmoddi4+0x284>
  402a9e:	4628      	mov	r0, r5
  402aa0:	e7d7      	b.n	402a52 <__udivmoddi4+0x26e>
  402aa2:	4640      	mov	r0, r8
  402aa4:	e791      	b.n	4029ca <__udivmoddi4+0x1e6>
  402aa6:	4681      	mov	r9, r0
  402aa8:	e7be      	b.n	402a28 <__udivmoddi4+0x244>
  402aaa:	4601      	mov	r1, r0
  402aac:	e778      	b.n	4029a0 <__udivmoddi4+0x1bc>
  402aae:	3802      	subs	r0, #2
  402ab0:	443c      	add	r4, r7
  402ab2:	e745      	b.n	402940 <__udivmoddi4+0x15c>
  402ab4:	4608      	mov	r0, r1
  402ab6:	e708      	b.n	4028ca <__udivmoddi4+0xe6>
  402ab8:	f1a8 0802 	sub.w	r8, r8, #2
  402abc:	443d      	add	r5, r7
  402abe:	e72b      	b.n	402918 <__udivmoddi4+0x134>

00402ac0 <__aeabi_idiv0>:
  402ac0:	4770      	bx	lr
  402ac2:	bf00      	nop

00402ac4 <__libc_init_array>:
  402ac4:	b570      	push	{r4, r5, r6, lr}
  402ac6:	4e0f      	ldr	r6, [pc, #60]	; (402b04 <__libc_init_array+0x40>)
  402ac8:	4d0f      	ldr	r5, [pc, #60]	; (402b08 <__libc_init_array+0x44>)
  402aca:	1b76      	subs	r6, r6, r5
  402acc:	10b6      	asrs	r6, r6, #2
  402ace:	bf18      	it	ne
  402ad0:	2400      	movne	r4, #0
  402ad2:	d005      	beq.n	402ae0 <__libc_init_array+0x1c>
  402ad4:	3401      	adds	r4, #1
  402ad6:	f855 3b04 	ldr.w	r3, [r5], #4
  402ada:	4798      	blx	r3
  402adc:	42a6      	cmp	r6, r4
  402ade:	d1f9      	bne.n	402ad4 <__libc_init_array+0x10>
  402ae0:	4e0a      	ldr	r6, [pc, #40]	; (402b0c <__libc_init_array+0x48>)
  402ae2:	4d0b      	ldr	r5, [pc, #44]	; (402b10 <__libc_init_array+0x4c>)
  402ae4:	1b76      	subs	r6, r6, r5
  402ae6:	f000 fcaf 	bl	403448 <_init>
  402aea:	10b6      	asrs	r6, r6, #2
  402aec:	bf18      	it	ne
  402aee:	2400      	movne	r4, #0
  402af0:	d006      	beq.n	402b00 <__libc_init_array+0x3c>
  402af2:	3401      	adds	r4, #1
  402af4:	f855 3b04 	ldr.w	r3, [r5], #4
  402af8:	4798      	blx	r3
  402afa:	42a6      	cmp	r6, r4
  402afc:	d1f9      	bne.n	402af2 <__libc_init_array+0x2e>
  402afe:	bd70      	pop	{r4, r5, r6, pc}
  402b00:	bd70      	pop	{r4, r5, r6, pc}
  402b02:	bf00      	nop
  402b04:	00403454 	.word	0x00403454
  402b08:	00403454 	.word	0x00403454
  402b0c:	0040345c 	.word	0x0040345c
  402b10:	00403454 	.word	0x00403454

00402b14 <critical_factorization>:
  402b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b18:	f04f 0e01 	mov.w	lr, #1
  402b1c:	4674      	mov	r4, lr
  402b1e:	2500      	movs	r5, #0
  402b20:	f04f 36ff 	mov.w	r6, #4294967295
  402b24:	192b      	adds	r3, r5, r4
  402b26:	428b      	cmp	r3, r1
  402b28:	eb00 0706 	add.w	r7, r0, r6
  402b2c:	d20d      	bcs.n	402b4a <critical_factorization+0x36>
  402b2e:	5d3f      	ldrb	r7, [r7, r4]
  402b30:	f810 c003 	ldrb.w	ip, [r0, r3]
  402b34:	45bc      	cmp	ip, r7
  402b36:	d22d      	bcs.n	402b94 <critical_factorization+0x80>
  402b38:	461d      	mov	r5, r3
  402b3a:	2401      	movs	r4, #1
  402b3c:	eba3 0e06 	sub.w	lr, r3, r6
  402b40:	192b      	adds	r3, r5, r4
  402b42:	428b      	cmp	r3, r1
  402b44:	eb00 0706 	add.w	r7, r0, r6
  402b48:	d3f1      	bcc.n	402b2e <critical_factorization+0x1a>
  402b4a:	f04f 0801 	mov.w	r8, #1
  402b4e:	f8c2 e000 	str.w	lr, [r2]
  402b52:	4644      	mov	r4, r8
  402b54:	2500      	movs	r5, #0
  402b56:	f04f 37ff 	mov.w	r7, #4294967295
  402b5a:	192b      	adds	r3, r5, r4
  402b5c:	4299      	cmp	r1, r3
  402b5e:	eb00 0e07 	add.w	lr, r0, r7
  402b62:	d90e      	bls.n	402b82 <critical_factorization+0x6e>
  402b64:	f81e e004 	ldrb.w	lr, [lr, r4]
  402b68:	f810 c003 	ldrb.w	ip, [r0, r3]
  402b6c:	45f4      	cmp	ip, lr
  402b6e:	d918      	bls.n	402ba2 <critical_factorization+0x8e>
  402b70:	461d      	mov	r5, r3
  402b72:	2401      	movs	r4, #1
  402b74:	eba3 0807 	sub.w	r8, r3, r7
  402b78:	192b      	adds	r3, r5, r4
  402b7a:	4299      	cmp	r1, r3
  402b7c:	eb00 0e07 	add.w	lr, r0, r7
  402b80:	d8f0      	bhi.n	402b64 <critical_factorization+0x50>
  402b82:	3701      	adds	r7, #1
  402b84:	1c70      	adds	r0, r6, #1
  402b86:	4287      	cmp	r7, r0
  402b88:	bf24      	itt	cs
  402b8a:	f8c2 8000 	strcs.w	r8, [r2]
  402b8e:	4638      	movcs	r0, r7
  402b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402b94:	d00c      	beq.n	402bb0 <critical_factorization+0x9c>
  402b96:	f04f 0e01 	mov.w	lr, #1
  402b9a:	462e      	mov	r6, r5
  402b9c:	4674      	mov	r4, lr
  402b9e:	4475      	add	r5, lr
  402ba0:	e7c0      	b.n	402b24 <critical_factorization+0x10>
  402ba2:	d00b      	beq.n	402bbc <critical_factorization+0xa8>
  402ba4:	f04f 0801 	mov.w	r8, #1
  402ba8:	462f      	mov	r7, r5
  402baa:	4644      	mov	r4, r8
  402bac:	4445      	add	r5, r8
  402bae:	e7d4      	b.n	402b5a <critical_factorization+0x46>
  402bb0:	4574      	cmp	r4, lr
  402bb2:	bf12      	itee	ne
  402bb4:	3401      	addne	r4, #1
  402bb6:	461d      	moveq	r5, r3
  402bb8:	2401      	moveq	r4, #1
  402bba:	e7b3      	b.n	402b24 <critical_factorization+0x10>
  402bbc:	4544      	cmp	r4, r8
  402bbe:	bf12      	itee	ne
  402bc0:	3401      	addne	r4, #1
  402bc2:	461d      	moveq	r5, r3
  402bc4:	2401      	moveq	r4, #1
  402bc6:	e7c8      	b.n	402b5a <critical_factorization+0x46>

00402bc8 <two_way_long_needle>:
  402bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bcc:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  402bd0:	4616      	mov	r6, r2
  402bd2:	4605      	mov	r5, r0
  402bd4:	468b      	mov	fp, r1
  402bd6:	4610      	mov	r0, r2
  402bd8:	4619      	mov	r1, r3
  402bda:	aa03      	add	r2, sp, #12
  402bdc:	461c      	mov	r4, r3
  402bde:	f7ff ff99 	bl	402b14 <critical_factorization>
  402be2:	ab03      	add	r3, sp, #12
  402be4:	4681      	mov	r9, r0
  402be6:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  402bea:	f843 4f04 	str.w	r4, [r3, #4]!
  402bee:	4293      	cmp	r3, r2
  402bf0:	d1fb      	bne.n	402bea <two_way_long_needle+0x22>
  402bf2:	b14c      	cbz	r4, 402c08 <two_way_long_needle+0x40>
  402bf4:	1e63      	subs	r3, r4, #1
  402bf6:	1e72      	subs	r2, r6, #1
  402bf8:	a804      	add	r0, sp, #16
  402bfa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402bfe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  402c02:	f113 33ff 	adds.w	r3, r3, #4294967295
  402c06:	d2f8      	bcs.n	402bfa <two_way_long_needle+0x32>
  402c08:	9903      	ldr	r1, [sp, #12]
  402c0a:	464a      	mov	r2, r9
  402c0c:	4431      	add	r1, r6
  402c0e:	4630      	mov	r0, r6
  402c10:	f000 fa66 	bl	4030e0 <memcmp>
  402c14:	2800      	cmp	r0, #0
  402c16:	d16f      	bne.n	402cf8 <two_way_long_needle+0x130>
  402c18:	f109 33ff 	add.w	r3, r9, #4294967295
  402c1c:	9300      	str	r3, [sp, #0]
  402c1e:	18f3      	adds	r3, r6, r3
  402c20:	4682      	mov	sl, r0
  402c22:	9301      	str	r3, [sp, #4]
  402c24:	4623      	mov	r3, r4
  402c26:	4680      	mov	r8, r0
  402c28:	4654      	mov	r4, sl
  402c2a:	4658      	mov	r0, fp
  402c2c:	469a      	mov	sl, r3
  402c2e:	eb08 070a 	add.w	r7, r8, sl
  402c32:	1a3a      	subs	r2, r7, r0
  402c34:	2100      	movs	r1, #0
  402c36:	4428      	add	r0, r5
  402c38:	f000 fa02 	bl	403040 <memchr>
  402c3c:	2800      	cmp	r0, #0
  402c3e:	d156      	bne.n	402cee <two_way_long_needle+0x126>
  402c40:	2f00      	cmp	r7, #0
  402c42:	d054      	beq.n	402cee <two_way_long_needle+0x126>
  402c44:	19eb      	adds	r3, r5, r7
  402c46:	aa04      	add	r2, sp, #16
  402c48:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402c50:	b14b      	cbz	r3, 402c66 <two_way_long_needle+0x9e>
  402c52:	b124      	cbz	r4, 402c5e <two_way_long_needle+0x96>
  402c54:	9a03      	ldr	r2, [sp, #12]
  402c56:	4293      	cmp	r3, r2
  402c58:	d201      	bcs.n	402c5e <two_way_long_needle+0x96>
  402c5a:	ebaa 0302 	sub.w	r3, sl, r2
  402c5e:	4498      	add	r8, r3
  402c60:	2400      	movs	r4, #0
  402c62:	4638      	mov	r0, r7
  402c64:	e7e3      	b.n	402c2e <two_way_long_needle+0x66>
  402c66:	454c      	cmp	r4, r9
  402c68:	4623      	mov	r3, r4
  402c6a:	f10a 3eff 	add.w	lr, sl, #4294967295
  402c6e:	bf38      	it	cc
  402c70:	464b      	movcc	r3, r9
  402c72:	4573      	cmp	r3, lr
  402c74:	d213      	bcs.n	402c9e <two_way_long_needle+0xd6>
  402c76:	eb08 0203 	add.w	r2, r8, r3
  402c7a:	f816 c003 	ldrb.w	ip, [r6, r3]
  402c7e:	5ca8      	ldrb	r0, [r5, r2]
  402c80:	4584      	cmp	ip, r0
  402c82:	442a      	add	r2, r5
  402c84:	eb06 0103 	add.w	r1, r6, r3
  402c88:	d006      	beq.n	402c98 <two_way_long_needle+0xd0>
  402c8a:	e02c      	b.n	402ce6 <two_way_long_needle+0x11e>
  402c8c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  402c90:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402c94:	4584      	cmp	ip, r0
  402c96:	d126      	bne.n	402ce6 <two_way_long_needle+0x11e>
  402c98:	3301      	adds	r3, #1
  402c9a:	4573      	cmp	r3, lr
  402c9c:	d3f6      	bcc.n	402c8c <two_way_long_needle+0xc4>
  402c9e:	454c      	cmp	r4, r9
  402ca0:	9900      	ldr	r1, [sp, #0]
  402ca2:	f080 8089 	bcs.w	402db8 <two_way_long_needle+0x1f0>
  402ca6:	9b00      	ldr	r3, [sp, #0]
  402ca8:	eb08 0203 	add.w	r2, r8, r3
  402cac:	9b01      	ldr	r3, [sp, #4]
  402cae:	5ca8      	ldrb	r0, [r5, r2]
  402cb0:	781b      	ldrb	r3, [r3, #0]
  402cb2:	4298      	cmp	r0, r3
  402cb4:	442a      	add	r2, r5
  402cb6:	d17f      	bne.n	402db8 <two_way_long_needle+0x1f0>
  402cb8:	9801      	ldr	r0, [sp, #4]
  402cba:	f104 3bff 	add.w	fp, r4, #4294967295
  402cbe:	e006      	b.n	402cce <two_way_long_needle+0x106>
  402cc0:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402cc4:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402cc8:	45f4      	cmp	ip, lr
  402cca:	d103      	bne.n	402cd4 <two_way_long_needle+0x10c>
  402ccc:	4619      	mov	r1, r3
  402cce:	1e4b      	subs	r3, r1, #1
  402cd0:	459b      	cmp	fp, r3
  402cd2:	d1f5      	bne.n	402cc0 <two_way_long_needle+0xf8>
  402cd4:	3401      	adds	r4, #1
  402cd6:	428c      	cmp	r4, r1
  402cd8:	d870      	bhi.n	402dbc <two_way_long_needle+0x1f4>
  402cda:	9c03      	ldr	r4, [sp, #12]
  402cdc:	4638      	mov	r0, r7
  402cde:	44a0      	add	r8, r4
  402ce0:	ebaa 0404 	sub.w	r4, sl, r4
  402ce4:	e7a3      	b.n	402c2e <two_way_long_needle+0x66>
  402ce6:	f1c9 0201 	rsb	r2, r9, #1
  402cea:	4490      	add	r8, r2
  402cec:	e7b7      	b.n	402c5e <two_way_long_needle+0x96>
  402cee:	2000      	movs	r0, #0
  402cf0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cf8:	eba4 0309 	sub.w	r3, r4, r9
  402cfc:	454b      	cmp	r3, r9
  402cfe:	bf38      	it	cc
  402d00:	464b      	movcc	r3, r9
  402d02:	3301      	adds	r3, #1
  402d04:	f109 38ff 	add.w	r8, r9, #4294967295
  402d08:	9303      	str	r3, [sp, #12]
  402d0a:	eb06 0308 	add.w	r3, r6, r8
  402d0e:	4658      	mov	r0, fp
  402d10:	f04f 0a00 	mov.w	sl, #0
  402d14:	46cb      	mov	fp, r9
  402d16:	4699      	mov	r9, r3
  402d18:	eb0a 0704 	add.w	r7, sl, r4
  402d1c:	1a3a      	subs	r2, r7, r0
  402d1e:	2100      	movs	r1, #0
  402d20:	4428      	add	r0, r5
  402d22:	f000 f98d 	bl	403040 <memchr>
  402d26:	2800      	cmp	r0, #0
  402d28:	d1e1      	bne.n	402cee <two_way_long_needle+0x126>
  402d2a:	2f00      	cmp	r7, #0
  402d2c:	d0df      	beq.n	402cee <two_way_long_needle+0x126>
  402d2e:	19eb      	adds	r3, r5, r7
  402d30:	aa04      	add	r2, sp, #16
  402d32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402d3a:	bba3      	cbnz	r3, 402da6 <two_way_long_needle+0x1de>
  402d3c:	1e61      	subs	r1, r4, #1
  402d3e:	458b      	cmp	fp, r1
  402d40:	d215      	bcs.n	402d6e <two_way_long_needle+0x1a6>
  402d42:	eb0a 020b 	add.w	r2, sl, fp
  402d46:	f816 300b 	ldrb.w	r3, [r6, fp]
  402d4a:	f815 e002 	ldrb.w	lr, [r5, r2]
  402d4e:	459e      	cmp	lr, r3
  402d50:	442a      	add	r2, r5
  402d52:	eb06 000b 	add.w	r0, r6, fp
  402d56:	465b      	mov	r3, fp
  402d58:	d006      	beq.n	402d68 <two_way_long_needle+0x1a0>
  402d5a:	e027      	b.n	402dac <two_way_long_needle+0x1e4>
  402d5c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  402d60:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402d64:	45f4      	cmp	ip, lr
  402d66:	d121      	bne.n	402dac <two_way_long_needle+0x1e4>
  402d68:	3301      	adds	r3, #1
  402d6a:	428b      	cmp	r3, r1
  402d6c:	d3f6      	bcc.n	402d5c <two_way_long_needle+0x194>
  402d6e:	f1b8 3fff 	cmp.w	r8, #4294967295
  402d72:	d011      	beq.n	402d98 <two_way_long_needle+0x1d0>
  402d74:	eb0a 0208 	add.w	r2, sl, r8
  402d78:	f899 1000 	ldrb.w	r1, [r9]
  402d7c:	5cab      	ldrb	r3, [r5, r2]
  402d7e:	4299      	cmp	r1, r3
  402d80:	442a      	add	r2, r5
  402d82:	d10f      	bne.n	402da4 <two_way_long_needle+0x1dc>
  402d84:	464b      	mov	r3, r9
  402d86:	e005      	b.n	402d94 <two_way_long_needle+0x1cc>
  402d88:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402d8c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402d90:	4288      	cmp	r0, r1
  402d92:	d107      	bne.n	402da4 <two_way_long_needle+0x1dc>
  402d94:	42b3      	cmp	r3, r6
  402d96:	d1f7      	bne.n	402d88 <two_way_long_needle+0x1c0>
  402d98:	eb05 000a 	add.w	r0, r5, sl
  402d9c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402da4:	9b03      	ldr	r3, [sp, #12]
  402da6:	449a      	add	sl, r3
  402da8:	4638      	mov	r0, r7
  402daa:	e7b5      	b.n	402d18 <two_way_long_needle+0x150>
  402dac:	f1cb 0201 	rsb	r2, fp, #1
  402db0:	4492      	add	sl, r2
  402db2:	449a      	add	sl, r3
  402db4:	4638      	mov	r0, r7
  402db6:	e7af      	b.n	402d18 <two_way_long_needle+0x150>
  402db8:	4649      	mov	r1, r9
  402dba:	e78b      	b.n	402cd4 <two_way_long_needle+0x10c>
  402dbc:	eb05 0008 	add.w	r0, r5, r8
  402dc0:	e796      	b.n	402cf0 <two_way_long_needle+0x128>
  402dc2:	bf00      	nop

00402dc4 <strstr>:
  402dc4:	7802      	ldrb	r2, [r0, #0]
  402dc6:	2a00      	cmp	r2, #0
  402dc8:	f000 8101 	beq.w	402fce <strstr+0x20a>
  402dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dd0:	f891 8000 	ldrb.w	r8, [r1]
  402dd4:	b085      	sub	sp, #20
  402dd6:	4644      	mov	r4, r8
  402dd8:	f1b8 0f00 	cmp.w	r8, #0
  402ddc:	d016      	beq.n	402e0c <strstr+0x48>
  402dde:	4686      	mov	lr, r0
  402de0:	f101 0c01 	add.w	ip, r1, #1
  402de4:	2701      	movs	r7, #1
  402de6:	e003      	b.n	402df0 <strstr+0x2c>
  402de8:	f813 4b01 	ldrb.w	r4, [r3], #1
  402dec:	b16c      	cbz	r4, 402e0a <strstr+0x46>
  402dee:	469c      	mov	ip, r3
  402df0:	42a2      	cmp	r2, r4
  402df2:	bf14      	ite	ne
  402df4:	2700      	movne	r7, #0
  402df6:	f007 0701 	andeq.w	r7, r7, #1
  402dfa:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  402dfe:	4663      	mov	r3, ip
  402e00:	2a00      	cmp	r2, #0
  402e02:	d1f1      	bne.n	402de8 <strstr+0x24>
  402e04:	f89c 3000 	ldrb.w	r3, [ip]
  402e08:	b9fb      	cbnz	r3, 402e4a <strstr+0x86>
  402e0a:	b117      	cbz	r7, 402e12 <strstr+0x4e>
  402e0c:	b005      	add	sp, #20
  402e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e12:	460e      	mov	r6, r1
  402e14:	4605      	mov	r5, r0
  402e16:	4641      	mov	r1, r8
  402e18:	3001      	adds	r0, #1
  402e1a:	ebac 0406 	sub.w	r4, ip, r6
  402e1e:	f000 f98f 	bl	403140 <strchr>
  402e22:	4607      	mov	r7, r0
  402e24:	b188      	cbz	r0, 402e4a <strstr+0x86>
  402e26:	2c01      	cmp	r4, #1
  402e28:	d0f0      	beq.n	402e0c <strstr+0x48>
  402e2a:	1928      	adds	r0, r5, r4
  402e2c:	4287      	cmp	r7, r0
  402e2e:	bf94      	ite	ls
  402e30:	1bc1      	subls	r1, r0, r7
  402e32:	2101      	movhi	r1, #1
  402e34:	2c1f      	cmp	r4, #31
  402e36:	468b      	mov	fp, r1
  402e38:	d90b      	bls.n	402e52 <strstr+0x8e>
  402e3a:	4623      	mov	r3, r4
  402e3c:	4632      	mov	r2, r6
  402e3e:	4638      	mov	r0, r7
  402e40:	f7ff fec2 	bl	402bc8 <two_way_long_needle>
  402e44:	b005      	add	sp, #20
  402e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e4a:	2000      	movs	r0, #0
  402e4c:	b005      	add	sp, #20
  402e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e52:	aa03      	add	r2, sp, #12
  402e54:	4621      	mov	r1, r4
  402e56:	4630      	mov	r0, r6
  402e58:	f7ff fe5c 	bl	402b14 <critical_factorization>
  402e5c:	9903      	ldr	r1, [sp, #12]
  402e5e:	4680      	mov	r8, r0
  402e60:	4602      	mov	r2, r0
  402e62:	4431      	add	r1, r6
  402e64:	4630      	mov	r0, r6
  402e66:	f000 f93b 	bl	4030e0 <memcmp>
  402e6a:	2800      	cmp	r0, #0
  402e6c:	d157      	bne.n	402f1e <strstr+0x15a>
  402e6e:	f108 33ff 	add.w	r3, r8, #4294967295
  402e72:	9300      	str	r3, [sp, #0]
  402e74:	18f3      	adds	r3, r6, r3
  402e76:	4681      	mov	r9, r0
  402e78:	4605      	mov	r5, r0
  402e7a:	9301      	str	r3, [sp, #4]
  402e7c:	4658      	mov	r0, fp
  402e7e:	46b2      	mov	sl, r6
  402e80:	1966      	adds	r6, r4, r5
  402e82:	1a32      	subs	r2, r6, r0
  402e84:	2100      	movs	r1, #0
  402e86:	4438      	add	r0, r7
  402e88:	f000 f8da 	bl	403040 <memchr>
  402e8c:	2800      	cmp	r0, #0
  402e8e:	d1dc      	bne.n	402e4a <strstr+0x86>
  402e90:	2e00      	cmp	r6, #0
  402e92:	d0da      	beq.n	402e4a <strstr+0x86>
  402e94:	45c8      	cmp	r8, r9
  402e96:	4643      	mov	r3, r8
  402e98:	bf38      	it	cc
  402e9a:	464b      	movcc	r3, r9
  402e9c:	429c      	cmp	r4, r3
  402e9e:	d912      	bls.n	402ec6 <strstr+0x102>
  402ea0:	195a      	adds	r2, r3, r5
  402ea2:	f81a 1003 	ldrb.w	r1, [sl, r3]
  402ea6:	5cb8      	ldrb	r0, [r7, r2]
  402ea8:	4281      	cmp	r1, r0
  402eaa:	443a      	add	r2, r7
  402eac:	eb0a 0e03 	add.w	lr, sl, r3
  402eb0:	d006      	beq.n	402ec0 <strstr+0xfc>
  402eb2:	e02c      	b.n	402f0e <strstr+0x14a>
  402eb4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  402eb8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  402ebc:	4288      	cmp	r0, r1
  402ebe:	d126      	bne.n	402f0e <strstr+0x14a>
  402ec0:	3301      	adds	r3, #1
  402ec2:	429c      	cmp	r4, r3
  402ec4:	d1f6      	bne.n	402eb4 <strstr+0xf0>
  402ec6:	45c8      	cmp	r8, r9
  402ec8:	9900      	ldr	r1, [sp, #0]
  402eca:	f240 8083 	bls.w	402fd4 <strstr+0x210>
  402ece:	9b00      	ldr	r3, [sp, #0]
  402ed0:	18ea      	adds	r2, r5, r3
  402ed2:	9b01      	ldr	r3, [sp, #4]
  402ed4:	5cb8      	ldrb	r0, [r7, r2]
  402ed6:	781b      	ldrb	r3, [r3, #0]
  402ed8:	4298      	cmp	r0, r3
  402eda:	443a      	add	r2, r7
  402edc:	d17a      	bne.n	402fd4 <strstr+0x210>
  402ede:	9801      	ldr	r0, [sp, #4]
  402ee0:	f109 3bff 	add.w	fp, r9, #4294967295
  402ee4:	e006      	b.n	402ef4 <strstr+0x130>
  402ee6:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402eea:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  402eee:	45f4      	cmp	ip, lr
  402ef0:	d103      	bne.n	402efa <strstr+0x136>
  402ef2:	4619      	mov	r1, r3
  402ef4:	1e4b      	subs	r3, r1, #1
  402ef6:	455b      	cmp	r3, fp
  402ef8:	d1f5      	bne.n	402ee6 <strstr+0x122>
  402efa:	f109 0901 	add.w	r9, r9, #1
  402efe:	4589      	cmp	r9, r1
  402f00:	d857      	bhi.n	402fb2 <strstr+0x1ee>
  402f02:	9b03      	ldr	r3, [sp, #12]
  402f04:	4630      	mov	r0, r6
  402f06:	441d      	add	r5, r3
  402f08:	eba4 0903 	sub.w	r9, r4, r3
  402f0c:	e7b8      	b.n	402e80 <strstr+0xbc>
  402f0e:	f1c8 0201 	rsb	r2, r8, #1
  402f12:	4415      	add	r5, r2
  402f14:	441d      	add	r5, r3
  402f16:	f04f 0900 	mov.w	r9, #0
  402f1a:	4630      	mov	r0, r6
  402f1c:	e7b0      	b.n	402e80 <strstr+0xbc>
  402f1e:	eba4 0308 	sub.w	r3, r4, r8
  402f22:	4543      	cmp	r3, r8
  402f24:	bf38      	it	cc
  402f26:	4643      	movcc	r3, r8
  402f28:	3301      	adds	r3, #1
  402f2a:	f108 39ff 	add.w	r9, r8, #4294967295
  402f2e:	9303      	str	r3, [sp, #12]
  402f30:	eb06 0309 	add.w	r3, r6, r9
  402f34:	4658      	mov	r0, fp
  402f36:	2500      	movs	r5, #0
  402f38:	46bb      	mov	fp, r7
  402f3a:	469a      	mov	sl, r3
  402f3c:	1967      	adds	r7, r4, r5
  402f3e:	1a3a      	subs	r2, r7, r0
  402f40:	2100      	movs	r1, #0
  402f42:	4458      	add	r0, fp
  402f44:	f000 f87c 	bl	403040 <memchr>
  402f48:	2800      	cmp	r0, #0
  402f4a:	f47f af7e 	bne.w	402e4a <strstr+0x86>
  402f4e:	2f00      	cmp	r7, #0
  402f50:	f43f af7b 	beq.w	402e4a <strstr+0x86>
  402f54:	4544      	cmp	r4, r8
  402f56:	d915      	bls.n	402f84 <strstr+0x1c0>
  402f58:	eb08 0205 	add.w	r2, r8, r5
  402f5c:	f816 3008 	ldrb.w	r3, [r6, r8]
  402f60:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402f64:	4298      	cmp	r0, r3
  402f66:	445a      	add	r2, fp
  402f68:	eb06 0108 	add.w	r1, r6, r8
  402f6c:	4643      	mov	r3, r8
  402f6e:	d006      	beq.n	402f7e <strstr+0x1ba>
  402f70:	e023      	b.n	402fba <strstr+0x1f6>
  402f72:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  402f76:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  402f7a:	4586      	cmp	lr, r0
  402f7c:	d11d      	bne.n	402fba <strstr+0x1f6>
  402f7e:	3301      	adds	r3, #1
  402f80:	429c      	cmp	r4, r3
  402f82:	d1f6      	bne.n	402f72 <strstr+0x1ae>
  402f84:	f1b9 3fff 	cmp.w	r9, #4294967295
  402f88:	d012      	beq.n	402fb0 <strstr+0x1ec>
  402f8a:	eb05 0209 	add.w	r2, r5, r9
  402f8e:	f89a 3000 	ldrb.w	r3, [sl]
  402f92:	f81b 1002 	ldrb.w	r1, [fp, r2]
  402f96:	4299      	cmp	r1, r3
  402f98:	445a      	add	r2, fp
  402f9a:	d114      	bne.n	402fc6 <strstr+0x202>
  402f9c:	4653      	mov	r3, sl
  402f9e:	e005      	b.n	402fac <strstr+0x1e8>
  402fa0:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  402fa4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  402fa8:	4288      	cmp	r0, r1
  402faa:	d10c      	bne.n	402fc6 <strstr+0x202>
  402fac:	42b3      	cmp	r3, r6
  402fae:	d1f7      	bne.n	402fa0 <strstr+0x1dc>
  402fb0:	465f      	mov	r7, fp
  402fb2:	1978      	adds	r0, r7, r5
  402fb4:	b005      	add	sp, #20
  402fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fba:	f1c8 0201 	rsb	r2, r8, #1
  402fbe:	4415      	add	r5, r2
  402fc0:	441d      	add	r5, r3
  402fc2:	4638      	mov	r0, r7
  402fc4:	e7ba      	b.n	402f3c <strstr+0x178>
  402fc6:	9b03      	ldr	r3, [sp, #12]
  402fc8:	4638      	mov	r0, r7
  402fca:	441d      	add	r5, r3
  402fcc:	e7b6      	b.n	402f3c <strstr+0x178>
  402fce:	780b      	ldrb	r3, [r1, #0]
  402fd0:	b913      	cbnz	r3, 402fd8 <strstr+0x214>
  402fd2:	4770      	bx	lr
  402fd4:	4641      	mov	r1, r8
  402fd6:	e790      	b.n	402efa <strstr+0x136>
  402fd8:	2000      	movs	r0, #0
  402fda:	4770      	bx	lr

00402fdc <register_fini>:
  402fdc:	4b02      	ldr	r3, [pc, #8]	; (402fe8 <register_fini+0xc>)
  402fde:	b113      	cbz	r3, 402fe6 <register_fini+0xa>
  402fe0:	4802      	ldr	r0, [pc, #8]	; (402fec <register_fini+0x10>)
  402fe2:	f000 b805 	b.w	402ff0 <atexit>
  402fe6:	4770      	bx	lr
  402fe8:	00000000 	.word	0x00000000
  402fec:	00402ffd 	.word	0x00402ffd

00402ff0 <atexit>:
  402ff0:	2300      	movs	r3, #0
  402ff2:	4601      	mov	r1, r0
  402ff4:	461a      	mov	r2, r3
  402ff6:	4618      	mov	r0, r3
  402ff8:	f000 b916 	b.w	403228 <__register_exitproc>

00402ffc <__libc_fini_array>:
  402ffc:	b538      	push	{r3, r4, r5, lr}
  402ffe:	4c0a      	ldr	r4, [pc, #40]	; (403028 <__libc_fini_array+0x2c>)
  403000:	4d0a      	ldr	r5, [pc, #40]	; (40302c <__libc_fini_array+0x30>)
  403002:	1b64      	subs	r4, r4, r5
  403004:	10a4      	asrs	r4, r4, #2
  403006:	d00a      	beq.n	40301e <__libc_fini_array+0x22>
  403008:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40300c:	3b01      	subs	r3, #1
  40300e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403012:	3c01      	subs	r4, #1
  403014:	f855 3904 	ldr.w	r3, [r5], #-4
  403018:	4798      	blx	r3
  40301a:	2c00      	cmp	r4, #0
  40301c:	d1f9      	bne.n	403012 <__libc_fini_array+0x16>
  40301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403022:	f000 ba1b 	b.w	40345c <_fini>
  403026:	bf00      	nop
  403028:	0040346c 	.word	0x0040346c
  40302c:	00403468 	.word	0x00403468

00403030 <__retarget_lock_acquire_recursive>:
  403030:	4770      	bx	lr
  403032:	bf00      	nop

00403034 <__retarget_lock_release_recursive>:
  403034:	4770      	bx	lr
  403036:	bf00      	nop
	...

00403040 <memchr>:
  403040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403044:	2a10      	cmp	r2, #16
  403046:	db2b      	blt.n	4030a0 <memchr+0x60>
  403048:	f010 0f07 	tst.w	r0, #7
  40304c:	d008      	beq.n	403060 <memchr+0x20>
  40304e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403052:	3a01      	subs	r2, #1
  403054:	428b      	cmp	r3, r1
  403056:	d02d      	beq.n	4030b4 <memchr+0x74>
  403058:	f010 0f07 	tst.w	r0, #7
  40305c:	b342      	cbz	r2, 4030b0 <memchr+0x70>
  40305e:	d1f6      	bne.n	40304e <memchr+0xe>
  403060:	b4f0      	push	{r4, r5, r6, r7}
  403062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40306a:	f022 0407 	bic.w	r4, r2, #7
  40306e:	f07f 0700 	mvns.w	r7, #0
  403072:	2300      	movs	r3, #0
  403074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403078:	3c08      	subs	r4, #8
  40307a:	ea85 0501 	eor.w	r5, r5, r1
  40307e:	ea86 0601 	eor.w	r6, r6, r1
  403082:	fa85 f547 	uadd8	r5, r5, r7
  403086:	faa3 f587 	sel	r5, r3, r7
  40308a:	fa86 f647 	uadd8	r6, r6, r7
  40308e:	faa5 f687 	sel	r6, r5, r7
  403092:	b98e      	cbnz	r6, 4030b8 <memchr+0x78>
  403094:	d1ee      	bne.n	403074 <memchr+0x34>
  403096:	bcf0      	pop	{r4, r5, r6, r7}
  403098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40309c:	f002 0207 	and.w	r2, r2, #7
  4030a0:	b132      	cbz	r2, 4030b0 <memchr+0x70>
  4030a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4030a6:	3a01      	subs	r2, #1
  4030a8:	ea83 0301 	eor.w	r3, r3, r1
  4030ac:	b113      	cbz	r3, 4030b4 <memchr+0x74>
  4030ae:	d1f8      	bne.n	4030a2 <memchr+0x62>
  4030b0:	2000      	movs	r0, #0
  4030b2:	4770      	bx	lr
  4030b4:	3801      	subs	r0, #1
  4030b6:	4770      	bx	lr
  4030b8:	2d00      	cmp	r5, #0
  4030ba:	bf06      	itte	eq
  4030bc:	4635      	moveq	r5, r6
  4030be:	3803      	subeq	r0, #3
  4030c0:	3807      	subne	r0, #7
  4030c2:	f015 0f01 	tst.w	r5, #1
  4030c6:	d107      	bne.n	4030d8 <memchr+0x98>
  4030c8:	3001      	adds	r0, #1
  4030ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4030ce:	bf02      	ittt	eq
  4030d0:	3001      	addeq	r0, #1
  4030d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4030d6:	3001      	addeq	r0, #1
  4030d8:	bcf0      	pop	{r4, r5, r6, r7}
  4030da:	3801      	subs	r0, #1
  4030dc:	4770      	bx	lr
  4030de:	bf00      	nop

004030e0 <memcmp>:
  4030e0:	2a03      	cmp	r2, #3
  4030e2:	b470      	push	{r4, r5, r6}
  4030e4:	d922      	bls.n	40312c <memcmp+0x4c>
  4030e6:	ea40 0301 	orr.w	r3, r0, r1
  4030ea:	079b      	lsls	r3, r3, #30
  4030ec:	d011      	beq.n	403112 <memcmp+0x32>
  4030ee:	7803      	ldrb	r3, [r0, #0]
  4030f0:	780c      	ldrb	r4, [r1, #0]
  4030f2:	42a3      	cmp	r3, r4
  4030f4:	d11d      	bne.n	403132 <memcmp+0x52>
  4030f6:	440a      	add	r2, r1
  4030f8:	3101      	adds	r1, #1
  4030fa:	e005      	b.n	403108 <memcmp+0x28>
  4030fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403100:	f811 4b01 	ldrb.w	r4, [r1], #1
  403104:	42a3      	cmp	r3, r4
  403106:	d114      	bne.n	403132 <memcmp+0x52>
  403108:	4291      	cmp	r1, r2
  40310a:	d1f7      	bne.n	4030fc <memcmp+0x1c>
  40310c:	2000      	movs	r0, #0
  40310e:	bc70      	pop	{r4, r5, r6}
  403110:	4770      	bx	lr
  403112:	680d      	ldr	r5, [r1, #0]
  403114:	6806      	ldr	r6, [r0, #0]
  403116:	42ae      	cmp	r6, r5
  403118:	460c      	mov	r4, r1
  40311a:	4603      	mov	r3, r0
  40311c:	f101 0104 	add.w	r1, r1, #4
  403120:	f100 0004 	add.w	r0, r0, #4
  403124:	d108      	bne.n	403138 <memcmp+0x58>
  403126:	3a04      	subs	r2, #4
  403128:	2a03      	cmp	r2, #3
  40312a:	d8f2      	bhi.n	403112 <memcmp+0x32>
  40312c:	2a00      	cmp	r2, #0
  40312e:	d1de      	bne.n	4030ee <memcmp+0xe>
  403130:	e7ec      	b.n	40310c <memcmp+0x2c>
  403132:	1b18      	subs	r0, r3, r4
  403134:	bc70      	pop	{r4, r5, r6}
  403136:	4770      	bx	lr
  403138:	4621      	mov	r1, r4
  40313a:	4618      	mov	r0, r3
  40313c:	e7d7      	b.n	4030ee <memcmp+0xe>
  40313e:	bf00      	nop

00403140 <strchr>:
  403140:	b2c9      	uxtb	r1, r1
  403142:	2900      	cmp	r1, #0
  403144:	d041      	beq.n	4031ca <strchr+0x8a>
  403146:	0782      	lsls	r2, r0, #30
  403148:	b4f0      	push	{r4, r5, r6, r7}
  40314a:	d067      	beq.n	40321c <strchr+0xdc>
  40314c:	7803      	ldrb	r3, [r0, #0]
  40314e:	2b00      	cmp	r3, #0
  403150:	d068      	beq.n	403224 <strchr+0xe4>
  403152:	4299      	cmp	r1, r3
  403154:	d037      	beq.n	4031c6 <strchr+0x86>
  403156:	1c43      	adds	r3, r0, #1
  403158:	e004      	b.n	403164 <strchr+0x24>
  40315a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40315e:	b390      	cbz	r0, 4031c6 <strchr+0x86>
  403160:	4281      	cmp	r1, r0
  403162:	d02f      	beq.n	4031c4 <strchr+0x84>
  403164:	079a      	lsls	r2, r3, #30
  403166:	461c      	mov	r4, r3
  403168:	d1f7      	bne.n	40315a <strchr+0x1a>
  40316a:	6825      	ldr	r5, [r4, #0]
  40316c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  403170:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  403174:	ea83 0605 	eor.w	r6, r3, r5
  403178:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40317c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  403180:	ea20 0006 	bic.w	r0, r0, r6
  403184:	ea22 0205 	bic.w	r2, r2, r5
  403188:	4302      	orrs	r2, r0
  40318a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40318e:	d111      	bne.n	4031b4 <strchr+0x74>
  403190:	4620      	mov	r0, r4
  403192:	f850 6f04 	ldr.w	r6, [r0, #4]!
  403196:	ea83 0706 	eor.w	r7, r3, r6
  40319a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40319e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4031a2:	ea25 0507 	bic.w	r5, r5, r7
  4031a6:	ea22 0206 	bic.w	r2, r2, r6
  4031aa:	432a      	orrs	r2, r5
  4031ac:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4031b0:	d0ef      	beq.n	403192 <strchr+0x52>
  4031b2:	4604      	mov	r4, r0
  4031b4:	7820      	ldrb	r0, [r4, #0]
  4031b6:	b918      	cbnz	r0, 4031c0 <strchr+0x80>
  4031b8:	e005      	b.n	4031c6 <strchr+0x86>
  4031ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4031be:	b110      	cbz	r0, 4031c6 <strchr+0x86>
  4031c0:	4281      	cmp	r1, r0
  4031c2:	d1fa      	bne.n	4031ba <strchr+0x7a>
  4031c4:	4620      	mov	r0, r4
  4031c6:	bcf0      	pop	{r4, r5, r6, r7}
  4031c8:	4770      	bx	lr
  4031ca:	0783      	lsls	r3, r0, #30
  4031cc:	d024      	beq.n	403218 <strchr+0xd8>
  4031ce:	7803      	ldrb	r3, [r0, #0]
  4031d0:	2b00      	cmp	r3, #0
  4031d2:	d0f9      	beq.n	4031c8 <strchr+0x88>
  4031d4:	1c43      	adds	r3, r0, #1
  4031d6:	e003      	b.n	4031e0 <strchr+0xa0>
  4031d8:	7802      	ldrb	r2, [r0, #0]
  4031da:	3301      	adds	r3, #1
  4031dc:	2a00      	cmp	r2, #0
  4031de:	d0f3      	beq.n	4031c8 <strchr+0x88>
  4031e0:	0799      	lsls	r1, r3, #30
  4031e2:	4618      	mov	r0, r3
  4031e4:	d1f8      	bne.n	4031d8 <strchr+0x98>
  4031e6:	6819      	ldr	r1, [r3, #0]
  4031e8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4031ec:	ea22 0201 	bic.w	r2, r2, r1
  4031f0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4031f4:	d108      	bne.n	403208 <strchr+0xc8>
  4031f6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4031fa:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4031fe:	ea22 0201 	bic.w	r2, r2, r1
  403202:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403206:	d0f6      	beq.n	4031f6 <strchr+0xb6>
  403208:	781a      	ldrb	r2, [r3, #0]
  40320a:	4618      	mov	r0, r3
  40320c:	b142      	cbz	r2, 403220 <strchr+0xe0>
  40320e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403212:	2b00      	cmp	r3, #0
  403214:	d1fb      	bne.n	40320e <strchr+0xce>
  403216:	4770      	bx	lr
  403218:	4603      	mov	r3, r0
  40321a:	e7e4      	b.n	4031e6 <strchr+0xa6>
  40321c:	4604      	mov	r4, r0
  40321e:	e7a4      	b.n	40316a <strchr+0x2a>
  403220:	4618      	mov	r0, r3
  403222:	4770      	bx	lr
  403224:	4618      	mov	r0, r3
  403226:	e7ce      	b.n	4031c6 <strchr+0x86>

00403228 <__register_exitproc>:
  403228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40322c:	4d2c      	ldr	r5, [pc, #176]	; (4032e0 <__register_exitproc+0xb8>)
  40322e:	4606      	mov	r6, r0
  403230:	6828      	ldr	r0, [r5, #0]
  403232:	4698      	mov	r8, r3
  403234:	460f      	mov	r7, r1
  403236:	4691      	mov	r9, r2
  403238:	f7ff fefa 	bl	403030 <__retarget_lock_acquire_recursive>
  40323c:	4b29      	ldr	r3, [pc, #164]	; (4032e4 <__register_exitproc+0xbc>)
  40323e:	681c      	ldr	r4, [r3, #0]
  403240:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403244:	2b00      	cmp	r3, #0
  403246:	d03e      	beq.n	4032c6 <__register_exitproc+0x9e>
  403248:	685a      	ldr	r2, [r3, #4]
  40324a:	2a1f      	cmp	r2, #31
  40324c:	dc1c      	bgt.n	403288 <__register_exitproc+0x60>
  40324e:	f102 0e01 	add.w	lr, r2, #1
  403252:	b176      	cbz	r6, 403272 <__register_exitproc+0x4a>
  403254:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403258:	2401      	movs	r4, #1
  40325a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40325e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403262:	4094      	lsls	r4, r2
  403264:	4320      	orrs	r0, r4
  403266:	2e02      	cmp	r6, #2
  403268:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40326c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403270:	d023      	beq.n	4032ba <__register_exitproc+0x92>
  403272:	3202      	adds	r2, #2
  403274:	f8c3 e004 	str.w	lr, [r3, #4]
  403278:	6828      	ldr	r0, [r5, #0]
  40327a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40327e:	f7ff fed9 	bl	403034 <__retarget_lock_release_recursive>
  403282:	2000      	movs	r0, #0
  403284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403288:	4b17      	ldr	r3, [pc, #92]	; (4032e8 <__register_exitproc+0xc0>)
  40328a:	b30b      	cbz	r3, 4032d0 <__register_exitproc+0xa8>
  40328c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403290:	f3af 8000 	nop.w
  403294:	4603      	mov	r3, r0
  403296:	b1d8      	cbz	r0, 4032d0 <__register_exitproc+0xa8>
  403298:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40329c:	6002      	str	r2, [r0, #0]
  40329e:	2100      	movs	r1, #0
  4032a0:	6041      	str	r1, [r0, #4]
  4032a2:	460a      	mov	r2, r1
  4032a4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4032a8:	f04f 0e01 	mov.w	lr, #1
  4032ac:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4032b0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4032b4:	2e00      	cmp	r6, #0
  4032b6:	d0dc      	beq.n	403272 <__register_exitproc+0x4a>
  4032b8:	e7cc      	b.n	403254 <__register_exitproc+0x2c>
  4032ba:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4032be:	430c      	orrs	r4, r1
  4032c0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4032c4:	e7d5      	b.n	403272 <__register_exitproc+0x4a>
  4032c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4032ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4032ce:	e7bb      	b.n	403248 <__register_exitproc+0x20>
  4032d0:	6828      	ldr	r0, [r5, #0]
  4032d2:	f7ff feaf 	bl	403034 <__retarget_lock_release_recursive>
  4032d6:	f04f 30ff 	mov.w	r0, #4294967295
  4032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032de:	bf00      	nop
  4032e0:	20000438 	.word	0x20000438
  4032e4:	00403444 	.word	0x00403444
  4032e8:	00000000 	.word	0x00000000
  4032ec:	0001c200 	.word	0x0001c200
  4032f0:	000000c0 	.word	0x000000c0
  4032f4:	00000800 	.word	0x00000800
	...
  403304:	72617453 	.word	0x72617453
  403308:	72742074 	.word	0x72742074
  40330c:	66736e61 	.word	0x66736e61
  403310:	00007265 	.word	0x00007265
  403314:	656e6f4e 	.word	0x656e6f4e
  403318:	00000000 	.word	0x00000000
  40331c:	6f6c435b 	.word	0x6f6c435b
  403320:	3a646573 	.word	0x3a646573
  403324:	005d3020 	.word	0x005d3020
  403328:	4c4c4146 	.word	0x4c4c4146
  40332c:	00000000 	.word	0x00000000
  403330:	59414b4f 	.word	0x59414b4f
  403334:	00000000 	.word	0x00000000
  403338:	70747468 	.word	0x70747468
  40333c:	7465675f 	.word	0x7465675f
  403340:	206f2d20 	.word	0x206f2d20
  403344:	312e3831 	.word	0x312e3831
  403348:	312e3139 	.word	0x312e3139
  40334c:	322e3230 	.word	0x322e3230
  403350:	383a3734 	.word	0x383a3734
  403354:	2f303030 	.word	0x2f303030
  403358:	6c6c6166 	.word	0x6c6c6166
  40335c:	6f666e69 	.word	0x6f666e69
  403360:	00000a0d 	.word	0x00000a0d
  403364:	70747468 	.word	0x70747468
  403368:	6165725f 	.word	0x6165725f
  40336c:	74735f64 	.word	0x74735f64
  403370:	73757461 	.word	0x73757461
  403374:	0a0d3020 	.word	0x0a0d3020
  403378:	00000000 	.word	0x00000000
  40337c:	64616572 	.word	0x64616572
  403380:	31203020 	.word	0x31203020
  403384:	0d303030 	.word	0x0d303030
  403388:	0000000a 	.word	0x0000000a
  40338c:	20746573 	.word	0x20746573
  403390:	74726175 	.word	0x74726175
  403394:	6f6c662e 	.word	0x6f6c662e
  403398:	20302077 	.word	0x20302077
  40339c:	0d206e6f 	.word	0x0d206e6f
  4033a0:	0000000a 	.word	0x0000000a
  4033a4:	20746573 	.word	0x20746573
  4033a8:	63207562 	.word	0x63207562
  4033ac:	35207220 	.word	0x35207220
  4033b0:	20303030 	.word	0x20303030
  4033b4:	00000a0d 	.word	0x00000a0d
  4033b8:	20746573 	.word	0x20746573
  4033bc:	69207973 	.word	0x69207973
  4033c0:	77206720 	.word	0x77206720
  4033c4:	206e616c 	.word	0x206e616c
  4033c8:	0d203032 	.word	0x0d203032
  4033cc:	0000000a 	.word	0x0000000a
  4033d0:	20746573 	.word	0x20746573
  4033d4:	69207973 	.word	0x69207973
  4033d8:	6e206720 	.word	0x6e206720
  4033dc:	6f777465 	.word	0x6f777465
  4033e0:	31206b72 	.word	0x31206b72
  4033e4:	0a0d2038 	.word	0x0a0d2038
  4033e8:	00000000 	.word	0x00000000
  4033ec:	20746573 	.word	0x20746573
  4033f0:	69207973 	.word	0x69207973
  4033f4:	73206720 	.word	0x73206720
  4033f8:	6174666f 	.word	0x6174666f
  4033fc:	31322070 	.word	0x31322070
  403400:	000a0d20 	.word	0x000a0d20
  403404:	20746573 	.word	0x20746573
  403408:	63207973 	.word	0x63207973
  40340c:	31206720 	.word	0x31206720
  403410:	0a0d2036 	.word	0x0a0d2036
  403414:	00000000 	.word	0x00000000
  403418:	20746573 	.word	0x20746573
  40341c:	6e206c77 	.word	0x6e206c77
  403420:	31206f20 	.word	0x31206f20
  403424:	0a0d2033 	.word	0x0a0d2033
  403428:	00000000 	.word	0x00000000
  40342c:	65766173 	.word	0x65766173
  403430:	000a0d20 	.word	0x000a0d20
  403434:	75746573 	.word	0x75746573
  403438:	65772070 	.word	0x65772070
  40343c:	0a0d2062 	.word	0x0a0d2062
  403440:	00000000 	.word	0x00000000

00403444 <_global_impure_ptr>:
  403444:	20000010                                ... 

00403448 <_init>:
  403448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40344a:	bf00      	nop
  40344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40344e:	bc08      	pop	{r3}
  403450:	469e      	mov	lr, r3
  403452:	4770      	bx	lr

00403454 <__init_array_start>:
  403454:	00402fdd 	.word	0x00402fdd

00403458 <__frame_dummy_init_array_entry>:
  403458:	004000f1                                ..@.

0040345c <_fini>:
  40345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40345e:	bf00      	nop
  403460:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403462:	bc08      	pop	{r3}
  403464:	469e      	mov	lr, r3
  403466:	4770      	bx	lr

00403468 <__fini_array_start>:
  403468:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <okay_flag>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08f0 2000                                   ... 
