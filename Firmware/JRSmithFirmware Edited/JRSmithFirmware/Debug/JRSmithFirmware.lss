
JRSmithFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d94  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409d94  00409d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .got          0000024c  00409d9c  00409d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .got.plt      0000000c  00409fe8  00409fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .relocate     000009c0  20000000  00409ff4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          00005354  200009c0  0040a9b4  000209c0  2**2
                  ALLOC
  6 .stack        00003004  20005d14  0040fd08  000209c0  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000209ea  2**0
                  CONTENTS, READONLY
  9 .debug_info   000178b9  00000000  00000000  00020a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f3c  00000000  00000000  000382fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f84  00000000  00000000  0003b238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c60  00000000  00000000  000421bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b58  00000000  00000000  00042e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000078a7  00000000  00000000  00043974  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f818  00000000  00000000  0004b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0004f3bc  00000000  00000000  0005aa33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000041cc  00000000  00000000  000a9df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 8d 00 20 8d 31 40 00 71 32 40 00 71 32 40 00     ... .1@.q2@.q2@.
  400010:	71 32 40 00 71 32 40 00 71 32 40 00 00 00 00 00     q2@.q2@.q2@.....
	...
  40002c:	71 32 40 00 71 32 40 00 00 00 00 00 71 32 40 00     q2@.q2@.....q2@.
  40003c:	71 32 40 00 71 32 40 00 71 32 40 00 71 32 40 00     q2@.q2@.q2@.q2@.
  40004c:	71 32 40 00 71 32 40 00 71 32 40 00 71 32 40 00     q2@.q2@.q2@.q2@.
  40005c:	00 00 00 00 71 32 40 00 71 32 40 00 00 00 00 00     ....q2@.q2@.....
  40006c:	19 03 40 00 3d 03 40 00 00 00 00 00 99 29 40 00     ..@.=.@......)@.
  40007c:	71 32 40 00 00 00 00 00 00 00 00 00 71 32 40 00     q2@.........q2@.
  40008c:	71 32 40 00 71 32 40 00 71 32 40 00 71 32 40 00     q2@.q2@.q2@.q2@.
  40009c:	8d 27 40 00 71 32 40 00 71 32 40 00 00 00 00 00     .'@.q2@.q2@.....
	...
  4000b4:	71 32 40 00 71 32 40 00 71 32 40 00 71 32 40 00     q2@.q2@.q2@.q2@.
  4000c4:	71 32 40 00 71 32 40 00                             q2@.q2@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009c0 	.word	0x200009c0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409d9c 	.word	0x00409d9c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00409d9c 	.word	0x00409d9c
  40012c:	200009c4 	.word	0x200009c4
  400130:	00409d9c 	.word	0x00409d9c
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b590      	push	{r4, r7, lr}
  40013a:	b085      	sub	sp, #20
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
  400142:	4c37      	ldr	r4, [pc, #220]	; (400220 <pio_handler_process+0xe8>)
  400144:	447c      	add	r4, pc
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400146:	6878      	ldr	r0, [r7, #4]
  400148:	4b36      	ldr	r3, [pc, #216]	; (400224 <pio_handler_process+0xec>)
  40014a:	58e3      	ldr	r3, [r4, r3]
  40014c:	4798      	blx	r3
  40014e:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400150:	6878      	ldr	r0, [r7, #4]
  400152:	4b35      	ldr	r3, [pc, #212]	; (400228 <pio_handler_process+0xf0>)
  400154:	58e3      	ldr	r3, [r4, r3]
  400156:	4798      	blx	r3
  400158:	4602      	mov	r2, r0
  40015a:	68fb      	ldr	r3, [r7, #12]
  40015c:	4013      	ands	r3, r2
  40015e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400160:	68fb      	ldr	r3, [r7, #12]
  400162:	2b00      	cmp	r3, #0
  400164:	d048      	beq.n	4001f8 <pio_handler_process+0xc0>
		/* Find triggering source */
		i = 0;
  400166:	2300      	movs	r3, #0
  400168:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40016a:	e040      	b.n	4001ee <pio_handler_process+0xb6>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40016c:	4b2f      	ldr	r3, [pc, #188]	; (40022c <pio_handler_process+0xf4>)
  40016e:	447b      	add	r3, pc
  400170:	461a      	mov	r2, r3
  400172:	68bb      	ldr	r3, [r7, #8]
  400174:	011b      	lsls	r3, r3, #4
  400176:	4413      	add	r3, r2
  400178:	681a      	ldr	r2, [r3, #0]
  40017a:	683b      	ldr	r3, [r7, #0]
  40017c:	429a      	cmp	r2, r3
  40017e:	d130      	bne.n	4001e2 <pio_handler_process+0xaa>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400180:	4b2b      	ldr	r3, [pc, #172]	; (400230 <pio_handler_process+0xf8>)
  400182:	447b      	add	r3, pc
  400184:	461a      	mov	r2, r3
  400186:	68bb      	ldr	r3, [r7, #8]
  400188:	011b      	lsls	r3, r3, #4
  40018a:	4413      	add	r3, r2
  40018c:	3304      	adds	r3, #4
  40018e:	681a      	ldr	r2, [r3, #0]
  400190:	68fb      	ldr	r3, [r7, #12]
  400192:	4013      	ands	r3, r2
  400194:	2b00      	cmp	r3, #0
  400196:	d024      	beq.n	4001e2 <pio_handler_process+0xaa>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400198:	4b26      	ldr	r3, [pc, #152]	; (400234 <pio_handler_process+0xfc>)
  40019a:	447b      	add	r3, pc
  40019c:	461a      	mov	r2, r3
  40019e:	68bb      	ldr	r3, [r7, #8]
  4001a0:	011b      	lsls	r3, r3, #4
  4001a2:	4413      	add	r3, r2
  4001a4:	330c      	adds	r3, #12
  4001a6:	681b      	ldr	r3, [r3, #0]
  4001a8:	4a23      	ldr	r2, [pc, #140]	; (400238 <pio_handler_process+0x100>)
  4001aa:	447a      	add	r2, pc
  4001ac:	4611      	mov	r1, r2
  4001ae:	68ba      	ldr	r2, [r7, #8]
  4001b0:	0112      	lsls	r2, r2, #4
  4001b2:	440a      	add	r2, r1
  4001b4:	6810      	ldr	r0, [r2, #0]
  4001b6:	4a21      	ldr	r2, [pc, #132]	; (40023c <pio_handler_process+0x104>)
  4001b8:	447a      	add	r2, pc
  4001ba:	4611      	mov	r1, r2
  4001bc:	68ba      	ldr	r2, [r7, #8]
  4001be:	0112      	lsls	r2, r2, #4
  4001c0:	440a      	add	r2, r1
  4001c2:	3204      	adds	r2, #4
  4001c4:	6812      	ldr	r2, [r2, #0]
  4001c6:	4611      	mov	r1, r2
  4001c8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ca:	4b1d      	ldr	r3, [pc, #116]	; (400240 <pio_handler_process+0x108>)
  4001cc:	447b      	add	r3, pc
  4001ce:	461a      	mov	r2, r3
  4001d0:	68bb      	ldr	r3, [r7, #8]
  4001d2:	011b      	lsls	r3, r3, #4
  4001d4:	4413      	add	r3, r2
  4001d6:	3304      	adds	r3, #4
  4001d8:	681b      	ldr	r3, [r3, #0]
  4001da:	43db      	mvns	r3, r3
  4001dc:	68fa      	ldr	r2, [r7, #12]
  4001de:	4013      	ands	r3, r2
  4001e0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001e2:	68bb      	ldr	r3, [r7, #8]
  4001e4:	3301      	adds	r3, #1
  4001e6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001e8:	68bb      	ldr	r3, [r7, #8]
  4001ea:	2b06      	cmp	r3, #6
  4001ec:	d803      	bhi.n	4001f6 <pio_handler_process+0xbe>
		while (status != 0) {
  4001ee:	68fb      	ldr	r3, [r7, #12]
  4001f0:	2b00      	cmp	r3, #0
  4001f2:	d1bb      	bne.n	40016c <pio_handler_process+0x34>
  4001f4:	e000      	b.n	4001f8 <pio_handler_process+0xc0>
				break;
  4001f6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001f8:	4b12      	ldr	r3, [pc, #72]	; (400244 <pio_handler_process+0x10c>)
  4001fa:	58e3      	ldr	r3, [r4, r3]
  4001fc:	681b      	ldr	r3, [r3, #0]
  4001fe:	2b00      	cmp	r3, #0
  400200:	d009      	beq.n	400216 <pio_handler_process+0xde>
		if (pio_capture_handler) {
  400202:	4b11      	ldr	r3, [pc, #68]	; (400248 <pio_handler_process+0x110>)
  400204:	447b      	add	r3, pc
  400206:	681b      	ldr	r3, [r3, #0]
  400208:	2b00      	cmp	r3, #0
  40020a:	d004      	beq.n	400216 <pio_handler_process+0xde>
			pio_capture_handler(p_pio);
  40020c:	4b0f      	ldr	r3, [pc, #60]	; (40024c <pio_handler_process+0x114>)
  40020e:	447b      	add	r3, pc
  400210:	681b      	ldr	r3, [r3, #0]
  400212:	6878      	ldr	r0, [r7, #4]
  400214:	4798      	blx	r3
		}
	}
#endif
}
  400216:	bf00      	nop
  400218:	3714      	adds	r7, #20
  40021a:	46bd      	mov	sp, r7
  40021c:	bd90      	pop	{r4, r7, pc}
  40021e:	bf00      	nop
  400220:	00009c54 	.word	0x00009c54
  400224:	000001a4 	.word	0x000001a4
  400228:	000001d4 	.word	0x000001d4
  40022c:	1fc0086a 	.word	0x1fc0086a
  400230:	1fc00856 	.word	0x1fc00856
  400234:	1fc0083e 	.word	0x1fc0083e
  400238:	1fc0082e 	.word	0x1fc0082e
  40023c:	1fc00820 	.word	0x1fc00820
  400240:	1fc0080c 	.word	0x1fc0080c
  400244:	000000e0 	.word	0x000000e0
  400248:	1fc00848 	.word	0x1fc00848
  40024c:	1fc0083e 	.word	0x1fc0083e

00400250 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400250:	b590      	push	{r4, r7, lr}
  400252:	b087      	sub	sp, #28
  400254:	af00      	add	r7, sp, #0
  400256:	60f8      	str	r0, [r7, #12]
  400258:	60b9      	str	r1, [r7, #8]
  40025a:	607a      	str	r2, [r7, #4]
  40025c:	603b      	str	r3, [r7, #0]
  40025e:	4c26      	ldr	r4, [pc, #152]	; (4002f8 <pio_handler_set+0xa8>)
  400260:	447c      	add	r4, pc
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400262:	4b26      	ldr	r3, [pc, #152]	; (4002fc <pio_handler_set+0xac>)
  400264:	447b      	add	r3, pc
  400266:	681b      	ldr	r3, [r3, #0]
  400268:	2b06      	cmp	r3, #6
  40026a:	d901      	bls.n	400270 <pio_handler_set+0x20>
		return 1;
  40026c:	2301      	movs	r3, #1
  40026e:	e03e      	b.n	4002ee <pio_handler_set+0x9e>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400270:	2300      	movs	r3, #0
  400272:	75fb      	strb	r3, [r7, #23]
  400274:	e012      	b.n	40029c <pio_handler_set+0x4c>
		pSource = &(gs_interrupt_sources[i]);
  400276:	7dfb      	ldrb	r3, [r7, #23]
  400278:	011b      	lsls	r3, r3, #4
  40027a:	4a21      	ldr	r2, [pc, #132]	; (400300 <pio_handler_set+0xb0>)
  40027c:	447a      	add	r2, pc
  40027e:	4413      	add	r3, r2
  400280:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400282:	693b      	ldr	r3, [r7, #16]
  400284:	681a      	ldr	r2, [r3, #0]
  400286:	68bb      	ldr	r3, [r7, #8]
  400288:	429a      	cmp	r2, r3
  40028a:	d104      	bne.n	400296 <pio_handler_set+0x46>
  40028c:	693b      	ldr	r3, [r7, #16]
  40028e:	685a      	ldr	r2, [r3, #4]
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	429a      	cmp	r2, r3
  400294:	d009      	beq.n	4002aa <pio_handler_set+0x5a>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400296:	7dfb      	ldrb	r3, [r7, #23]
  400298:	3301      	adds	r3, #1
  40029a:	75fb      	strb	r3, [r7, #23]
  40029c:	7dfa      	ldrb	r2, [r7, #23]
  40029e:	4b19      	ldr	r3, [pc, #100]	; (400304 <pio_handler_set+0xb4>)
  4002a0:	447b      	add	r3, pc
  4002a2:	681b      	ldr	r3, [r3, #0]
  4002a4:	429a      	cmp	r2, r3
  4002a6:	d9e6      	bls.n	400276 <pio_handler_set+0x26>
  4002a8:	e000      	b.n	4002ac <pio_handler_set+0x5c>
			break;
  4002aa:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4002ac:	693b      	ldr	r3, [r7, #16]
  4002ae:	68ba      	ldr	r2, [r7, #8]
  4002b0:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4002b2:	693b      	ldr	r3, [r7, #16]
  4002b4:	687a      	ldr	r2, [r7, #4]
  4002b6:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4002b8:	693b      	ldr	r3, [r7, #16]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4002be:	693b      	ldr	r3, [r7, #16]
  4002c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4002c2:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4002c4:	7dfa      	ldrb	r2, [r7, #23]
  4002c6:	4b10      	ldr	r3, [pc, #64]	; (400308 <pio_handler_set+0xb8>)
  4002c8:	447b      	add	r3, pc
  4002ca:	681b      	ldr	r3, [r3, #0]
  4002cc:	3301      	adds	r3, #1
  4002ce:	429a      	cmp	r2, r3
  4002d0:	d106      	bne.n	4002e0 <pio_handler_set+0x90>
		gs_ul_nb_sources++;
  4002d2:	4b0e      	ldr	r3, [pc, #56]	; (40030c <pio_handler_set+0xbc>)
  4002d4:	447b      	add	r3, pc
  4002d6:	681b      	ldr	r3, [r3, #0]
  4002d8:	3301      	adds	r3, #1
  4002da:	4a0d      	ldr	r2, [pc, #52]	; (400310 <pio_handler_set+0xc0>)
  4002dc:	447a      	add	r2, pc
  4002de:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4002e0:	683a      	ldr	r2, [r7, #0]
  4002e2:	6879      	ldr	r1, [r7, #4]
  4002e4:	68f8      	ldr	r0, [r7, #12]
  4002e6:	4b0b      	ldr	r3, [pc, #44]	; (400314 <pio_handler_set+0xc4>)
  4002e8:	58e3      	ldr	r3, [r4, r3]
  4002ea:	4798      	blx	r3

	return 0;
  4002ec:	2300      	movs	r3, #0
}
  4002ee:	4618      	mov	r0, r3
  4002f0:	371c      	adds	r7, #28
  4002f2:	46bd      	mov	sp, r7
  4002f4:	bd90      	pop	{r4, r7, pc}
  4002f6:	bf00      	nop
  4002f8:	00009b38 	.word	0x00009b38
  4002fc:	1fc007e4 	.word	0x1fc007e4
  400300:	1fc0075c 	.word	0x1fc0075c
  400304:	1fc007a8 	.word	0x1fc007a8
  400308:	1fc00780 	.word	0x1fc00780
  40030c:	1fc00774 	.word	0x1fc00774
  400310:	1fc0076c 	.word	0x1fc0076c
  400314:	0000022c 	.word	0x0000022c

00400318 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400318:	b580      	push	{r7, lr}
  40031a:	af00      	add	r7, sp, #0
  40031c:	4a05      	ldr	r2, [pc, #20]	; (400334 <PIOA_Handler+0x1c>)
  40031e:	447a      	add	r2, pc
	pio_handler_process(PIOA, ID_PIOA);
  400320:	210b      	movs	r1, #11
  400322:	4803      	ldr	r0, [pc, #12]	; (400330 <PIOA_Handler+0x18>)
  400324:	4b04      	ldr	r3, [pc, #16]	; (400338 <PIOA_Handler+0x20>)
  400326:	58d3      	ldr	r3, [r2, r3]
  400328:	4798      	blx	r3
}
  40032a:	bf00      	nop
  40032c:	bd80      	pop	{r7, pc}
  40032e:	bf00      	nop
  400330:	400e0e00 	.word	0x400e0e00
  400334:	00009a7a 	.word	0x00009a7a
  400338:	000000b4 	.word	0x000000b4

0040033c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40033c:	b580      	push	{r7, lr}
  40033e:	af00      	add	r7, sp, #0
  400340:	4a05      	ldr	r2, [pc, #20]	; (400358 <PIOB_Handler+0x1c>)
  400342:	447a      	add	r2, pc
    pio_handler_process(PIOB, ID_PIOB);
  400344:	210c      	movs	r1, #12
  400346:	4803      	ldr	r0, [pc, #12]	; (400354 <PIOB_Handler+0x18>)
  400348:	4b04      	ldr	r3, [pc, #16]	; (40035c <PIOB_Handler+0x20>)
  40034a:	58d3      	ldr	r3, [r2, r3]
  40034c:	4798      	blx	r3
}
  40034e:	bf00      	nop
  400350:	bd80      	pop	{r7, pc}
  400352:	bf00      	nop
  400354:	400e1000 	.word	0x400e1000
  400358:	00009a56 	.word	0x00009a56
  40035c:	000000b4 	.word	0x000000b4

00400360 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400360:	b480      	push	{r7}
  400362:	b087      	sub	sp, #28
  400364:	af00      	add	r7, sp, #0
  400366:	60f8      	str	r0, [r7, #12]
  400368:	60b9      	str	r1, [r7, #8]
  40036a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40036c:	68fa      	ldr	r2, [r7, #12]
  40036e:	68bb      	ldr	r3, [r7, #8]
  400370:	019b      	lsls	r3, r3, #6
  400372:	4413      	add	r3, r2
  400374:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400376:	697b      	ldr	r3, [r7, #20]
  400378:	2202      	movs	r2, #2
  40037a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	f04f 32ff 	mov.w	r2, #4294967295
  400382:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400384:	697b      	ldr	r3, [r7, #20]
  400386:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400388:	697b      	ldr	r3, [r7, #20]
  40038a:	687a      	ldr	r2, [r7, #4]
  40038c:	605a      	str	r2, [r3, #4]
}
  40038e:	bf00      	nop
  400390:	371c      	adds	r7, #28
  400392:	46bd      	mov	sp, r7
  400394:	bc80      	pop	{r7}
  400396:	4770      	bx	lr

00400398 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400398:	b480      	push	{r7}
  40039a:	b083      	sub	sp, #12
  40039c:	af00      	add	r7, sp, #0
  40039e:	6078      	str	r0, [r7, #4]
  4003a0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4003a2:	687a      	ldr	r2, [r7, #4]
  4003a4:	683b      	ldr	r3, [r7, #0]
  4003a6:	019b      	lsls	r3, r3, #6
  4003a8:	4413      	add	r3, r2
  4003aa:	2205      	movs	r2, #5
  4003ac:	601a      	str	r2, [r3, #0]
}
  4003ae:	bf00      	nop
  4003b0:	370c      	adds	r7, #12
  4003b2:	46bd      	mov	sp, r7
  4003b4:	bc80      	pop	{r7}
  4003b6:	4770      	bx	lr

004003b8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4003b8:	b480      	push	{r7}
  4003ba:	b085      	sub	sp, #20
  4003bc:	af00      	add	r7, sp, #0
  4003be:	60f8      	str	r0, [r7, #12]
  4003c0:	60b9      	str	r1, [r7, #8]
  4003c2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4003c4:	68fa      	ldr	r2, [r7, #12]
  4003c6:	68bb      	ldr	r3, [r7, #8]
  4003c8:	019b      	lsls	r3, r3, #6
  4003ca:	4413      	add	r3, r2
  4003cc:	331c      	adds	r3, #28
  4003ce:	687a      	ldr	r2, [r7, #4]
  4003d0:	601a      	str	r2, [r3, #0]
}
  4003d2:	bf00      	nop
  4003d4:	3714      	adds	r7, #20
  4003d6:	46bd      	mov	sp, r7
  4003d8:	bc80      	pop	{r7}
  4003da:	4770      	bx	lr

004003dc <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4003dc:	b480      	push	{r7}
  4003de:	b087      	sub	sp, #28
  4003e0:	af00      	add	r7, sp, #0
  4003e2:	60f8      	str	r0, [r7, #12]
  4003e4:	60b9      	str	r1, [r7, #8]
  4003e6:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4003e8:	68fa      	ldr	r2, [r7, #12]
  4003ea:	68bb      	ldr	r3, [r7, #8]
  4003ec:	019b      	lsls	r3, r3, #6
  4003ee:	4413      	add	r3, r2
  4003f0:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  4003f2:	697b      	ldr	r3, [r7, #20]
  4003f4:	687a      	ldr	r2, [r7, #4]
  4003f6:	625a      	str	r2, [r3, #36]	; 0x24
}
  4003f8:	bf00      	nop
  4003fa:	371c      	adds	r7, #28
  4003fc:	46bd      	mov	sp, r7
  4003fe:	bc80      	pop	{r7}
  400400:	4770      	bx	lr

00400402 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  400402:	b480      	push	{r7}
  400404:	b085      	sub	sp, #20
  400406:	af00      	add	r7, sp, #0
  400408:	6078      	str	r0, [r7, #4]
  40040a:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40040c:	687a      	ldr	r2, [r7, #4]
  40040e:	683b      	ldr	r3, [r7, #0]
  400410:	019b      	lsls	r3, r3, #6
  400412:	4413      	add	r3, r2
  400414:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  400416:	68fb      	ldr	r3, [r7, #12]
  400418:	6a1b      	ldr	r3, [r3, #32]
}
  40041a:	4618      	mov	r0, r3
  40041c:	3714      	adds	r7, #20
  40041e:	46bd      	mov	sp, r7
  400420:	bc80      	pop	{r7}
  400422:	4770      	bx	lr

00400424 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400424:	b480      	push	{r7}
  400426:	b08d      	sub	sp, #52	; 0x34
  400428:	af00      	add	r7, sp, #0
  40042a:	60f8      	str	r0, [r7, #12]
  40042c:	60b9      	str	r1, [r7, #8]
  40042e:	607a      	str	r2, [r7, #4]
  400430:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400432:	2302      	movs	r3, #2
  400434:	613b      	str	r3, [r7, #16]
  400436:	2308      	movs	r3, #8
  400438:	617b      	str	r3, [r7, #20]
  40043a:	2320      	movs	r3, #32
  40043c:	61bb      	str	r3, [r7, #24]
  40043e:	2380      	movs	r3, #128	; 0x80
  400440:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  400444:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400446:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  400448:	2300      	movs	r3, #0
  40044a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40044c:	e01a      	b.n	400484 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  40044e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400450:	009b      	lsls	r3, r3, #2
  400452:	f107 0230 	add.w	r2, r7, #48	; 0x30
  400456:	4413      	add	r3, r2
  400458:	f853 3c20 	ldr.w	r3, [r3, #-32]
  40045c:	68ba      	ldr	r2, [r7, #8]
  40045e:	fbb2 f3f3 	udiv	r3, r2, r3
  400462:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  400464:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400466:	0c1b      	lsrs	r3, r3, #16
  400468:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40046a:	68fa      	ldr	r2, [r7, #12]
  40046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40046e:	429a      	cmp	r2, r3
  400470:	d901      	bls.n	400476 <tc_find_mck_divisor+0x52>
			return 0;
  400472:	2300      	movs	r3, #0
  400474:	e023      	b.n	4004be <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  400476:	68fa      	ldr	r2, [r7, #12]
  400478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40047a:	429a      	cmp	r2, r3
  40047c:	d206      	bcs.n	40048c <tc_find_mck_divisor+0x68>
			ul_index++) {
  40047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400480:	3301      	adds	r3, #1
  400482:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  400484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400486:	2b04      	cmp	r3, #4
  400488:	d9e1      	bls.n	40044e <tc_find_mck_divisor+0x2a>
  40048a:	e000      	b.n	40048e <tc_find_mck_divisor+0x6a>
			break;
  40048c:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400490:	2b04      	cmp	r3, #4
  400492:	d901      	bls.n	400498 <tc_find_mck_divisor+0x74>
		return 0;
  400494:	2300      	movs	r3, #0
  400496:	e012      	b.n	4004be <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  400498:	687b      	ldr	r3, [r7, #4]
  40049a:	2b00      	cmp	r3, #0
  40049c:	d008      	beq.n	4004b0 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  40049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004a0:	009b      	lsls	r3, r3, #2
  4004a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4004a6:	4413      	add	r3, r2
  4004a8:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4004ac:	687b      	ldr	r3, [r7, #4]
  4004ae:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4004b0:	683b      	ldr	r3, [r7, #0]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d002      	beq.n	4004bc <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4004b6:	683b      	ldr	r3, [r7, #0]
  4004b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4004ba:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4004bc:	2301      	movs	r3, #1
}
  4004be:	4618      	mov	r0, r3
  4004c0:	3734      	adds	r7, #52	; 0x34
  4004c2:	46bd      	mov	sp, r7
  4004c4:	bc80      	pop	{r7}
  4004c6:	4770      	bx	lr

004004c8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4004c8:	b480      	push	{r7}
  4004ca:	b083      	sub	sp, #12
  4004cc:	af00      	add	r7, sp, #0
  4004ce:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4004d0:	687b      	ldr	r3, [r7, #4]
  4004d2:	2208      	movs	r2, #8
  4004d4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4004d6:	687b      	ldr	r3, [r7, #4]
  4004d8:	2220      	movs	r2, #32
  4004da:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4004dc:	687b      	ldr	r3, [r7, #4]
  4004de:	2204      	movs	r2, #4
  4004e0:	601a      	str	r2, [r3, #0]
}
  4004e2:	bf00      	nop
  4004e4:	370c      	adds	r7, #12
  4004e6:	46bd      	mov	sp, r7
  4004e8:	bc80      	pop	{r7}
  4004ea:	4770      	bx	lr

004004ec <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4004ec:	b590      	push	{r4, r7, lr}
  4004ee:	b085      	sub	sp, #20
  4004f0:	af00      	add	r7, sp, #0
  4004f2:	6078      	str	r0, [r7, #4]
  4004f4:	6039      	str	r1, [r7, #0]
  4004f6:	4c16      	ldr	r4, [pc, #88]	; (400550 <twi_master_init+0x64>)
  4004f8:	447c      	add	r4, pc
	uint32_t status = TWI_SUCCESS;
  4004fa:	2300      	movs	r3, #0
  4004fc:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4004fe:	687b      	ldr	r3, [r7, #4]
  400500:	f04f 32ff 	mov.w	r2, #4294967295
  400504:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400506:	687b      	ldr	r3, [r7, #4]
  400508:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  40050a:	6878      	ldr	r0, [r7, #4]
  40050c:	4b11      	ldr	r3, [pc, #68]	; (400554 <twi_master_init+0x68>)
  40050e:	58e3      	ldr	r3, [r4, r3]
  400510:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  400512:	6878      	ldr	r0, [r7, #4]
  400514:	4b10      	ldr	r3, [pc, #64]	; (400558 <twi_master_init+0x6c>)
  400516:	58e3      	ldr	r3, [r4, r3]
  400518:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40051a:	683b      	ldr	r3, [r7, #0]
  40051c:	6859      	ldr	r1, [r3, #4]
  40051e:	683b      	ldr	r3, [r7, #0]
  400520:	681b      	ldr	r3, [r3, #0]
  400522:	461a      	mov	r2, r3
  400524:	6878      	ldr	r0, [r7, #4]
  400526:	4b0d      	ldr	r3, [pc, #52]	; (40055c <twi_master_init+0x70>)
  400528:	58e3      	ldr	r3, [r4, r3]
  40052a:	4798      	blx	r3
  40052c:	4603      	mov	r3, r0
  40052e:	2b01      	cmp	r3, #1
  400530:	d101      	bne.n	400536 <twi_master_init+0x4a>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  400532:	2301      	movs	r3, #1
  400534:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  400536:	683b      	ldr	r3, [r7, #0]
  400538:	7a5b      	ldrb	r3, [r3, #9]
  40053a:	2b01      	cmp	r3, #1
  40053c:	d102      	bne.n	400544 <twi_master_init+0x58>
		p_twi->TWI_CR = TWI_CR_QUICK;
  40053e:	687b      	ldr	r3, [r7, #4]
  400540:	2240      	movs	r2, #64	; 0x40
  400542:	601a      	str	r2, [r3, #0]
	}

	return status;
  400544:	68fb      	ldr	r3, [r7, #12]
}
  400546:	4618      	mov	r0, r3
  400548:	3714      	adds	r7, #20
  40054a:	46bd      	mov	sp, r7
  40054c:	bd90      	pop	{r4, r7, pc}
  40054e:	bf00      	nop
  400550:	000098a0 	.word	0x000098a0
  400554:	00000158 	.word	0x00000158
  400558:	00000154 	.word	0x00000154
  40055c:	0000020c 	.word	0x0000020c

00400560 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400560:	b480      	push	{r7}
  400562:	b089      	sub	sp, #36	; 0x24
  400564:	af00      	add	r7, sp, #0
  400566:	60f8      	str	r0, [r7, #12]
  400568:	60b9      	str	r1, [r7, #8]
  40056a:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  40056c:	2300      	movs	r3, #0
  40056e:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400570:	68bb      	ldr	r3, [r7, #8]
  400572:	4a34      	ldr	r2, [pc, #208]	; (400644 <twi_set_speed+0xe4>)
  400574:	4293      	cmp	r3, r2
  400576:	d901      	bls.n	40057c <twi_set_speed+0x1c>
		return FAIL;
  400578:	2301      	movs	r3, #1
  40057a:	e05d      	b.n	400638 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40057c:	68bb      	ldr	r3, [r7, #8]
  40057e:	4a32      	ldr	r2, [pc, #200]	; (400648 <twi_set_speed+0xe8>)
  400580:	4293      	cmp	r3, r2
  400582:	d937      	bls.n	4005f4 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400584:	687b      	ldr	r3, [r7, #4]
  400586:	4a31      	ldr	r2, [pc, #196]	; (40064c <twi_set_speed+0xec>)
  400588:	fba2 2303 	umull	r2, r3, r2, r3
  40058c:	0b9b      	lsrs	r3, r3, #14
  40058e:	3b04      	subs	r3, #4
  400590:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400592:	68ba      	ldr	r2, [r7, #8]
  400594:	4b2e      	ldr	r3, [pc, #184]	; (400650 <twi_set_speed+0xf0>)
  400596:	4413      	add	r3, r2
  400598:	009b      	lsls	r3, r3, #2
  40059a:	687a      	ldr	r2, [r7, #4]
  40059c:	fbb2 f3f3 	udiv	r3, r2, r3
  4005a0:	3b04      	subs	r3, #4
  4005a2:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005a4:	e005      	b.n	4005b2 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4005a6:	69fb      	ldr	r3, [r7, #28]
  4005a8:	3301      	adds	r3, #1
  4005aa:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4005ac:	697b      	ldr	r3, [r7, #20]
  4005ae:	085b      	lsrs	r3, r3, #1
  4005b0:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005b2:	697b      	ldr	r3, [r7, #20]
  4005b4:	2bff      	cmp	r3, #255	; 0xff
  4005b6:	d909      	bls.n	4005cc <twi_set_speed+0x6c>
  4005b8:	69fb      	ldr	r3, [r7, #28]
  4005ba:	2b06      	cmp	r3, #6
  4005bc:	d9f3      	bls.n	4005a6 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005be:	e005      	b.n	4005cc <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4005c0:	69fb      	ldr	r3, [r7, #28]
  4005c2:	3301      	adds	r3, #1
  4005c4:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4005c6:	693b      	ldr	r3, [r7, #16]
  4005c8:	085b      	lsrs	r3, r3, #1
  4005ca:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005cc:	693b      	ldr	r3, [r7, #16]
  4005ce:	2bff      	cmp	r3, #255	; 0xff
  4005d0:	d902      	bls.n	4005d8 <twi_set_speed+0x78>
  4005d2:	69fb      	ldr	r3, [r7, #28]
  4005d4:	2b06      	cmp	r3, #6
  4005d6:	d9f3      	bls.n	4005c0 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4005d8:	697b      	ldr	r3, [r7, #20]
  4005da:	b2da      	uxtb	r2, r3
  4005dc:	693b      	ldr	r3, [r7, #16]
  4005de:	021b      	lsls	r3, r3, #8
  4005e0:	b29b      	uxth	r3, r3
  4005e2:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4005e4:	69fb      	ldr	r3, [r7, #28]
  4005e6:	041b      	lsls	r3, r3, #16
  4005e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4005ec:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	611a      	str	r2, [r3, #16]
  4005f2:	e020      	b.n	400636 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4005f4:	68bb      	ldr	r3, [r7, #8]
  4005f6:	005b      	lsls	r3, r3, #1
  4005f8:	687a      	ldr	r2, [r7, #4]
  4005fa:	fbb2 f3f3 	udiv	r3, r2, r3
  4005fe:	3b04      	subs	r3, #4
  400600:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400602:	e005      	b.n	400610 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  400604:	69fb      	ldr	r3, [r7, #28]
  400606:	3301      	adds	r3, #1
  400608:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40060a:	69bb      	ldr	r3, [r7, #24]
  40060c:	085b      	lsrs	r3, r3, #1
  40060e:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400610:	69bb      	ldr	r3, [r7, #24]
  400612:	2bff      	cmp	r3, #255	; 0xff
  400614:	d902      	bls.n	40061c <twi_set_speed+0xbc>
  400616:	69fb      	ldr	r3, [r7, #28]
  400618:	2b06      	cmp	r3, #6
  40061a:	d9f3      	bls.n	400604 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40061c:	69bb      	ldr	r3, [r7, #24]
  40061e:	b2da      	uxtb	r2, r3
  400620:	69bb      	ldr	r3, [r7, #24]
  400622:	021b      	lsls	r3, r3, #8
  400624:	b29b      	uxth	r3, r3
  400626:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  400628:	69fb      	ldr	r3, [r7, #28]
  40062a:	041b      	lsls	r3, r3, #16
  40062c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400630:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  400636:	2300      	movs	r3, #0
}
  400638:	4618      	mov	r0, r3
  40063a:	3724      	adds	r7, #36	; 0x24
  40063c:	46bd      	mov	sp, r7
  40063e:	bc80      	pop	{r7}
  400640:	4770      	bx	lr
  400642:	bf00      	nop
  400644:	00061a80 	.word	0x00061a80
  400648:	0005dc00 	.word	0x0005dc00
  40064c:	057619f1 	.word	0x057619f1
  400650:	3ffd1200 	.word	0x3ffd1200

00400654 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  400654:	b480      	push	{r7}
  400656:	b085      	sub	sp, #20
  400658:	af00      	add	r7, sp, #0
  40065a:	6078      	str	r0, [r7, #4]
  40065c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40065e:	683b      	ldr	r3, [r7, #0]
  400660:	2b00      	cmp	r3, #0
  400662:	d101      	bne.n	400668 <twi_mk_addr+0x14>
		return 0;
  400664:	2300      	movs	r3, #0
  400666:	e01d      	b.n	4006a4 <twi_mk_addr+0x50>

	val = addr[0];
  400668:	687b      	ldr	r3, [r7, #4]
  40066a:	781b      	ldrb	r3, [r3, #0]
  40066c:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  40066e:	683b      	ldr	r3, [r7, #0]
  400670:	2b01      	cmp	r3, #1
  400672:	dd09      	ble.n	400688 <twi_mk_addr+0x34>
		val <<= 8;
  400674:	68fb      	ldr	r3, [r7, #12]
  400676:	021b      	lsls	r3, r3, #8
  400678:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40067a:	687b      	ldr	r3, [r7, #4]
  40067c:	3301      	adds	r3, #1
  40067e:	781b      	ldrb	r3, [r3, #0]
  400680:	461a      	mov	r2, r3
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	4313      	orrs	r3, r2
  400686:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  400688:	683b      	ldr	r3, [r7, #0]
  40068a:	2b02      	cmp	r3, #2
  40068c:	dd09      	ble.n	4006a2 <twi_mk_addr+0x4e>
		val <<= 8;
  40068e:	68fb      	ldr	r3, [r7, #12]
  400690:	021b      	lsls	r3, r3, #8
  400692:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	3302      	adds	r3, #2
  400698:	781b      	ldrb	r3, [r3, #0]
  40069a:	461a      	mov	r2, r3
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	4313      	orrs	r3, r2
  4006a0:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4006a2:	68fb      	ldr	r3, [r7, #12]
}
  4006a4:	4618      	mov	r0, r3
  4006a6:	3714      	adds	r7, #20
  4006a8:	46bd      	mov	sp, r7
  4006aa:	bc80      	pop	{r7}
  4006ac:	4770      	bx	lr
	...

004006b0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4006b0:	b580      	push	{r7, lr}
  4006b2:	b088      	sub	sp, #32
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
  4006b8:	6039      	str	r1, [r7, #0]
  4006ba:	4a40      	ldr	r2, [pc, #256]	; (4007bc <twi_master_read+0x10c>)
  4006bc:	447a      	add	r2, pc
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4006be:	683b      	ldr	r3, [r7, #0]
  4006c0:	68db      	ldr	r3, [r3, #12]
  4006c2:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  4006c4:	683b      	ldr	r3, [r7, #0]
  4006c6:	689b      	ldr	r3, [r3, #8]
  4006c8:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  4006ca:	2300      	movs	r3, #0
  4006cc:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  4006ce:	f247 5330 	movw	r3, #30000	; 0x7530
  4006d2:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  4006d4:	69fb      	ldr	r3, [r7, #28]
  4006d6:	2b00      	cmp	r3, #0
  4006d8:	d101      	bne.n	4006de <twi_master_read+0x2e>
		return TWI_INVALID_ARGUMENT;
  4006da:	2301      	movs	r3, #1
  4006dc:	e069      	b.n	4007b2 <twi_master_read+0x102>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4006de:	687b      	ldr	r3, [r7, #4]
  4006e0:	2100      	movs	r1, #0
  4006e2:	6059      	str	r1, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4006e4:	683b      	ldr	r3, [r7, #0]
  4006e6:	7c1b      	ldrb	r3, [r3, #16]
  4006e8:	041b      	lsls	r3, r3, #16
  4006ea:	f403 01fe 	and.w	r1, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4006ee:	683b      	ldr	r3, [r7, #0]
  4006f0:	685b      	ldr	r3, [r3, #4]
  4006f2:	021b      	lsls	r3, r3, #8
  4006f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4006f8:	430b      	orrs	r3, r1
  4006fa:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
  4006fe:	687b      	ldr	r3, [r7, #4]
  400700:	6059      	str	r1, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400702:	687b      	ldr	r3, [r7, #4]
  400704:	2100      	movs	r1, #0
  400706:	60d9      	str	r1, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400708:	6838      	ldr	r0, [r7, #0]
  40070a:	683b      	ldr	r3, [r7, #0]
  40070c:	685b      	ldr	r3, [r3, #4]
  40070e:	4619      	mov	r1, r3
  400710:	4b2b      	ldr	r3, [pc, #172]	; (4007c0 <twi_master_read+0x110>)
  400712:	58d3      	ldr	r3, [r2, r3]
  400714:	4798      	blx	r3
  400716:	4602      	mov	r2, r0
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40071c:	69fb      	ldr	r3, [r7, #28]
  40071e:	2b01      	cmp	r3, #1
  400720:	d105      	bne.n	40072e <twi_master_read+0x7e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	2203      	movs	r2, #3
  400726:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  400728:	2301      	movs	r3, #1
  40072a:	75fb      	strb	r3, [r7, #23]
  40072c:	e034      	b.n	400798 <twi_master_read+0xe8>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40072e:	687b      	ldr	r3, [r7, #4]
  400730:	2201      	movs	r2, #1
  400732:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  400734:	2300      	movs	r3, #0
  400736:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  400738:	e02e      	b.n	400798 <twi_master_read+0xe8>
		status = p_twi->TWI_SR;
  40073a:	687b      	ldr	r3, [r7, #4]
  40073c:	6a1b      	ldr	r3, [r3, #32]
  40073e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400740:	68fb      	ldr	r3, [r7, #12]
  400742:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400746:	2b00      	cmp	r3, #0
  400748:	d001      	beq.n	40074e <twi_master_read+0x9e>
			return TWI_RECEIVE_NACK;
  40074a:	2305      	movs	r3, #5
  40074c:	e031      	b.n	4007b2 <twi_master_read+0x102>
		}

		if (!timeout--) {
  40074e:	693b      	ldr	r3, [r7, #16]
  400750:	1e5a      	subs	r2, r3, #1
  400752:	613a      	str	r2, [r7, #16]
  400754:	2b00      	cmp	r3, #0
  400756:	d101      	bne.n	40075c <twi_master_read+0xac>
			return TWI_ERROR_TIMEOUT;
  400758:	2309      	movs	r3, #9
  40075a:	e02a      	b.n	4007b2 <twi_master_read+0x102>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40075c:	69fb      	ldr	r3, [r7, #28]
  40075e:	2b01      	cmp	r3, #1
  400760:	d107      	bne.n	400772 <twi_master_read+0xc2>
  400762:	7dfb      	ldrb	r3, [r7, #23]
  400764:	2b00      	cmp	r3, #0
  400766:	d104      	bne.n	400772 <twi_master_read+0xc2>
			p_twi->TWI_CR = TWI_CR_STOP;
  400768:	687b      	ldr	r3, [r7, #4]
  40076a:	2202      	movs	r2, #2
  40076c:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  40076e:	2301      	movs	r3, #1
  400770:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  400772:	68fb      	ldr	r3, [r7, #12]
  400774:	f003 0302 	and.w	r3, r3, #2
  400778:	2b00      	cmp	r3, #0
  40077a:	d100      	bne.n	40077e <twi_master_read+0xce>
			continue;
  40077c:	e00c      	b.n	400798 <twi_master_read+0xe8>
		}
		*buffer++ = p_twi->TWI_RHR;
  40077e:	69bb      	ldr	r3, [r7, #24]
  400780:	1c5a      	adds	r2, r3, #1
  400782:	61ba      	str	r2, [r7, #24]
  400784:	687a      	ldr	r2, [r7, #4]
  400786:	6b12      	ldr	r2, [r2, #48]	; 0x30
  400788:	b2d2      	uxtb	r2, r2
  40078a:	701a      	strb	r2, [r3, #0]

		cnt--;
  40078c:	69fb      	ldr	r3, [r7, #28]
  40078e:	3b01      	subs	r3, #1
  400790:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  400792:	f247 5330 	movw	r3, #30000	; 0x7530
  400796:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  400798:	69fb      	ldr	r3, [r7, #28]
  40079a:	2b00      	cmp	r3, #0
  40079c:	d1cd      	bne.n	40073a <twi_master_read+0x8a>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40079e:	bf00      	nop
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	6a1b      	ldr	r3, [r3, #32]
  4007a4:	f003 0301 	and.w	r3, r3, #1
  4007a8:	2b00      	cmp	r3, #0
  4007aa:	d0f9      	beq.n	4007a0 <twi_master_read+0xf0>
	}

	p_twi->TWI_SR;
  4007ac:	687b      	ldr	r3, [r7, #4]
  4007ae:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  4007b0:	2300      	movs	r3, #0
}
  4007b2:	4618      	mov	r0, r3
  4007b4:	3720      	adds	r7, #32
  4007b6:	46bd      	mov	sp, r7
  4007b8:	bd80      	pop	{r7, pc}
  4007ba:	bf00      	nop
  4007bc:	000096dc 	.word	0x000096dc
  4007c0:	0000017c 	.word	0x0000017c

004007c4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4007c4:	b580      	push	{r7, lr}
  4007c6:	b086      	sub	sp, #24
  4007c8:	af00      	add	r7, sp, #0
  4007ca:	6078      	str	r0, [r7, #4]
  4007cc:	6039      	str	r1, [r7, #0]
  4007ce:	4a34      	ldr	r2, [pc, #208]	; (4008a0 <twi_master_write+0xdc>)
  4007d0:	447a      	add	r2, pc
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4007d2:	683b      	ldr	r3, [r7, #0]
  4007d4:	68db      	ldr	r3, [r3, #12]
  4007d6:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4007d8:	683b      	ldr	r3, [r7, #0]
  4007da:	689b      	ldr	r3, [r3, #8]
  4007dc:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4007de:	697b      	ldr	r3, [r7, #20]
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d101      	bne.n	4007e8 <twi_master_write+0x24>
		return TWI_INVALID_ARGUMENT;
  4007e4:	2301      	movs	r3, #1
  4007e6:	e056      	b.n	400896 <twi_master_write+0xd2>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4007e8:	687b      	ldr	r3, [r7, #4]
  4007ea:	2100      	movs	r1, #0
  4007ec:	6059      	str	r1, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4007ee:	683b      	ldr	r3, [r7, #0]
  4007f0:	7c1b      	ldrb	r3, [r3, #16]
  4007f2:	041b      	lsls	r3, r3, #16
  4007f4:	f403 01fe 	and.w	r1, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4007f8:	683b      	ldr	r3, [r7, #0]
  4007fa:	685b      	ldr	r3, [r3, #4]
  4007fc:	021b      	lsls	r3, r3, #8
  4007fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400802:	4319      	orrs	r1, r3
  400804:	687b      	ldr	r3, [r7, #4]
  400806:	6059      	str	r1, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	2100      	movs	r1, #0
  40080c:	60d9      	str	r1, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40080e:	6838      	ldr	r0, [r7, #0]
  400810:	683b      	ldr	r3, [r7, #0]
  400812:	685b      	ldr	r3, [r3, #4]
  400814:	4619      	mov	r1, r3
  400816:	4b23      	ldr	r3, [pc, #140]	; (4008a4 <twi_master_write+0xe0>)
  400818:	58d3      	ldr	r3, [r2, r3]
  40081a:	4798      	blx	r3
  40081c:	4602      	mov	r2, r0
  40081e:	687b      	ldr	r3, [r7, #4]
  400820:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  400822:	e019      	b.n	400858 <twi_master_write+0x94>
		status = p_twi->TWI_SR;
  400824:	687b      	ldr	r3, [r7, #4]
  400826:	6a1b      	ldr	r3, [r3, #32]
  400828:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40082a:	68fb      	ldr	r3, [r7, #12]
  40082c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400830:	2b00      	cmp	r3, #0
  400832:	d001      	beq.n	400838 <twi_master_write+0x74>
			return TWI_RECEIVE_NACK;
  400834:	2305      	movs	r3, #5
  400836:	e02e      	b.n	400896 <twi_master_write+0xd2>
		}

		if (!(status & TWI_SR_TXRDY)) {
  400838:	68fb      	ldr	r3, [r7, #12]
  40083a:	f003 0304 	and.w	r3, r3, #4
  40083e:	2b00      	cmp	r3, #0
  400840:	d100      	bne.n	400844 <twi_master_write+0x80>
			continue;
  400842:	e009      	b.n	400858 <twi_master_write+0x94>
		}
		p_twi->TWI_THR = *buffer++;
  400844:	693b      	ldr	r3, [r7, #16]
  400846:	1c5a      	adds	r2, r3, #1
  400848:	613a      	str	r2, [r7, #16]
  40084a:	781b      	ldrb	r3, [r3, #0]
  40084c:	461a      	mov	r2, r3
  40084e:	687b      	ldr	r3, [r7, #4]
  400850:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  400852:	697b      	ldr	r3, [r7, #20]
  400854:	3b01      	subs	r3, #1
  400856:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  400858:	697b      	ldr	r3, [r7, #20]
  40085a:	2b00      	cmp	r3, #0
  40085c:	d1e2      	bne.n	400824 <twi_master_write+0x60>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40085e:	687b      	ldr	r3, [r7, #4]
  400860:	6a1b      	ldr	r3, [r3, #32]
  400862:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  400864:	68fb      	ldr	r3, [r7, #12]
  400866:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40086a:	2b00      	cmp	r3, #0
  40086c:	d001      	beq.n	400872 <twi_master_write+0xae>
			return TWI_RECEIVE_NACK;
  40086e:	2305      	movs	r3, #5
  400870:	e011      	b.n	400896 <twi_master_write+0xd2>
		}

		if (status & TWI_SR_TXRDY) {
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	f003 0304 	and.w	r3, r3, #4
  400878:	2b00      	cmp	r3, #0
  40087a:	d100      	bne.n	40087e <twi_master_write+0xba>
		status = p_twi->TWI_SR;
  40087c:	e7ef      	b.n	40085e <twi_master_write+0x9a>
			break;
  40087e:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	2202      	movs	r2, #2
  400884:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400886:	bf00      	nop
  400888:	687b      	ldr	r3, [r7, #4]
  40088a:	6a1b      	ldr	r3, [r3, #32]
  40088c:	f003 0301 	and.w	r3, r3, #1
  400890:	2b00      	cmp	r3, #0
  400892:	d0f9      	beq.n	400888 <twi_master_write+0xc4>
	}

	return TWI_SUCCESS;
  400894:	2300      	movs	r3, #0
}
  400896:	4618      	mov	r0, r3
  400898:	3718      	adds	r7, #24
  40089a:	46bd      	mov	sp, r7
  40089c:	bd80      	pop	{r7, pc}
  40089e:	bf00      	nop
  4008a0:	000095c8 	.word	0x000095c8
  4008a4:	0000017c 	.word	0x0000017c

004008a8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4008a8:	b480      	push	{r7}
  4008aa:	b083      	sub	sp, #12
  4008ac:	af00      	add	r7, sp, #0
  4008ae:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4008b0:	687b      	ldr	r3, [r7, #4]
  4008b2:	2280      	movs	r2, #128	; 0x80
  4008b4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4008ba:	bf00      	nop
  4008bc:	370c      	adds	r7, #12
  4008be:	46bd      	mov	sp, r7
  4008c0:	bc80      	pop	{r7}
  4008c2:	4770      	bx	lr

004008c4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4008c4:	b480      	push	{r7}
  4008c6:	b089      	sub	sp, #36	; 0x24
  4008c8:	af00      	add	r7, sp, #0
  4008ca:	60f8      	str	r0, [r7, #12]
  4008cc:	60b9      	str	r1, [r7, #8]
  4008ce:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4008d0:	68bb      	ldr	r3, [r7, #8]
  4008d2:	011a      	lsls	r2, r3, #4
  4008d4:	687b      	ldr	r3, [r7, #4]
  4008d6:	429a      	cmp	r2, r3
  4008d8:	d802      	bhi.n	4008e0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4008da:	2310      	movs	r3, #16
  4008dc:	61fb      	str	r3, [r7, #28]
  4008de:	e001      	b.n	4008e4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4008e0:	2308      	movs	r3, #8
  4008e2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4008e4:	687b      	ldr	r3, [r7, #4]
  4008e6:	00da      	lsls	r2, r3, #3
  4008e8:	69fb      	ldr	r3, [r7, #28]
  4008ea:	68b9      	ldr	r1, [r7, #8]
  4008ec:	fb01 f303 	mul.w	r3, r1, r3
  4008f0:	085b      	lsrs	r3, r3, #1
  4008f2:	441a      	add	r2, r3
  4008f4:	69fb      	ldr	r3, [r7, #28]
  4008f6:	68b9      	ldr	r1, [r7, #8]
  4008f8:	fb01 f303 	mul.w	r3, r1, r3
  4008fc:	fbb2 f3f3 	udiv	r3, r2, r3
  400900:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  400902:	69bb      	ldr	r3, [r7, #24]
  400904:	08db      	lsrs	r3, r3, #3
  400906:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400908:	69bb      	ldr	r3, [r7, #24]
  40090a:	f003 0307 	and.w	r3, r3, #7
  40090e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400910:	697b      	ldr	r3, [r7, #20]
  400912:	2b00      	cmp	r3, #0
  400914:	d003      	beq.n	40091e <usart_set_async_baudrate+0x5a>
  400916:	697b      	ldr	r3, [r7, #20]
  400918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40091c:	d301      	bcc.n	400922 <usart_set_async_baudrate+0x5e>
		return 1;
  40091e:	2301      	movs	r3, #1
  400920:	e00f      	b.n	400942 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  400922:	69fb      	ldr	r3, [r7, #28]
  400924:	2b08      	cmp	r3, #8
  400926:	d105      	bne.n	400934 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400928:	68fb      	ldr	r3, [r7, #12]
  40092a:	685b      	ldr	r3, [r3, #4]
  40092c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  400930:	68fb      	ldr	r3, [r7, #12]
  400932:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400934:	693b      	ldr	r3, [r7, #16]
  400936:	041a      	lsls	r2, r3, #16
  400938:	697b      	ldr	r3, [r7, #20]
  40093a:	431a      	orrs	r2, r3
  40093c:	68fb      	ldr	r3, [r7, #12]
  40093e:	621a      	str	r2, [r3, #32]

	return 0;
  400940:	2300      	movs	r3, #0
}
  400942:	4618      	mov	r0, r3
  400944:	3724      	adds	r7, #36	; 0x24
  400946:	46bd      	mov	sp, r7
  400948:	bc80      	pop	{r7}
  40094a:	4770      	bx	lr

0040094c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40094c:	b590      	push	{r4, r7, lr}
  40094e:	b083      	sub	sp, #12
  400950:	af00      	add	r7, sp, #0
  400952:	6078      	str	r0, [r7, #4]
  400954:	4c13      	ldr	r4, [pc, #76]	; (4009a4 <usart_reset+0x58>)
  400956:	447c      	add	r4, pc
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400958:	6878      	ldr	r0, [r7, #4]
  40095a:	4b13      	ldr	r3, [pc, #76]	; (4009a8 <usart_reset+0x5c>)
  40095c:	58e3      	ldr	r3, [r4, r3]
  40095e:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	2200      	movs	r2, #0
  400964:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  400966:	687b      	ldr	r3, [r7, #4]
  400968:	2200      	movs	r2, #0
  40096a:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	2200      	movs	r2, #0
  400970:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  400972:	6878      	ldr	r0, [r7, #4]
  400974:	4b0d      	ldr	r3, [pc, #52]	; (4009ac <usart_reset+0x60>)
  400976:	58e3      	ldr	r3, [r4, r3]
  400978:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40097a:	6878      	ldr	r0, [r7, #4]
  40097c:	4b0c      	ldr	r3, [pc, #48]	; (4009b0 <usart_reset+0x64>)
  40097e:	58e3      	ldr	r3, [r4, r3]
  400980:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  400982:	6878      	ldr	r0, [r7, #4]
  400984:	4b0b      	ldr	r3, [pc, #44]	; (4009b4 <usart_reset+0x68>)
  400986:	58e3      	ldr	r3, [r4, r3]
  400988:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40098a:	6878      	ldr	r0, [r7, #4]
  40098c:	4b0a      	ldr	r3, [pc, #40]	; (4009b8 <usart_reset+0x6c>)
  40098e:	58e3      	ldr	r3, [r4, r3]
  400990:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  400992:	6878      	ldr	r0, [r7, #4]
  400994:	4b09      	ldr	r3, [pc, #36]	; (4009bc <usart_reset+0x70>)
  400996:	58e3      	ldr	r3, [r4, r3]
  400998:	4798      	blx	r3
#endif
}
  40099a:	bf00      	nop
  40099c:	370c      	adds	r7, #12
  40099e:	46bd      	mov	sp, r7
  4009a0:	bd90      	pop	{r4, r7, pc}
  4009a2:	bf00      	nop
  4009a4:	00009442 	.word	0x00009442
  4009a8:	00000018 	.word	0x00000018
  4009ac:	00000094 	.word	0x00000094
  4009b0:	0000016c 	.word	0x0000016c
  4009b4:	00000210 	.word	0x00000210
  4009b8:	000001e0 	.word	0x000001e0
  4009bc:	0000013c 	.word	0x0000013c

004009c0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4009c0:	b590      	push	{r4, r7, lr}
  4009c2:	b085      	sub	sp, #20
  4009c4:	af00      	add	r7, sp, #0
  4009c6:	60f8      	str	r0, [r7, #12]
  4009c8:	60b9      	str	r1, [r7, #8]
  4009ca:	607a      	str	r2, [r7, #4]
  4009cc:	4c1f      	ldr	r4, [pc, #124]	; (400a4c <usart_init_rs232+0x8c>)
  4009ce:	447c      	add	r4, pc
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4009d0:	68f8      	ldr	r0, [r7, #12]
  4009d2:	4b1f      	ldr	r3, [pc, #124]	; (400a50 <usart_init_rs232+0x90>)
  4009d4:	58e3      	ldr	r3, [r4, r3]
  4009d6:	4798      	blx	r3

	ul_reg_val = 0;
  4009d8:	4b1e      	ldr	r3, [pc, #120]	; (400a54 <usart_init_rs232+0x94>)
  4009da:	447b      	add	r3, pc
  4009dc:	461a      	mov	r2, r3
  4009de:	2300      	movs	r3, #0
  4009e0:	6013      	str	r3, [r2, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4009e2:	68bb      	ldr	r3, [r7, #8]
  4009e4:	2b00      	cmp	r3, #0
  4009e6:	d00a      	beq.n	4009fe <usart_init_rs232+0x3e>
  4009e8:	68bb      	ldr	r3, [r7, #8]
  4009ea:	681b      	ldr	r3, [r3, #0]
  4009ec:	687a      	ldr	r2, [r7, #4]
  4009ee:	4619      	mov	r1, r3
  4009f0:	68f8      	ldr	r0, [r7, #12]
  4009f2:	4b19      	ldr	r3, [pc, #100]	; (400a58 <usart_init_rs232+0x98>)
  4009f4:	58e3      	ldr	r3, [r4, r3]
  4009f6:	4798      	blx	r3
  4009f8:	4603      	mov	r3, r0
  4009fa:	2b00      	cmp	r3, #0
  4009fc:	d001      	beq.n	400a02 <usart_init_rs232+0x42>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4009fe:	2301      	movs	r3, #1
  400a00:	e020      	b.n	400a44 <usart_init_rs232+0x84>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a02:	68bb      	ldr	r3, [r7, #8]
  400a04:	685a      	ldr	r2, [r3, #4]
  400a06:	68bb      	ldr	r3, [r7, #8]
  400a08:	689b      	ldr	r3, [r3, #8]
  400a0a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a0c:	68bb      	ldr	r3, [r7, #8]
  400a0e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a10:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a12:	68bb      	ldr	r3, [r7, #8]
  400a14:	68db      	ldr	r3, [r3, #12]
  400a16:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a18:	4b10      	ldr	r3, [pc, #64]	; (400a5c <usart_init_rs232+0x9c>)
  400a1a:	447b      	add	r3, pc
  400a1c:	681b      	ldr	r3, [r3, #0]
  400a1e:	4313      	orrs	r3, r2
  400a20:	4a0f      	ldr	r2, [pc, #60]	; (400a60 <usart_init_rs232+0xa0>)
  400a22:	447a      	add	r2, pc
  400a24:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  400a26:	4b0f      	ldr	r3, [pc, #60]	; (400a64 <usart_init_rs232+0xa4>)
  400a28:	447b      	add	r3, pc
  400a2a:	681b      	ldr	r3, [r3, #0]
  400a2c:	4a0e      	ldr	r2, [pc, #56]	; (400a68 <usart_init_rs232+0xa8>)
  400a2e:	447a      	add	r2, pc
  400a30:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400a32:	68fb      	ldr	r3, [r7, #12]
  400a34:	685a      	ldr	r2, [r3, #4]
  400a36:	4b0d      	ldr	r3, [pc, #52]	; (400a6c <usart_init_rs232+0xac>)
  400a38:	447b      	add	r3, pc
  400a3a:	681b      	ldr	r3, [r3, #0]
  400a3c:	431a      	orrs	r2, r3
  400a3e:	68fb      	ldr	r3, [r7, #12]
  400a40:	605a      	str	r2, [r3, #4]

	return 0;
  400a42:	2300      	movs	r3, #0
}
  400a44:	4618      	mov	r0, r3
  400a46:	3714      	adds	r7, #20
  400a48:	46bd      	mov	sp, r7
  400a4a:	bd90      	pop	{r4, r7, pc}
  400a4c:	000093ca 	.word	0x000093ca
  400a50:	00000100 	.word	0x00000100
  400a54:	1fc00076 	.word	0x1fc00076
  400a58:	00000228 	.word	0x00000228
  400a5c:	1fc00036 	.word	0x1fc00036
  400a60:	1fc0002e 	.word	0x1fc0002e
  400a64:	1fc00028 	.word	0x1fc00028
  400a68:	1fc00022 	.word	0x1fc00022
  400a6c:	1fc00018 	.word	0x1fc00018

00400a70 <usart_init_hw_handshaking>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_hw_handshaking(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400a70:	b590      	push	{r4, r7, lr}
  400a72:	b085      	sub	sp, #20
  400a74:	af00      	add	r7, sp, #0
  400a76:	60f8      	str	r0, [r7, #12]
  400a78:	60b9      	str	r1, [r7, #8]
  400a7a:	607a      	str	r2, [r7, #4]
  400a7c:	4c0c      	ldr	r4, [pc, #48]	; (400ab0 <usart_init_hw_handshaking+0x40>)
  400a7e:	447c      	add	r4, pc
	/* Initialize the USART as standard RS232. */
	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
  400a80:	687a      	ldr	r2, [r7, #4]
  400a82:	68b9      	ldr	r1, [r7, #8]
  400a84:	68f8      	ldr	r0, [r7, #12]
  400a86:	4b0b      	ldr	r3, [pc, #44]	; (400ab4 <usart_init_hw_handshaking+0x44>)
  400a88:	58e3      	ldr	r3, [r4, r3]
  400a8a:	4798      	blx	r3
  400a8c:	4603      	mov	r3, r0
  400a8e:	2b00      	cmp	r3, #0
  400a90:	d001      	beq.n	400a96 <usart_init_hw_handshaking+0x26>
		return 1;
  400a92:	2301      	movs	r3, #1
  400a94:	e008      	b.n	400aa8 <usart_init_hw_handshaking+0x38>
	}

	/* Set hardware handshaking mode. */
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
  400a96:	68fb      	ldr	r3, [r7, #12]
  400a98:	685b      	ldr	r3, [r3, #4]
  400a9a:	f023 030f 	bic.w	r3, r3, #15
  400a9e:	f043 0202 	orr.w	r2, r3, #2
  400aa2:	68fb      	ldr	r3, [r7, #12]
  400aa4:	605a      	str	r2, [r3, #4]
			US_MR_USART_MODE_HW_HANDSHAKING;

	return 0;
  400aa6:	2300      	movs	r3, #0
}
  400aa8:	4618      	mov	r0, r3
  400aaa:	3714      	adds	r7, #20
  400aac:	46bd      	mov	sp, r7
  400aae:	bd90      	pop	{r4, r7, pc}
  400ab0:	0000931a 	.word	0x0000931a
  400ab4:	00000124 	.word	0x00000124

00400ab8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  400ab8:	b480      	push	{r7}
  400aba:	b083      	sub	sp, #12
  400abc:	af00      	add	r7, sp, #0
  400abe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400ac0:	687b      	ldr	r3, [r7, #4]
  400ac2:	2240      	movs	r2, #64	; 0x40
  400ac4:	601a      	str	r2, [r3, #0]
}
  400ac6:	bf00      	nop
  400ac8:	370c      	adds	r7, #12
  400aca:	46bd      	mov	sp, r7
  400acc:	bc80      	pop	{r7}
  400ace:	4770      	bx	lr

00400ad0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400ad0:	b480      	push	{r7}
  400ad2:	b083      	sub	sp, #12
  400ad4:	af00      	add	r7, sp, #0
  400ad6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ad8:	687b      	ldr	r3, [r7, #4]
  400ada:	2288      	movs	r2, #136	; 0x88
  400adc:	601a      	str	r2, [r3, #0]
}
  400ade:	bf00      	nop
  400ae0:	370c      	adds	r7, #12
  400ae2:	46bd      	mov	sp, r7
  400ae4:	bc80      	pop	{r7}
  400ae6:	4770      	bx	lr

00400ae8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  400ae8:	b480      	push	{r7}
  400aea:	b083      	sub	sp, #12
  400aec:	af00      	add	r7, sp, #0
  400aee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  400af0:	687b      	ldr	r3, [r7, #4]
  400af2:	2210      	movs	r2, #16
  400af4:	601a      	str	r2, [r3, #0]
}
  400af6:	bf00      	nop
  400af8:	370c      	adds	r7, #12
  400afa:	46bd      	mov	sp, r7
  400afc:	bc80      	pop	{r7}
  400afe:	4770      	bx	lr

00400b00 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  400b00:	b480      	push	{r7}
  400b02:	b083      	sub	sp, #12
  400b04:	af00      	add	r7, sp, #0
  400b06:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	2224      	movs	r2, #36	; 0x24
  400b0c:	601a      	str	r2, [r3, #0]
}
  400b0e:	bf00      	nop
  400b10:	370c      	adds	r7, #12
  400b12:	46bd      	mov	sp, r7
  400b14:	bc80      	pop	{r7}
  400b16:	4770      	bx	lr

00400b18 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400b18:	b480      	push	{r7}
  400b1a:	b083      	sub	sp, #12
  400b1c:	af00      	add	r7, sp, #0
  400b1e:	6078      	str	r0, [r7, #4]
  400b20:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  400b22:	687b      	ldr	r3, [r7, #4]
  400b24:	683a      	ldr	r2, [r7, #0]
  400b26:	609a      	str	r2, [r3, #8]
}
  400b28:	bf00      	nop
  400b2a:	370c      	adds	r7, #12
  400b2c:	46bd      	mov	sp, r7
  400b2e:	bc80      	pop	{r7}
  400b30:	4770      	bx	lr

00400b32 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  400b32:	b480      	push	{r7}
  400b34:	b083      	sub	sp, #12
  400b36:	af00      	add	r7, sp, #0
  400b38:	6078      	str	r0, [r7, #4]
  400b3a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  400b3c:	687b      	ldr	r3, [r7, #4]
  400b3e:	683a      	ldr	r2, [r7, #0]
  400b40:	60da      	str	r2, [r3, #12]
}
  400b42:	bf00      	nop
  400b44:	370c      	adds	r7, #12
  400b46:	46bd      	mov	sp, r7
  400b48:	bc80      	pop	{r7}
  400b4a:	4770      	bx	lr

00400b4c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400b4c:	b480      	push	{r7}
  400b4e:	b083      	sub	sp, #12
  400b50:	af00      	add	r7, sp, #0
  400b52:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400b54:	687b      	ldr	r3, [r7, #4]
  400b56:	695b      	ldr	r3, [r3, #20]
}
  400b58:	4618      	mov	r0, r3
  400b5a:	370c      	adds	r7, #12
  400b5c:	46bd      	mov	sp, r7
  400b5e:	bc80      	pop	{r7}
  400b60:	4770      	bx	lr

00400b62 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400b62:	b480      	push	{r7}
  400b64:	b083      	sub	sp, #12
  400b66:	af00      	add	r7, sp, #0
  400b68:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  400b6a:	687b      	ldr	r3, [r7, #4]
  400b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b70:	601a      	str	r2, [r3, #0]
}
  400b72:	bf00      	nop
  400b74:	370c      	adds	r7, #12
  400b76:	46bd      	mov	sp, r7
  400b78:	bc80      	pop	{r7}
  400b7a:	4770      	bx	lr

00400b7c <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400b7c:	b480      	push	{r7}
  400b7e:	b083      	sub	sp, #12
  400b80:	af00      	add	r7, sp, #0
  400b82:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400b84:	687b      	ldr	r3, [r7, #4]
  400b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400b8a:	601a      	str	r2, [r3, #0]
}
  400b8c:	bf00      	nop
  400b8e:	370c      	adds	r7, #12
  400b90:	46bd      	mov	sp, r7
  400b92:	bc80      	pop	{r7}
  400b94:	4770      	bx	lr

00400b96 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  400b96:	b480      	push	{r7}
  400b98:	b083      	sub	sp, #12
  400b9a:	af00      	add	r7, sp, #0
  400b9c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400b9e:	687b      	ldr	r3, [r7, #4]
  400ba0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ba4:	601a      	str	r2, [r3, #0]
}
  400ba6:	bf00      	nop
  400ba8:	370c      	adds	r7, #12
  400baa:	46bd      	mov	sp, r7
  400bac:	bc80      	pop	{r7}
  400bae:	4770      	bx	lr

00400bb0 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400bb0:	b480      	push	{r7}
  400bb2:	b083      	sub	sp, #12
  400bb4:	af00      	add	r7, sp, #0
  400bb6:	6078      	str	r0, [r7, #4]
  400bb8:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400bba:	bf00      	nop
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	695b      	ldr	r3, [r3, #20]
  400bc0:	f003 0302 	and.w	r3, r3, #2
  400bc4:	2b00      	cmp	r3, #0
  400bc6:	d0f9      	beq.n	400bbc <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400bc8:	683b      	ldr	r3, [r7, #0]
  400bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400bce:	687b      	ldr	r3, [r7, #4]
  400bd0:	61da      	str	r2, [r3, #28]

	return 0;
  400bd2:	2300      	movs	r3, #0
}
  400bd4:	4618      	mov	r0, r3
  400bd6:	370c      	adds	r7, #12
  400bd8:	46bd      	mov	sp, r7
  400bda:	bc80      	pop	{r7}
  400bdc:	4770      	bx	lr
	...

00400be0 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400be0:	b590      	push	{r4, r7, lr}
  400be2:	b083      	sub	sp, #12
  400be4:	af00      	add	r7, sp, #0
  400be6:	6078      	str	r0, [r7, #4]
  400be8:	6039      	str	r1, [r7, #0]
  400bea:	4c0a      	ldr	r4, [pc, #40]	; (400c14 <usart_write_line+0x34>)
  400bec:	447c      	add	r4, pc
	while (*string != '\0') {
  400bee:	e008      	b.n	400c02 <usart_write_line+0x22>
		usart_putchar(p_usart, *string++);
  400bf0:	683b      	ldr	r3, [r7, #0]
  400bf2:	1c5a      	adds	r2, r3, #1
  400bf4:	603a      	str	r2, [r7, #0]
  400bf6:	781b      	ldrb	r3, [r3, #0]
  400bf8:	4619      	mov	r1, r3
  400bfa:	6878      	ldr	r0, [r7, #4]
  400bfc:	4b06      	ldr	r3, [pc, #24]	; (400c18 <usart_write_line+0x38>)
  400bfe:	58e3      	ldr	r3, [r4, r3]
  400c00:	4798      	blx	r3
	while (*string != '\0') {
  400c02:	683b      	ldr	r3, [r7, #0]
  400c04:	781b      	ldrb	r3, [r3, #0]
  400c06:	2b00      	cmp	r3, #0
  400c08:	d1f2      	bne.n	400bf0 <usart_write_line+0x10>
	}
}
  400c0a:	bf00      	nop
  400c0c:	370c      	adds	r7, #12
  400c0e:	46bd      	mov	sp, r7
  400c10:	bd90      	pop	{r4, r7, pc}
  400c12:	bf00      	nop
  400c14:	000091ac 	.word	0x000091ac
  400c18:	00000244 	.word	0x00000244

00400c1c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  400c1c:	b480      	push	{r7}
  400c1e:	b083      	sub	sp, #12
  400c20:	af00      	add	r7, sp, #0
  400c22:	6078      	str	r0, [r7, #4]
  400c24:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c26:	687b      	ldr	r3, [r7, #4]
  400c28:	695b      	ldr	r3, [r3, #20]
  400c2a:	f003 0301 	and.w	r3, r3, #1
  400c2e:	2b00      	cmp	r3, #0
  400c30:	d101      	bne.n	400c36 <usart_read+0x1a>
		return 1;
  400c32:	2301      	movs	r3, #1
  400c34:	e006      	b.n	400c44 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c36:	687b      	ldr	r3, [r7, #4]
  400c38:	699b      	ldr	r3, [r3, #24]
  400c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400c3e:	683b      	ldr	r3, [r7, #0]
  400c40:	601a      	str	r2, [r3, #0]

	return 0;
  400c42:	2300      	movs	r3, #0
}
  400c44:	4618      	mov	r0, r3
  400c46:	370c      	adds	r7, #12
  400c48:	46bd      	mov	sp, r7
  400c4a:	bc80      	pop	{r7}
  400c4c:	4770      	bx	lr
	...

00400c50 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  400c50:	b480      	push	{r7}
  400c52:	b083      	sub	sp, #12
  400c54:	af00      	add	r7, sp, #0
  400c56:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400c58:	687b      	ldr	r3, [r7, #4]
  400c5a:	4a04      	ldr	r2, [pc, #16]	; (400c6c <usart_disable_writeprotect+0x1c>)
  400c5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400c60:	bf00      	nop
  400c62:	370c      	adds	r7, #12
  400c64:	46bd      	mov	sp, r7
  400c66:	bc80      	pop	{r7}
  400c68:	4770      	bx	lr
  400c6a:	bf00      	nop
  400c6c:	55534100 	.word	0x55534100

00400c70 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  400c70:	b480      	push	{r7}
  400c72:	b083      	sub	sp, #12
  400c74:	af00      	add	r7, sp, #0
  400c76:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400c78:	687b      	ldr	r3, [r7, #4]
  400c7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400c7e:	605a      	str	r2, [r3, #4]

}
  400c80:	bf00      	nop
  400c82:	370c      	adds	r7, #12
  400c84:	46bd      	mov	sp, r7
  400c86:	bc80      	pop	{r7}
  400c88:	4770      	bx	lr
	...

00400c8c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400c8c:	b580      	push	{r7, lr}
  400c8e:	b082      	sub	sp, #8
  400c90:	af00      	add	r7, sp, #0
  400c92:	6078      	str	r0, [r7, #4]
  400c94:	4b21      	ldr	r3, [pc, #132]	; (400d1c <osc_enable+0x90>)
  400c96:	447b      	add	r3, pc
	switch (ul_id) {
  400c98:	687a      	ldr	r2, [r7, #4]
  400c9a:	2a07      	cmp	r2, #7
  400c9c:	d83a      	bhi.n	400d14 <osc_enable+0x88>
  400c9e:	a102      	add	r1, pc, #8	; (adr r1, 400ca8 <osc_enable+0x1c>)
  400ca0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  400ca4:	4411      	add	r1, r2
  400ca6:	4708      	bx	r1
  400ca8:	0000006b 	.word	0x0000006b
  400cac:	00000021 	.word	0x00000021
  400cb0:	0000002b 	.word	0x0000002b
  400cb4:	00000035 	.word	0x00000035
  400cb8:	0000003f 	.word	0x0000003f
  400cbc:	00000049 	.word	0x00000049
  400cc0:	00000053 	.word	0x00000053
  400cc4:	0000005f 	.word	0x0000005f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400cc8:	2000      	movs	r0, #0
  400cca:	4a15      	ldr	r2, [pc, #84]	; (400d20 <osc_enable+0x94>)
  400ccc:	589b      	ldr	r3, [r3, r2]
  400cce:	4798      	blx	r3
		break;
  400cd0:	e020      	b.n	400d14 <osc_enable+0x88>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400cd2:	2001      	movs	r0, #1
  400cd4:	4a12      	ldr	r2, [pc, #72]	; (400d20 <osc_enable+0x94>)
  400cd6:	589b      	ldr	r3, [r3, r2]
  400cd8:	4798      	blx	r3
		break;
  400cda:	e01b      	b.n	400d14 <osc_enable+0x88>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400cdc:	2000      	movs	r0, #0
  400cde:	4a11      	ldr	r2, [pc, #68]	; (400d24 <osc_enable+0x98>)
  400ce0:	589b      	ldr	r3, [r3, r2]
  400ce2:	4798      	blx	r3
		break;
  400ce4:	e016      	b.n	400d14 <osc_enable+0x88>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400ce6:	2010      	movs	r0, #16
  400ce8:	4a0e      	ldr	r2, [pc, #56]	; (400d24 <osc_enable+0x98>)
  400cea:	589b      	ldr	r3, [r3, r2]
  400cec:	4798      	blx	r3
		break;
  400cee:	e011      	b.n	400d14 <osc_enable+0x88>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400cf0:	2020      	movs	r0, #32
  400cf2:	4a0c      	ldr	r2, [pc, #48]	; (400d24 <osc_enable+0x98>)
  400cf4:	589b      	ldr	r3, [r3, r2]
  400cf6:	4798      	blx	r3
		break;
  400cf8:	e00c      	b.n	400d14 <osc_enable+0x88>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400cfa:	213e      	movs	r1, #62	; 0x3e
  400cfc:	2000      	movs	r0, #0
  400cfe:	4a0a      	ldr	r2, [pc, #40]	; (400d28 <osc_enable+0x9c>)
  400d00:	589b      	ldr	r3, [r3, r2]
  400d02:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400d04:	e006      	b.n	400d14 <osc_enable+0x88>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400d06:	213e      	movs	r1, #62	; 0x3e
  400d08:	2001      	movs	r0, #1
  400d0a:	4a07      	ldr	r2, [pc, #28]	; (400d28 <osc_enable+0x9c>)
  400d0c:	589b      	ldr	r3, [r3, r2]
  400d0e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400d10:	e000      	b.n	400d14 <osc_enable+0x88>
		break;
  400d12:	bf00      	nop
	}
}
  400d14:	bf00      	nop
  400d16:	3708      	adds	r7, #8
  400d18:	46bd      	mov	sp, r7
  400d1a:	bd80      	pop	{r7, pc}
  400d1c:	00009102 	.word	0x00009102
  400d20:	00000194 	.word	0x00000194
  400d24:	00000014 	.word	0x00000014
  400d28:	0000002c 	.word	0x0000002c

00400d2c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400d2c:	b580      	push	{r7, lr}
  400d2e:	b082      	sub	sp, #8
  400d30:	af00      	add	r7, sp, #0
  400d32:	6078      	str	r0, [r7, #4]
  400d34:	4b1a      	ldr	r3, [pc, #104]	; (400da0 <osc_is_ready+0x74>)
  400d36:	447b      	add	r3, pc
	switch (ul_id) {
  400d38:	687a      	ldr	r2, [r7, #4]
  400d3a:	2a07      	cmp	r2, #7
  400d3c:	d82a      	bhi.n	400d94 <osc_is_ready+0x68>
  400d3e:	a102      	add	r1, pc, #8	; (adr r1, 400d48 <osc_is_ready+0x1c>)
  400d40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  400d44:	4411      	add	r1, r2
  400d46:	4708      	bx	r1
  400d48:	00000021 	.word	0x00000021
  400d4c:	00000025 	.word	0x00000025
  400d50:	00000025 	.word	0x00000025
  400d54:	00000039 	.word	0x00000039
  400d58:	00000039 	.word	0x00000039
  400d5c:	00000039 	.word	0x00000039
  400d60:	00000039 	.word	0x00000039
  400d64:	00000039 	.word	0x00000039
	case OSC_SLCK_32K_RC:
		return 1;
  400d68:	2301      	movs	r3, #1
  400d6a:	e014      	b.n	400d96 <osc_is_ready+0x6a>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400d6c:	4a0d      	ldr	r2, [pc, #52]	; (400da4 <osc_is_ready+0x78>)
  400d6e:	589b      	ldr	r3, [r3, r2]
  400d70:	4798      	blx	r3
  400d72:	4603      	mov	r3, r0
  400d74:	2b00      	cmp	r3, #0
  400d76:	bf14      	ite	ne
  400d78:	2301      	movne	r3, #1
  400d7a:	2300      	moveq	r3, #0
  400d7c:	b2db      	uxtb	r3, r3
  400d7e:	e00a      	b.n	400d96 <osc_is_ready+0x6a>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400d80:	4a09      	ldr	r2, [pc, #36]	; (400da8 <osc_is_ready+0x7c>)
  400d82:	589b      	ldr	r3, [r3, r2]
  400d84:	4798      	blx	r3
  400d86:	4603      	mov	r3, r0
  400d88:	2b00      	cmp	r3, #0
  400d8a:	bf14      	ite	ne
  400d8c:	2301      	movne	r3, #1
  400d8e:	2300      	moveq	r3, #0
  400d90:	b2db      	uxtb	r3, r3
  400d92:	e000      	b.n	400d96 <osc_is_ready+0x6a>
	}

	return 0;
  400d94:	2300      	movs	r3, #0
}
  400d96:	4618      	mov	r0, r3
  400d98:	3708      	adds	r7, #8
  400d9a:	46bd      	mov	sp, r7
  400d9c:	bd80      	pop	{r7, pc}
  400d9e:	bf00      	nop
  400da0:	00009062 	.word	0x00009062
  400da4:	0000003c 	.word	0x0000003c
  400da8:	00000130 	.word	0x00000130

00400dac <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400dac:	b480      	push	{r7}
  400dae:	b083      	sub	sp, #12
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400db4:	687b      	ldr	r3, [r7, #4]
  400db6:	2b07      	cmp	r3, #7
  400db8:	d827      	bhi.n	400e0a <osc_get_rate+0x5e>
  400dba:	a202      	add	r2, pc, #8	; (adr r2, 400dc4 <osc_get_rate+0x18>)
  400dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400dc0:	441a      	add	r2, r3
  400dc2:	4710      	bx	r2
  400dc4:	00000021 	.word	0x00000021
  400dc8:	00000027 	.word	0x00000027
  400dcc:	0000002d 	.word	0x0000002d
  400dd0:	00000033 	.word	0x00000033
  400dd4:	00000037 	.word	0x00000037
  400dd8:	0000003b 	.word	0x0000003b
  400ddc:	0000003f 	.word	0x0000003f
  400de0:	00000043 	.word	0x00000043
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400de4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400de8:	e010      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dee:	e00d      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400df4:	e00a      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400df6:	4b08      	ldr	r3, [pc, #32]	; (400e18 <osc_get_rate+0x6c>)
  400df8:	e008      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400dfa:	4b08      	ldr	r3, [pc, #32]	; (400e1c <osc_get_rate+0x70>)
  400dfc:	e006      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400dfe:	4b08      	ldr	r3, [pc, #32]	; (400e20 <osc_get_rate+0x74>)
  400e00:	e004      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400e02:	4b07      	ldr	r3, [pc, #28]	; (400e20 <osc_get_rate+0x74>)
  400e04:	e002      	b.n	400e0c <osc_get_rate+0x60>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400e06:	4b06      	ldr	r3, [pc, #24]	; (400e20 <osc_get_rate+0x74>)
  400e08:	e000      	b.n	400e0c <osc_get_rate+0x60>
	}

	return 0;
  400e0a:	2300      	movs	r3, #0
}
  400e0c:	4618      	mov	r0, r3
  400e0e:	370c      	adds	r7, #12
  400e10:	46bd      	mov	sp, r7
  400e12:	bc80      	pop	{r7}
  400e14:	4770      	bx	lr
  400e16:	bf00      	nop
  400e18:	003d0900 	.word	0x003d0900
  400e1c:	007a1200 	.word	0x007a1200
  400e20:	00b71b00 	.word	0x00b71b00

00400e24 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400e24:	b580      	push	{r7, lr}
  400e26:	b082      	sub	sp, #8
  400e28:	af00      	add	r7, sp, #0
  400e2a:	4603      	mov	r3, r0
  400e2c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400e2e:	bf00      	nop
  400e30:	79fb      	ldrb	r3, [r7, #7]
  400e32:	4618      	mov	r0, r3
  400e34:	4b06      	ldr	r3, [pc, #24]	; (400e50 <osc_wait_ready+0x2c>)
  400e36:	447b      	add	r3, pc
  400e38:	4798      	blx	r3
  400e3a:	4603      	mov	r3, r0
  400e3c:	f083 0301 	eor.w	r3, r3, #1
  400e40:	b2db      	uxtb	r3, r3
  400e42:	2b00      	cmp	r3, #0
  400e44:	d1f4      	bne.n	400e30 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400e46:	bf00      	nop
  400e48:	3708      	adds	r7, #8
  400e4a:	46bd      	mov	sp, r7
  400e4c:	bd80      	pop	{r7, pc}
  400e4e:	bf00      	nop
  400e50:	fffffef3 	.word	0xfffffef3

00400e54 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400e54:	b580      	push	{r7, lr}
  400e56:	b086      	sub	sp, #24
  400e58:	af00      	add	r7, sp, #0
  400e5a:	60f8      	str	r0, [r7, #12]
  400e5c:	607a      	str	r2, [r7, #4]
  400e5e:	603b      	str	r3, [r7, #0]
  400e60:	460b      	mov	r3, r1
  400e62:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400e64:	7afb      	ldrb	r3, [r7, #11]
  400e66:	4618      	mov	r0, r3
  400e68:	4b0f      	ldr	r3, [pc, #60]	; (400ea8 <pll_config_init+0x54>)
  400e6a:	447b      	add	r3, pc
  400e6c:	4798      	blx	r3
  400e6e:	4602      	mov	r2, r0
  400e70:	687b      	ldr	r3, [r7, #4]
  400e72:	fbb2 f3f3 	udiv	r3, r2, r3
  400e76:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  400e78:	697b      	ldr	r3, [r7, #20]
  400e7a:	683a      	ldr	r2, [r7, #0]
  400e7c:	fb02 f303 	mul.w	r3, r2, r3
  400e80:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400e82:	683b      	ldr	r3, [r7, #0]
  400e84:	3b01      	subs	r3, #1
  400e86:	041a      	lsls	r2, r3, #16
  400e88:	4b06      	ldr	r3, [pc, #24]	; (400ea4 <pll_config_init+0x50>)
  400e8a:	4013      	ands	r3, r2
  400e8c:	687a      	ldr	r2, [r7, #4]
  400e8e:	b2d2      	uxtb	r2, r2
  400e90:	4313      	orrs	r3, r2
  400e92:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  400e96:	68fb      	ldr	r3, [r7, #12]
  400e98:	601a      	str	r2, [r3, #0]
}
  400e9a:	bf00      	nop
  400e9c:	3718      	adds	r7, #24
  400e9e:	46bd      	mov	sp, r7
  400ea0:	bd80      	pop	{r7, pc}
  400ea2:	bf00      	nop
  400ea4:	07ff0000 	.word	0x07ff0000
  400ea8:	ffffff3f 	.word	0xffffff3f

00400eac <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b082      	sub	sp, #8
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	6078      	str	r0, [r7, #4]
  400eb4:	6039      	str	r1, [r7, #0]
  400eb6:	4b0e      	ldr	r3, [pc, #56]	; (400ef0 <pll_enable+0x44>)
  400eb8:	447b      	add	r3, pc
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400eba:	683a      	ldr	r2, [r7, #0]
  400ebc:	2a00      	cmp	r2, #0
  400ebe:	d109      	bne.n	400ed4 <pll_enable+0x28>
		pmc_disable_pllack(); // Always stop PLL first!
  400ec0:	4a0c      	ldr	r2, [pc, #48]	; (400ef4 <pll_enable+0x48>)
  400ec2:	589b      	ldr	r3, [r3, r2]
  400ec4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ec6:	4a09      	ldr	r2, [pc, #36]	; (400eec <pll_enable+0x40>)
  400ec8:	687b      	ldr	r3, [r7, #4]
  400eca:	681b      	ldr	r3, [r3, #0]
  400ecc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400ed0:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400ed2:	e006      	b.n	400ee2 <pll_enable+0x36>
		pmc_disable_pllbck();
  400ed4:	4a08      	ldr	r2, [pc, #32]	; (400ef8 <pll_enable+0x4c>)
  400ed6:	589b      	ldr	r3, [r3, r2]
  400ed8:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400eda:	4a04      	ldr	r2, [pc, #16]	; (400eec <pll_enable+0x40>)
  400edc:	687b      	ldr	r3, [r7, #4]
  400ede:	681b      	ldr	r3, [r3, #0]
  400ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400ee2:	bf00      	nop
  400ee4:	3708      	adds	r7, #8
  400ee6:	46bd      	mov	sp, r7
  400ee8:	bd80      	pop	{r7, pc}
  400eea:	bf00      	nop
  400eec:	400e0400 	.word	0x400e0400
  400ef0:	00008ee0 	.word	0x00008ee0
  400ef4:	00000034 	.word	0x00000034
  400ef8:	000000a0 	.word	0x000000a0

00400efc <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400efc:	b580      	push	{r7, lr}
  400efe:	b082      	sub	sp, #8
  400f00:	af00      	add	r7, sp, #0
  400f02:	6078      	str	r0, [r7, #4]
  400f04:	4b08      	ldr	r3, [pc, #32]	; (400f28 <pll_is_locked+0x2c>)
  400f06:	447b      	add	r3, pc
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400f08:	687a      	ldr	r2, [r7, #4]
  400f0a:	2a00      	cmp	r2, #0
  400f0c:	d104      	bne.n	400f18 <pll_is_locked+0x1c>
		return pmc_is_locked_pllack();
  400f0e:	4a07      	ldr	r2, [pc, #28]	; (400f2c <pll_is_locked+0x30>)
  400f10:	589b      	ldr	r3, [r3, r2]
  400f12:	4798      	blx	r3
  400f14:	4603      	mov	r3, r0
  400f16:	e003      	b.n	400f20 <pll_is_locked+0x24>
	} else {
		return pmc_is_locked_pllbck();
  400f18:	4a05      	ldr	r2, [pc, #20]	; (400f30 <pll_is_locked+0x34>)
  400f1a:	589b      	ldr	r3, [r3, r2]
  400f1c:	4798      	blx	r3
  400f1e:	4603      	mov	r3, r0
	}
}
  400f20:	4618      	mov	r0, r3
  400f22:	3708      	adds	r7, #8
  400f24:	46bd      	mov	sp, r7
  400f26:	bd80      	pop	{r7, pc}
  400f28:	00008e92 	.word	0x00008e92
  400f2c:	00000134 	.word	0x00000134
  400f30:	00000208 	.word	0x00000208

00400f34 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400f34:	b580      	push	{r7, lr}
  400f36:	b082      	sub	sp, #8
  400f38:	af00      	add	r7, sp, #0
  400f3a:	4603      	mov	r3, r0
  400f3c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400f3e:	79fb      	ldrb	r3, [r7, #7]
  400f40:	3b03      	subs	r3, #3
  400f42:	2b04      	cmp	r3, #4
  400f44:	d80a      	bhi.n	400f5c <pll_enable_source+0x28>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400f46:	79fb      	ldrb	r3, [r7, #7]
  400f48:	4618      	mov	r0, r3
  400f4a:	4b07      	ldr	r3, [pc, #28]	; (400f68 <pll_enable_source+0x34>)
  400f4c:	447b      	add	r3, pc
  400f4e:	4798      	blx	r3
		osc_wait_ready(e_src);
  400f50:	79fb      	ldrb	r3, [r7, #7]
  400f52:	4618      	mov	r0, r3
  400f54:	4b05      	ldr	r3, [pc, #20]	; (400f6c <pll_enable_source+0x38>)
  400f56:	447b      	add	r3, pc
  400f58:	4798      	blx	r3
		break;
  400f5a:	e000      	b.n	400f5e <pll_enable_source+0x2a>

	default:
		Assert(false);
		break;
  400f5c:	bf00      	nop
	}
}
  400f5e:	bf00      	nop
  400f60:	3708      	adds	r7, #8
  400f62:	46bd      	mov	sp, r7
  400f64:	bd80      	pop	{r7, pc}
  400f66:	bf00      	nop
  400f68:	fffffd3d 	.word	0xfffffd3d
  400f6c:	fffffecb 	.word	0xfffffecb

00400f70 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400f70:	b580      	push	{r7, lr}
  400f72:	b082      	sub	sp, #8
  400f74:	af00      	add	r7, sp, #0
  400f76:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400f78:	bf00      	nop
  400f7a:	6878      	ldr	r0, [r7, #4]
  400f7c:	4b05      	ldr	r3, [pc, #20]	; (400f94 <pll_wait_for_lock+0x24>)
  400f7e:	447b      	add	r3, pc
  400f80:	4798      	blx	r3
  400f82:	4603      	mov	r3, r0
  400f84:	2b00      	cmp	r3, #0
  400f86:	d0f8      	beq.n	400f7a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400f88:	2300      	movs	r3, #0
}
  400f8a:	4618      	mov	r0, r3
  400f8c:	3708      	adds	r7, #8
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd80      	pop	{r7, pc}
  400f92:	bf00      	nop
  400f94:	ffffff7b 	.word	0xffffff7b

00400f98 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400f98:	b580      	push	{r7, lr}
  400f9a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400f9c:	2006      	movs	r0, #6
  400f9e:	4b05      	ldr	r3, [pc, #20]	; (400fb4 <sysclk_get_main_hz+0x1c>)
  400fa0:	447b      	add	r3, pc
  400fa2:	4798      	blx	r3
  400fa4:	4602      	mov	r2, r0
  400fa6:	4613      	mov	r3, r2
  400fa8:	009b      	lsls	r3, r3, #2
  400faa:	4413      	add	r3, r2
  400fac:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400fae:	4618      	mov	r0, r3
  400fb0:	bd80      	pop	{r7, pc}
  400fb2:	bf00      	nop
  400fb4:	fffffe09 	.word	0xfffffe09

00400fb8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400fb8:	b580      	push	{r7, lr}
  400fba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400fbc:	4b03      	ldr	r3, [pc, #12]	; (400fcc <sysclk_get_cpu_hz+0x14>)
  400fbe:	447b      	add	r3, pc
  400fc0:	4798      	blx	r3
  400fc2:	4603      	mov	r3, r0
  400fc4:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400fc6:	4618      	mov	r0, r3
  400fc8:	bd80      	pop	{r7, pc}
  400fca:	bf00      	nop
  400fcc:	ffffffd7 	.word	0xffffffd7

00400fd0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400fd0:	b5b0      	push	{r4, r5, r7, lr}
  400fd2:	b082      	sub	sp, #8
  400fd4:	af00      	add	r7, sp, #0
  400fd6:	4c18      	ldr	r4, [pc, #96]	; (401038 <sysclk_init+0x68>)
  400fd8:	447c      	add	r4, pc
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400fda:	4816      	ldr	r0, [pc, #88]	; (401034 <sysclk_init+0x64>)
  400fdc:	4b17      	ldr	r3, [pc, #92]	; (40103c <sysclk_init+0x6c>)
  400fde:	58e3      	ldr	r3, [r4, r3]
  400fe0:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400fe2:	2006      	movs	r0, #6
  400fe4:	4b16      	ldr	r3, [pc, #88]	; (401040 <sysclk_init+0x70>)
  400fe6:	447b      	add	r3, pc
  400fe8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400fea:	1d38      	adds	r0, r7, #4
  400fec:	2314      	movs	r3, #20
  400fee:	2201      	movs	r2, #1
  400ff0:	2106      	movs	r1, #6
  400ff2:	4d14      	ldr	r5, [pc, #80]	; (401044 <sysclk_init+0x74>)
  400ff4:	447d      	add	r5, pc
  400ff6:	47a8      	blx	r5
		pll_enable(&pllcfg, 0);
  400ff8:	1d3b      	adds	r3, r7, #4
  400ffa:	2100      	movs	r1, #0
  400ffc:	4618      	mov	r0, r3
  400ffe:	4b12      	ldr	r3, [pc, #72]	; (401048 <sysclk_init+0x78>)
  401000:	447b      	add	r3, pc
  401002:	4798      	blx	r3
		pll_wait_for_lock(0);
  401004:	2000      	movs	r0, #0
  401006:	4b11      	ldr	r3, [pc, #68]	; (40104c <sysclk_init+0x7c>)
  401008:	447b      	add	r3, pc
  40100a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40100c:	2010      	movs	r0, #16
  40100e:	4b10      	ldr	r3, [pc, #64]	; (401050 <sysclk_init+0x80>)
  401010:	58e3      	ldr	r3, [r4, r3]
  401012:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401014:	4b0f      	ldr	r3, [pc, #60]	; (401054 <sysclk_init+0x84>)
  401016:	58e3      	ldr	r3, [r4, r3]
  401018:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40101a:	4b0f      	ldr	r3, [pc, #60]	; (401058 <sysclk_init+0x88>)
  40101c:	447b      	add	r3, pc
  40101e:	4798      	blx	r3
  401020:	4603      	mov	r3, r0
  401022:	4618      	mov	r0, r3
  401024:	4b05      	ldr	r3, [pc, #20]	; (40103c <sysclk_init+0x6c>)
  401026:	58e3      	ldr	r3, [r4, r3]
  401028:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40102a:	bf00      	nop
  40102c:	3708      	adds	r7, #8
  40102e:	46bd      	mov	sp, r7
  401030:	bdb0      	pop	{r4, r5, r7, pc}
  401032:	bf00      	nop
  401034:	07270e00 	.word	0x07270e00
  401038:	00008dc0 	.word	0x00008dc0
  40103c:	00000064 	.word	0x00000064
  401040:	ffffff4b 	.word	0xffffff4b
  401044:	fffffe5d 	.word	0xfffffe5d
  401048:	fffffea9 	.word	0xfffffea9
  40104c:	ffffff65 	.word	0xffffff65
  401050:	000001ec 	.word	0x000001ec
  401054:	00000204 	.word	0x00000204
  401058:	ffffff99 	.word	0xffffff99

0040105c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40105c:	b480      	push	{r7}
  40105e:	b085      	sub	sp, #20
  401060:	af00      	add	r7, sp, #0
  401062:	60f8      	str	r0, [r7, #12]
  401064:	60b9      	str	r1, [r7, #8]
  401066:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401068:	687b      	ldr	r3, [r7, #4]
  40106a:	2b00      	cmp	r3, #0
  40106c:	d003      	beq.n	401076 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40106e:	68fb      	ldr	r3, [r7, #12]
  401070:	68ba      	ldr	r2, [r7, #8]
  401072:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401074:	e002      	b.n	40107c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401076:	68fb      	ldr	r3, [r7, #12]
  401078:	68ba      	ldr	r2, [r7, #8]
  40107a:	661a      	str	r2, [r3, #96]	; 0x60
}
  40107c:	bf00      	nop
  40107e:	3714      	adds	r7, #20
  401080:	46bd      	mov	sp, r7
  401082:	bc80      	pop	{r7}
  401084:	4770      	bx	lr

00401086 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  401086:	b480      	push	{r7}
  401088:	b085      	sub	sp, #20
  40108a:	af00      	add	r7, sp, #0
  40108c:	60f8      	str	r0, [r7, #12]
  40108e:	60b9      	str	r1, [r7, #8]
  401090:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  401092:	68fb      	ldr	r3, [r7, #12]
  401094:	68ba      	ldr	r2, [r7, #8]
  401096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40109a:	687b      	ldr	r3, [r7, #4]
  40109c:	005b      	lsls	r3, r3, #1
  40109e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4010a2:	fbb2 f3f3 	udiv	r3, r2, r3
  4010a6:	3b01      	subs	r3, #1
  4010a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
  4010ac:	68fb      	ldr	r3, [r7, #12]
  4010ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  4010b2:	bf00      	nop
  4010b4:	3714      	adds	r7, #20
  4010b6:	46bd      	mov	sp, r7
  4010b8:	bc80      	pop	{r7}
  4010ba:	4770      	bx	lr

004010bc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4010bc:	b480      	push	{r7}
  4010be:	b087      	sub	sp, #28
  4010c0:	af00      	add	r7, sp, #0
  4010c2:	60f8      	str	r0, [r7, #12]
  4010c4:	60b9      	str	r1, [r7, #8]
  4010c6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4010c8:	68fb      	ldr	r3, [r7, #12]
  4010ca:	687a      	ldr	r2, [r7, #4]
  4010cc:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4010ce:	68bb      	ldr	r3, [r7, #8]
  4010d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010d4:	d04a      	beq.n	40116c <pio_set_peripheral+0xb0>
  4010d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010da:	d808      	bhi.n	4010ee <pio_set_peripheral+0x32>
  4010dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010e0:	d016      	beq.n	401110 <pio_set_peripheral+0x54>
  4010e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010e6:	d02c      	beq.n	401142 <pio_set_peripheral+0x86>
  4010e8:	2b00      	cmp	r3, #0
  4010ea:	d069      	beq.n	4011c0 <pio_set_peripheral+0x104>
  4010ec:	e064      	b.n	4011b8 <pio_set_peripheral+0xfc>
  4010ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4010f2:	d065      	beq.n	4011c0 <pio_set_peripheral+0x104>
  4010f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4010f8:	d803      	bhi.n	401102 <pio_set_peripheral+0x46>
  4010fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010fe:	d04a      	beq.n	401196 <pio_set_peripheral+0xda>
  401100:	e05a      	b.n	4011b8 <pio_set_peripheral+0xfc>
  401102:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401106:	d05b      	beq.n	4011c0 <pio_set_peripheral+0x104>
  401108:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40110c:	d058      	beq.n	4011c0 <pio_set_peripheral+0x104>
  40110e:	e053      	b.n	4011b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401110:	68fb      	ldr	r3, [r7, #12]
  401112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401114:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401116:	68fb      	ldr	r3, [r7, #12]
  401118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40111a:	687b      	ldr	r3, [r7, #4]
  40111c:	43d9      	mvns	r1, r3
  40111e:	697b      	ldr	r3, [r7, #20]
  401120:	400b      	ands	r3, r1
  401122:	401a      	ands	r2, r3
  401124:	68fb      	ldr	r3, [r7, #12]
  401126:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401128:	68fb      	ldr	r3, [r7, #12]
  40112a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40112c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40112e:	68fb      	ldr	r3, [r7, #12]
  401130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401132:	687b      	ldr	r3, [r7, #4]
  401134:	43d9      	mvns	r1, r3
  401136:	697b      	ldr	r3, [r7, #20]
  401138:	400b      	ands	r3, r1
  40113a:	401a      	ands	r2, r3
  40113c:	68fb      	ldr	r3, [r7, #12]
  40113e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401140:	e03a      	b.n	4011b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401142:	68fb      	ldr	r3, [r7, #12]
  401144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401146:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401148:	687a      	ldr	r2, [r7, #4]
  40114a:	697b      	ldr	r3, [r7, #20]
  40114c:	431a      	orrs	r2, r3
  40114e:	68fb      	ldr	r3, [r7, #12]
  401150:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401152:	68fb      	ldr	r3, [r7, #12]
  401154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401156:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401158:	68fb      	ldr	r3, [r7, #12]
  40115a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40115c:	687b      	ldr	r3, [r7, #4]
  40115e:	43d9      	mvns	r1, r3
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	400b      	ands	r3, r1
  401164:	401a      	ands	r2, r3
  401166:	68fb      	ldr	r3, [r7, #12]
  401168:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40116a:	e025      	b.n	4011b8 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40116c:	68fb      	ldr	r3, [r7, #12]
  40116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401170:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401176:	687b      	ldr	r3, [r7, #4]
  401178:	43d9      	mvns	r1, r3
  40117a:	697b      	ldr	r3, [r7, #20]
  40117c:	400b      	ands	r3, r1
  40117e:	401a      	ands	r2, r3
  401180:	68fb      	ldr	r3, [r7, #12]
  401182:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401184:	68fb      	ldr	r3, [r7, #12]
  401186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401188:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40118a:	687a      	ldr	r2, [r7, #4]
  40118c:	697b      	ldr	r3, [r7, #20]
  40118e:	431a      	orrs	r2, r3
  401190:	68fb      	ldr	r3, [r7, #12]
  401192:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401194:	e010      	b.n	4011b8 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401196:	68fb      	ldr	r3, [r7, #12]
  401198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40119a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40119c:	687a      	ldr	r2, [r7, #4]
  40119e:	697b      	ldr	r3, [r7, #20]
  4011a0:	431a      	orrs	r2, r3
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011a6:	68fb      	ldr	r3, [r7, #12]
  4011a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4011ac:	687a      	ldr	r2, [r7, #4]
  4011ae:	697b      	ldr	r3, [r7, #20]
  4011b0:	431a      	orrs	r2, r3
  4011b2:	68fb      	ldr	r3, [r7, #12]
  4011b4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011b6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4011b8:	68fb      	ldr	r3, [r7, #12]
  4011ba:	687a      	ldr	r2, [r7, #4]
  4011bc:	605a      	str	r2, [r3, #4]
  4011be:	e000      	b.n	4011c2 <pio_set_peripheral+0x106>
		return;
  4011c0:	bf00      	nop
}
  4011c2:	371c      	adds	r7, #28
  4011c4:	46bd      	mov	sp, r7
  4011c6:	bc80      	pop	{r7}
  4011c8:	4770      	bx	lr
	...

004011cc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4011cc:	b590      	push	{r4, r7, lr}
  4011ce:	b085      	sub	sp, #20
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	60f8      	str	r0, [r7, #12]
  4011d4:	60b9      	str	r1, [r7, #8]
  4011d6:	607a      	str	r2, [r7, #4]
  4011d8:	4c1c      	ldr	r4, [pc, #112]	; (40124c <pio_set_input+0x80>)
  4011da:	447c      	add	r4, pc
	pio_disable_interrupt(p_pio, ul_mask);
  4011dc:	68b9      	ldr	r1, [r7, #8]
  4011de:	68f8      	ldr	r0, [r7, #12]
  4011e0:	4b1b      	ldr	r3, [pc, #108]	; (401250 <pio_set_input+0x84>)
  4011e2:	58e3      	ldr	r3, [r4, r3]
  4011e4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	f003 0301 	and.w	r3, r3, #1
  4011ec:	461a      	mov	r2, r3
  4011ee:	68b9      	ldr	r1, [r7, #8]
  4011f0:	68f8      	ldr	r0, [r7, #12]
  4011f2:	4b18      	ldr	r3, [pc, #96]	; (401254 <pio_set_input+0x88>)
  4011f4:	58e3      	ldr	r3, [r4, r3]
  4011f6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4011f8:	687b      	ldr	r3, [r7, #4]
  4011fa:	f003 030a 	and.w	r3, r3, #10
  4011fe:	2b00      	cmp	r3, #0
  401200:	d003      	beq.n	40120a <pio_set_input+0x3e>
		p_pio->PIO_IFER = ul_mask;
  401202:	68fb      	ldr	r3, [r7, #12]
  401204:	68ba      	ldr	r2, [r7, #8]
  401206:	621a      	str	r2, [r3, #32]
  401208:	e002      	b.n	401210 <pio_set_input+0x44>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40120a:	68fb      	ldr	r3, [r7, #12]
  40120c:	68ba      	ldr	r2, [r7, #8]
  40120e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401210:	687b      	ldr	r3, [r7, #4]
  401212:	f003 0302 	and.w	r3, r3, #2
  401216:	2b00      	cmp	r3, #0
  401218:	d004      	beq.n	401224 <pio_set_input+0x58>
		p_pio->PIO_IFSCDR = ul_mask;
  40121a:	68fb      	ldr	r3, [r7, #12]
  40121c:	68ba      	ldr	r2, [r7, #8]
  40121e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401222:	e008      	b.n	401236 <pio_set_input+0x6a>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401224:	687b      	ldr	r3, [r7, #4]
  401226:	f003 0308 	and.w	r3, r3, #8
  40122a:	2b00      	cmp	r3, #0
  40122c:	d003      	beq.n	401236 <pio_set_input+0x6a>
			p_pio->PIO_IFSCER = ul_mask;
  40122e:	68fb      	ldr	r3, [r7, #12]
  401230:	68ba      	ldr	r2, [r7, #8]
  401232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401236:	68fb      	ldr	r3, [r7, #12]
  401238:	68ba      	ldr	r2, [r7, #8]
  40123a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40123c:	68fb      	ldr	r3, [r7, #12]
  40123e:	68ba      	ldr	r2, [r7, #8]
  401240:	601a      	str	r2, [r3, #0]
}
  401242:	bf00      	nop
  401244:	3714      	adds	r7, #20
  401246:	46bd      	mov	sp, r7
  401248:	bd90      	pop	{r4, r7, pc}
  40124a:	bf00      	nop
  40124c:	00008bbe 	.word	0x00008bbe
  401250:	000000d4 	.word	0x000000d4
  401254:	000000d8 	.word	0x000000d8

00401258 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401258:	b590      	push	{r4, r7, lr}
  40125a:	b085      	sub	sp, #20
  40125c:	af00      	add	r7, sp, #0
  40125e:	60f8      	str	r0, [r7, #12]
  401260:	60b9      	str	r1, [r7, #8]
  401262:	607a      	str	r2, [r7, #4]
  401264:	603b      	str	r3, [r7, #0]
  401266:	4c15      	ldr	r4, [pc, #84]	; (4012bc <pio_set_output+0x64>)
  401268:	447c      	add	r4, pc
	pio_disable_interrupt(p_pio, ul_mask);
  40126a:	68b9      	ldr	r1, [r7, #8]
  40126c:	68f8      	ldr	r0, [r7, #12]
  40126e:	4b14      	ldr	r3, [pc, #80]	; (4012c0 <pio_set_output+0x68>)
  401270:	58e3      	ldr	r3, [r4, r3]
  401272:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401274:	6a3a      	ldr	r2, [r7, #32]
  401276:	68b9      	ldr	r1, [r7, #8]
  401278:	68f8      	ldr	r0, [r7, #12]
  40127a:	4b12      	ldr	r3, [pc, #72]	; (4012c4 <pio_set_output+0x6c>)
  40127c:	58e3      	ldr	r3, [r4, r3]
  40127e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401280:	683b      	ldr	r3, [r7, #0]
  401282:	2b00      	cmp	r3, #0
  401284:	d003      	beq.n	40128e <pio_set_output+0x36>
		p_pio->PIO_MDER = ul_mask;
  401286:	68fb      	ldr	r3, [r7, #12]
  401288:	68ba      	ldr	r2, [r7, #8]
  40128a:	651a      	str	r2, [r3, #80]	; 0x50
  40128c:	e002      	b.n	401294 <pio_set_output+0x3c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40128e:	68fb      	ldr	r3, [r7, #12]
  401290:	68ba      	ldr	r2, [r7, #8]
  401292:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401294:	687b      	ldr	r3, [r7, #4]
  401296:	2b00      	cmp	r3, #0
  401298:	d003      	beq.n	4012a2 <pio_set_output+0x4a>
		p_pio->PIO_SODR = ul_mask;
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	68ba      	ldr	r2, [r7, #8]
  40129e:	631a      	str	r2, [r3, #48]	; 0x30
  4012a0:	e002      	b.n	4012a8 <pio_set_output+0x50>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4012a2:	68fb      	ldr	r3, [r7, #12]
  4012a4:	68ba      	ldr	r2, [r7, #8]
  4012a6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4012a8:	68fb      	ldr	r3, [r7, #12]
  4012aa:	68ba      	ldr	r2, [r7, #8]
  4012ac:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4012ae:	68fb      	ldr	r3, [r7, #12]
  4012b0:	68ba      	ldr	r2, [r7, #8]
  4012b2:	601a      	str	r2, [r3, #0]
}
  4012b4:	bf00      	nop
  4012b6:	3714      	adds	r7, #20
  4012b8:	46bd      	mov	sp, r7
  4012ba:	bd90      	pop	{r4, r7, pc}
  4012bc:	00008b30 	.word	0x00008b30
  4012c0:	000000d4 	.word	0x000000d4
  4012c4:	000000d8 	.word	0x000000d8

004012c8 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4012c8:	b480      	push	{r7}
  4012ca:	b085      	sub	sp, #20
  4012cc:	af00      	add	r7, sp, #0
  4012ce:	60f8      	str	r0, [r7, #12]
  4012d0:	60b9      	str	r1, [r7, #8]
  4012d2:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	f003 0310 	and.w	r3, r3, #16
  4012da:	2b00      	cmp	r3, #0
  4012dc:	d020      	beq.n	401320 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4012de:	68fb      	ldr	r3, [r7, #12]
  4012e0:	68ba      	ldr	r2, [r7, #8]
  4012e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4012e6:	687b      	ldr	r3, [r7, #4]
  4012e8:	f003 0320 	and.w	r3, r3, #32
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d004      	beq.n	4012fa <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4012f0:	68fb      	ldr	r3, [r7, #12]
  4012f2:	68ba      	ldr	r2, [r7, #8]
  4012f4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4012f8:	e003      	b.n	401302 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4012fa:	68fb      	ldr	r3, [r7, #12]
  4012fc:	68ba      	ldr	r2, [r7, #8]
  4012fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401302:	687b      	ldr	r3, [r7, #4]
  401304:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401308:	2b00      	cmp	r3, #0
  40130a:	d004      	beq.n	401316 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40130c:	68fb      	ldr	r3, [r7, #12]
  40130e:	68ba      	ldr	r2, [r7, #8]
  401310:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401314:	e008      	b.n	401328 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401316:	68fb      	ldr	r3, [r7, #12]
  401318:	68ba      	ldr	r2, [r7, #8]
  40131a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40131e:	e003      	b.n	401328 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401320:	68fb      	ldr	r3, [r7, #12]
  401322:	68ba      	ldr	r2, [r7, #8]
  401324:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401328:	bf00      	nop
  40132a:	3714      	adds	r7, #20
  40132c:	46bd      	mov	sp, r7
  40132e:	bc80      	pop	{r7}
  401330:	4770      	bx	lr

00401332 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401332:	b480      	push	{r7}
  401334:	b083      	sub	sp, #12
  401336:	af00      	add	r7, sp, #0
  401338:	6078      	str	r0, [r7, #4]
  40133a:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	683a      	ldr	r2, [r7, #0]
  401340:	641a      	str	r2, [r3, #64]	; 0x40
}
  401342:	bf00      	nop
  401344:	370c      	adds	r7, #12
  401346:	46bd      	mov	sp, r7
  401348:	bc80      	pop	{r7}
  40134a:	4770      	bx	lr

0040134c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40134c:	b480      	push	{r7}
  40134e:	b083      	sub	sp, #12
  401350:	af00      	add	r7, sp, #0
  401352:	6078      	str	r0, [r7, #4]
  401354:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401356:	687b      	ldr	r3, [r7, #4]
  401358:	683a      	ldr	r2, [r7, #0]
  40135a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40135c:	bf00      	nop
  40135e:	370c      	adds	r7, #12
  401360:	46bd      	mov	sp, r7
  401362:	bc80      	pop	{r7}
  401364:	4770      	bx	lr

00401366 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401366:	b480      	push	{r7}
  401368:	b083      	sub	sp, #12
  40136a:	af00      	add	r7, sp, #0
  40136c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40136e:	687b      	ldr	r3, [r7, #4]
  401370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401372:	4618      	mov	r0, r3
  401374:	370c      	adds	r7, #12
  401376:	46bd      	mov	sp, r7
  401378:	bc80      	pop	{r7}
  40137a:	4770      	bx	lr

0040137c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40137c:	b480      	push	{r7}
  40137e:	b083      	sub	sp, #12
  401380:	af00      	add	r7, sp, #0
  401382:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401384:	687b      	ldr	r3, [r7, #4]
  401386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401388:	4618      	mov	r0, r3
  40138a:	370c      	adds	r7, #12
  40138c:	46bd      	mov	sp, r7
  40138e:	bc80      	pop	{r7}
  401390:	4770      	bx	lr
	...

00401394 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  401394:	b580      	push	{r7, lr}
  401396:	b084      	sub	sp, #16
  401398:	af00      	add	r7, sp, #0
  40139a:	6078      	str	r0, [r7, #4]
  40139c:	4a09      	ldr	r2, [pc, #36]	; (4013c4 <pio_set_pin_high+0x30>)
  40139e:	447a      	add	r2, pc
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4013a0:	6878      	ldr	r0, [r7, #4]
  4013a2:	4b09      	ldr	r3, [pc, #36]	; (4013c8 <pio_set_pin_high+0x34>)
  4013a4:	58d3      	ldr	r3, [r2, r3]
  4013a6:	4798      	blx	r3
  4013a8:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4013aa:	687b      	ldr	r3, [r7, #4]
  4013ac:	f003 031f 	and.w	r3, r3, #31
  4013b0:	2201      	movs	r2, #1
  4013b2:	fa02 f303 	lsl.w	r3, r2, r3
  4013b6:	461a      	mov	r2, r3
  4013b8:	68fb      	ldr	r3, [r7, #12]
  4013ba:	631a      	str	r2, [r3, #48]	; 0x30
}
  4013bc:	bf00      	nop
  4013be:	3710      	adds	r7, #16
  4013c0:	46bd      	mov	sp, r7
  4013c2:	bd80      	pop	{r7, pc}
  4013c4:	000089fa 	.word	0x000089fa
  4013c8:	00000010 	.word	0x00000010

004013cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4013cc:	b5b0      	push	{r4, r5, r7, lr}
  4013ce:	b086      	sub	sp, #24
  4013d0:	af02      	add	r7, sp, #8
  4013d2:	6078      	str	r0, [r7, #4]
  4013d4:	6039      	str	r1, [r7, #0]
  4013d6:	4c6b      	ldr	r4, [pc, #428]	; (401584 <pio_configure_pin+0x1b8>)
  4013d8:	447c      	add	r4, pc
	Pio *p_pio = pio_get_pin_group(ul_pin);
  4013da:	6878      	ldr	r0, [r7, #4]
  4013dc:	4b6a      	ldr	r3, [pc, #424]	; (401588 <pio_configure_pin+0x1bc>)
  4013de:	58e3      	ldr	r3, [r4, r3]
  4013e0:	4798      	blx	r3
  4013e2:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4013e4:	683b      	ldr	r3, [r7, #0]
  4013e6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  4013ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013ee:	d06f      	beq.n	4014d0 <pio_configure_pin+0x104>
  4013f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013f4:	d809      	bhi.n	40140a <pio_configure_pin+0x3e>
  4013f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013fa:	d02f      	beq.n	40145c <pio_configure_pin+0x90>
  4013fc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401400:	d049      	beq.n	401496 <pio_configure_pin+0xca>
  401402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401406:	d00c      	beq.n	401422 <pio_configure_pin+0x56>
  401408:	e0b5      	b.n	401576 <pio_configure_pin+0x1aa>
  40140a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40140e:	f000 8089 	beq.w	401524 <pio_configure_pin+0x158>
  401412:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401416:	f000 8085 	beq.w	401524 <pio_configure_pin+0x158>
  40141a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40141e:	d074      	beq.n	40150a <pio_configure_pin+0x13e>
  401420:	e0a9      	b.n	401576 <pio_configure_pin+0x1aa>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401422:	687b      	ldr	r3, [r7, #4]
  401424:	f003 031f 	and.w	r3, r3, #31
  401428:	2201      	movs	r2, #1
  40142a:	fa02 f303 	lsl.w	r3, r2, r3
  40142e:	461a      	mov	r2, r3
  401430:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401434:	68f8      	ldr	r0, [r7, #12]
  401436:	4b55      	ldr	r3, [pc, #340]	; (40158c <pio_configure_pin+0x1c0>)
  401438:	58e3      	ldr	r3, [r4, r3]
  40143a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40143c:	687b      	ldr	r3, [r7, #4]
  40143e:	f003 031f 	and.w	r3, r3, #31
  401442:	2201      	movs	r2, #1
  401444:	fa02 f303 	lsl.w	r3, r2, r3
  401448:	4619      	mov	r1, r3
  40144a:	683b      	ldr	r3, [r7, #0]
  40144c:	f003 0301 	and.w	r3, r3, #1
  401450:	461a      	mov	r2, r3
  401452:	68f8      	ldr	r0, [r7, #12]
  401454:	4b4e      	ldr	r3, [pc, #312]	; (401590 <pio_configure_pin+0x1c4>)
  401456:	58e3      	ldr	r3, [r4, r3]
  401458:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40145a:	e08e      	b.n	40157a <pio_configure_pin+0x1ae>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40145c:	687b      	ldr	r3, [r7, #4]
  40145e:	f003 031f 	and.w	r3, r3, #31
  401462:	2201      	movs	r2, #1
  401464:	fa02 f303 	lsl.w	r3, r2, r3
  401468:	461a      	mov	r2, r3
  40146a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40146e:	68f8      	ldr	r0, [r7, #12]
  401470:	4b46      	ldr	r3, [pc, #280]	; (40158c <pio_configure_pin+0x1c0>)
  401472:	58e3      	ldr	r3, [r4, r3]
  401474:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	f003 031f 	and.w	r3, r3, #31
  40147c:	2201      	movs	r2, #1
  40147e:	fa02 f303 	lsl.w	r3, r2, r3
  401482:	4619      	mov	r1, r3
  401484:	683b      	ldr	r3, [r7, #0]
  401486:	f003 0301 	and.w	r3, r3, #1
  40148a:	461a      	mov	r2, r3
  40148c:	68f8      	ldr	r0, [r7, #12]
  40148e:	4b40      	ldr	r3, [pc, #256]	; (401590 <pio_configure_pin+0x1c4>)
  401490:	58e3      	ldr	r3, [r4, r3]
  401492:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401494:	e071      	b.n	40157a <pio_configure_pin+0x1ae>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401496:	687b      	ldr	r3, [r7, #4]
  401498:	f003 031f 	and.w	r3, r3, #31
  40149c:	2201      	movs	r2, #1
  40149e:	fa02 f303 	lsl.w	r3, r2, r3
  4014a2:	461a      	mov	r2, r3
  4014a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4014a8:	68f8      	ldr	r0, [r7, #12]
  4014aa:	4b38      	ldr	r3, [pc, #224]	; (40158c <pio_configure_pin+0x1c0>)
  4014ac:	58e3      	ldr	r3, [r4, r3]
  4014ae:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	f003 031f 	and.w	r3, r3, #31
  4014b6:	2201      	movs	r2, #1
  4014b8:	fa02 f303 	lsl.w	r3, r2, r3
  4014bc:	4619      	mov	r1, r3
  4014be:	683b      	ldr	r3, [r7, #0]
  4014c0:	f003 0301 	and.w	r3, r3, #1
  4014c4:	461a      	mov	r2, r3
  4014c6:	68f8      	ldr	r0, [r7, #12]
  4014c8:	4b31      	ldr	r3, [pc, #196]	; (401590 <pio_configure_pin+0x1c4>)
  4014ca:	58e3      	ldr	r3, [r4, r3]
  4014cc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4014ce:	e054      	b.n	40157a <pio_configure_pin+0x1ae>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4014d0:	687b      	ldr	r3, [r7, #4]
  4014d2:	f003 031f 	and.w	r3, r3, #31
  4014d6:	2201      	movs	r2, #1
  4014d8:	fa02 f303 	lsl.w	r3, r2, r3
  4014dc:	461a      	mov	r2, r3
  4014de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4014e2:	68f8      	ldr	r0, [r7, #12]
  4014e4:	4b29      	ldr	r3, [pc, #164]	; (40158c <pio_configure_pin+0x1c0>)
  4014e6:	58e3      	ldr	r3, [r4, r3]
  4014e8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4014ea:	687b      	ldr	r3, [r7, #4]
  4014ec:	f003 031f 	and.w	r3, r3, #31
  4014f0:	2201      	movs	r2, #1
  4014f2:	fa02 f303 	lsl.w	r3, r2, r3
  4014f6:	4619      	mov	r1, r3
  4014f8:	683b      	ldr	r3, [r7, #0]
  4014fa:	f003 0301 	and.w	r3, r3, #1
  4014fe:	461a      	mov	r2, r3
  401500:	68f8      	ldr	r0, [r7, #12]
  401502:	4b23      	ldr	r3, [pc, #140]	; (401590 <pio_configure_pin+0x1c4>)
  401504:	58e3      	ldr	r3, [r4, r3]
  401506:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401508:	e037      	b.n	40157a <pio_configure_pin+0x1ae>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40150a:	687b      	ldr	r3, [r7, #4]
  40150c:	f003 031f 	and.w	r3, r3, #31
  401510:	2201      	movs	r2, #1
  401512:	fa02 f303 	lsl.w	r3, r2, r3
  401516:	683a      	ldr	r2, [r7, #0]
  401518:	4619      	mov	r1, r3
  40151a:	68f8      	ldr	r0, [r7, #12]
  40151c:	4b1d      	ldr	r3, [pc, #116]	; (401594 <pio_configure_pin+0x1c8>)
  40151e:	58e3      	ldr	r3, [r4, r3]
  401520:	4798      	blx	r3
		break;
  401522:	e02a      	b.n	40157a <pio_configure_pin+0x1ae>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	f003 031f 	and.w	r3, r3, #31
  40152a:	2201      	movs	r2, #1
  40152c:	fa02 f303 	lsl.w	r3, r2, r3
  401530:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  401532:	683b      	ldr	r3, [r7, #0]
  401534:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401538:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40153c:	bf0c      	ite	eq
  40153e:	2301      	moveq	r3, #1
  401540:	2300      	movne	r3, #0
  401542:	b2db      	uxtb	r3, r3
  401544:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  401546:	683b      	ldr	r3, [r7, #0]
  401548:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40154c:	2b00      	cmp	r3, #0
  40154e:	bf14      	ite	ne
  401550:	2301      	movne	r3, #1
  401552:	2300      	moveq	r3, #0
  401554:	b2db      	uxtb	r3, r3
  401556:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  401558:	683b      	ldr	r3, [r7, #0]
  40155a:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40155e:	2b00      	cmp	r3, #0
  401560:	bf14      	ite	ne
  401562:	2301      	movne	r3, #1
  401564:	2300      	moveq	r3, #0
  401566:	b2db      	uxtb	r3, r3
  401568:	9300      	str	r3, [sp, #0]
  40156a:	4603      	mov	r3, r0
  40156c:	68f8      	ldr	r0, [r7, #12]
  40156e:	4d0a      	ldr	r5, [pc, #40]	; (401598 <pio_configure_pin+0x1cc>)
  401570:	5964      	ldr	r4, [r4, r5]
  401572:	47a0      	blx	r4
		break;
  401574:	e001      	b.n	40157a <pio_configure_pin+0x1ae>

	default:
		return 0;
  401576:	2300      	movs	r3, #0
  401578:	e000      	b.n	40157c <pio_configure_pin+0x1b0>
	}

	return 1;
  40157a:	2301      	movs	r3, #1
}
  40157c:	4618      	mov	r0, r3
  40157e:	3710      	adds	r7, #16
  401580:	46bd      	mov	sp, r7
  401582:	bdb0      	pop	{r4, r5, r7, pc}
  401584:	000089c0 	.word	0x000089c0
  401588:	00000010 	.word	0x00000010
  40158c:	00000088 	.word	0x00000088
  401590:	000000d8 	.word	0x000000d8
  401594:	0000010c 	.word	0x0000010c
  401598:	000000c4 	.word	0x000000c4

0040159c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  40159c:	b480      	push	{r7}
  40159e:	b085      	sub	sp, #20
  4015a0:	af00      	add	r7, sp, #0
  4015a2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015a4:	687b      	ldr	r3, [r7, #4]
  4015a6:	095b      	lsrs	r3, r3, #5
  4015a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4015ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4015b0:	025b      	lsls	r3, r3, #9
  4015b2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  4015b4:	68fb      	ldr	r3, [r7, #12]
}
  4015b6:	4618      	mov	r0, r3
  4015b8:	3714      	adds	r7, #20
  4015ba:	46bd      	mov	sp, r7
  4015bc:	bc80      	pop	{r7}
  4015be:	4770      	bx	lr

004015c0 <pio_capture_enable>:
 * \brief Enable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
  4015c0:	b480      	push	{r7}
  4015c2:	b083      	sub	sp, #12
  4015c4:	af00      	add	r7, sp, #0
  4015c6:	6078      	str	r0, [r7, #4]
  4015c8:	4a09      	ldr	r2, [pc, #36]	; (4015f0 <pio_capture_enable+0x30>)
  4015ca:	447a      	add	r2, pc
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  4015cc:	687b      	ldr	r3, [r7, #4]
  4015ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  4015d2:	f043 0101 	orr.w	r1, r3, #1
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
	pio_capture_enable_flag = true;
  4015dc:	4b05      	ldr	r3, [pc, #20]	; (4015f4 <pio_capture_enable+0x34>)
  4015de:	58d3      	ldr	r3, [r2, r3]
  4015e0:	461a      	mov	r2, r3
  4015e2:	2301      	movs	r3, #1
  4015e4:	6013      	str	r3, [r2, #0]
}
  4015e6:	bf00      	nop
  4015e8:	370c      	adds	r7, #12
  4015ea:	46bd      	mov	sp, r7
  4015ec:	bc80      	pop	{r7}
  4015ee:	4770      	bx	lr
  4015f0:	000087ce 	.word	0x000087ce
  4015f4:	000000e0 	.word	0x000000e0

004015f8 <pio_capture_disable>:
 * \brief Disable PIO capture mode.
 *
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_disable(Pio *p_pio)
{
  4015f8:	b480      	push	{r7}
  4015fa:	b083      	sub	sp, #12
  4015fc:	af00      	add	r7, sp, #0
  4015fe:	6078      	str	r0, [r7, #4]
  401600:	4a09      	ldr	r2, [pc, #36]	; (401628 <pio_capture_disable+0x30>)
  401602:	447a      	add	r2, pc
	p_pio->PIO_PCMR &= (~PIO_PCMR_PCEN);
  401604:	687b      	ldr	r3, [r7, #4]
  401606:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  40160a:	f023 0101 	bic.w	r1, r3, #1
  40160e:	687b      	ldr	r3, [r7, #4]
  401610:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
	pio_capture_enable_flag = false;
  401614:	4b05      	ldr	r3, [pc, #20]	; (40162c <pio_capture_disable+0x34>)
  401616:	58d3      	ldr	r3, [r2, r3]
  401618:	461a      	mov	r2, r3
  40161a:	2300      	movs	r3, #0
  40161c:	6013      	str	r3, [r2, #0]
}
  40161e:	bf00      	nop
  401620:	370c      	adds	r7, #12
  401622:	46bd      	mov	sp, r7
  401624:	bc80      	pop	{r7}
  401626:	4770      	bx	lr
  401628:	00008796 	.word	0x00008796
  40162c:	000000e0 	.word	0x000000e0

00401630 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401630:	b480      	push	{r7}
  401632:	b085      	sub	sp, #20
  401634:	af00      	add	r7, sp, #0
  401636:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401638:	491c      	ldr	r1, [pc, #112]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40163a:	4b1c      	ldr	r3, [pc, #112]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40163e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	4313      	orrs	r3, r2
  401646:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401648:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40164c:	60fb      	str	r3, [r7, #12]
  40164e:	e007      	b.n	401660 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401650:	68fb      	ldr	r3, [r7, #12]
  401652:	2b00      	cmp	r3, #0
  401654:	d101      	bne.n	40165a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401656:	2301      	movs	r3, #1
  401658:	e023      	b.n	4016a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40165a:	68fb      	ldr	r3, [r7, #12]
  40165c:	3b01      	subs	r3, #1
  40165e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401660:	4b12      	ldr	r3, [pc, #72]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401664:	f003 0308 	and.w	r3, r3, #8
  401668:	2b00      	cmp	r3, #0
  40166a:	d0f1      	beq.n	401650 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40166c:	4a0f      	ldr	r2, [pc, #60]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40166e:	4b0f      	ldr	r3, [pc, #60]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401672:	f023 0303 	bic.w	r3, r3, #3
  401676:	f043 0302 	orr.w	r3, r3, #2
  40167a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40167c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401680:	60fb      	str	r3, [r7, #12]
  401682:	e007      	b.n	401694 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401684:	68fb      	ldr	r3, [r7, #12]
  401686:	2b00      	cmp	r3, #0
  401688:	d101      	bne.n	40168e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40168a:	2301      	movs	r3, #1
  40168c:	e009      	b.n	4016a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40168e:	68fb      	ldr	r3, [r7, #12]
  401690:	3b01      	subs	r3, #1
  401692:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401694:	4b05      	ldr	r3, [pc, #20]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401698:	f003 0308 	and.w	r3, r3, #8
  40169c:	2b00      	cmp	r3, #0
  40169e:	d0f1      	beq.n	401684 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4016a0:	2300      	movs	r3, #0
}
  4016a2:	4618      	mov	r0, r3
  4016a4:	3714      	adds	r7, #20
  4016a6:	46bd      	mov	sp, r7
  4016a8:	bc80      	pop	{r7}
  4016aa:	4770      	bx	lr
  4016ac:	400e0400 	.word	0x400e0400

004016b0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4016b0:	b480      	push	{r7}
  4016b2:	b083      	sub	sp, #12
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	2b01      	cmp	r3, #1
  4016bc:	d107      	bne.n	4016ce <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4016be:	4a08      	ldr	r2, [pc, #32]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016c0:	4b07      	ldr	r3, [pc, #28]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016c2:	689b      	ldr	r3, [r3, #8]
  4016c4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4016c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4016cc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4016ce:	4b04      	ldr	r3, [pc, #16]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016d0:	4a04      	ldr	r2, [pc, #16]	; (4016e4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4016d2:	601a      	str	r2, [r3, #0]
}
  4016d4:	bf00      	nop
  4016d6:	370c      	adds	r7, #12
  4016d8:	46bd      	mov	sp, r7
  4016da:	bc80      	pop	{r7}
  4016dc:	4770      	bx	lr
  4016de:	bf00      	nop
  4016e0:	400e1410 	.word	0x400e1410
  4016e4:	a5000008 	.word	0xa5000008

004016e8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4016e8:	b480      	push	{r7}
  4016ea:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4016ec:	4b09      	ldr	r3, [pc, #36]	; (401714 <pmc_osc_is_ready_32kxtal+0x2c>)
  4016ee:	695b      	ldr	r3, [r3, #20]
  4016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d007      	beq.n	401708 <pmc_osc_is_ready_32kxtal+0x20>
  4016f8:	4b07      	ldr	r3, [pc, #28]	; (401718 <pmc_osc_is_ready_32kxtal+0x30>)
  4016fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401700:	2b00      	cmp	r3, #0
  401702:	d001      	beq.n	401708 <pmc_osc_is_ready_32kxtal+0x20>
  401704:	2301      	movs	r3, #1
  401706:	e000      	b.n	40170a <pmc_osc_is_ready_32kxtal+0x22>
  401708:	2300      	movs	r3, #0
}
  40170a:	4618      	mov	r0, r3
  40170c:	46bd      	mov	sp, r7
  40170e:	bc80      	pop	{r7}
  401710:	4770      	bx	lr
  401712:	bf00      	nop
  401714:	400e1410 	.word	0x400e1410
  401718:	400e0400 	.word	0x400e0400

0040171c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40171c:	b480      	push	{r7}
  40171e:	b083      	sub	sp, #12
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401724:	4a18      	ldr	r2, [pc, #96]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401726:	4b18      	ldr	r3, [pc, #96]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401728:	6a1b      	ldr	r3, [r3, #32]
  40172a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40172e:	f043 0308 	orr.w	r3, r3, #8
  401732:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401734:	bf00      	nop
  401736:	4b14      	ldr	r3, [pc, #80]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40173e:	2b00      	cmp	r3, #0
  401740:	d0f9      	beq.n	401736 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401742:	4911      	ldr	r1, [pc, #68]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401744:	4b10      	ldr	r3, [pc, #64]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401746:	6a1b      	ldr	r3, [r3, #32]
  401748:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401750:	687a      	ldr	r2, [r7, #4]
  401752:	4313      	orrs	r3, r2
  401754:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401758:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40175a:	bf00      	nop
  40175c:	4b0a      	ldr	r3, [pc, #40]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40175e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401764:	2b00      	cmp	r3, #0
  401766:	d0f9      	beq.n	40175c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401768:	4a07      	ldr	r2, [pc, #28]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40176a:	4b07      	ldr	r3, [pc, #28]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40176c:	6a1b      	ldr	r3, [r3, #32]
  40176e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401776:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40177a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40177c:	bf00      	nop
  40177e:	370c      	adds	r7, #12
  401780:	46bd      	mov	sp, r7
  401782:	bc80      	pop	{r7}
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0400 	.word	0x400e0400

0040178c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40178c:	b480      	push	{r7}
  40178e:	b083      	sub	sp, #12
  401790:	af00      	add	r7, sp, #0
  401792:	6078      	str	r0, [r7, #4]
  401794:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401796:	687b      	ldr	r3, [r7, #4]
  401798:	2b00      	cmp	r3, #0
  40179a:	d008      	beq.n	4017ae <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40179c:	4916      	ldr	r1, [pc, #88]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  40179e:	4b16      	ldr	r3, [pc, #88]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017a0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017a2:	4a16      	ldr	r2, [pc, #88]	; (4017fc <pmc_switch_mainck_to_xtal+0x70>)
  4017a4:	401a      	ands	r2, r3
  4017a6:	4b16      	ldr	r3, [pc, #88]	; (401800 <pmc_switch_mainck_to_xtal+0x74>)
  4017a8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017aa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4017ac:	e01e      	b.n	4017ec <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017ae:	4912      	ldr	r1, [pc, #72]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017b0:	4b11      	ldr	r3, [pc, #68]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017b2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017b4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4017b8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4017bc:	683a      	ldr	r2, [r7, #0]
  4017be:	0212      	lsls	r2, r2, #8
  4017c0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017c2:	4313      	orrs	r3, r2
  4017c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017c8:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017cc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4017ce:	bf00      	nop
  4017d0:	4b09      	ldr	r3, [pc, #36]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017d4:	f003 0301 	and.w	r3, r3, #1
  4017d8:	2b00      	cmp	r3, #0
  4017da:	d0f9      	beq.n	4017d0 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4017dc:	4a06      	ldr	r2, [pc, #24]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017de:	4b06      	ldr	r3, [pc, #24]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017e0:	6a1b      	ldr	r3, [r3, #32]
  4017e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4017ea:	6213      	str	r3, [r2, #32]
}
  4017ec:	bf00      	nop
  4017ee:	370c      	adds	r7, #12
  4017f0:	46bd      	mov	sp, r7
  4017f2:	bc80      	pop	{r7}
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	400e0400 	.word	0x400e0400
  4017fc:	fec8fffc 	.word	0xfec8fffc
  401800:	01370002 	.word	0x01370002

00401804 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401804:	b480      	push	{r7}
  401806:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401808:	4b03      	ldr	r3, [pc, #12]	; (401818 <pmc_osc_is_ready_mainck+0x14>)
  40180a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401810:	4618      	mov	r0, r3
  401812:	46bd      	mov	sp, r7
  401814:	bc80      	pop	{r7}
  401816:	4770      	bx	lr
  401818:	400e0400 	.word	0x400e0400

0040181c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40181c:	b480      	push	{r7}
  40181e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401820:	4b03      	ldr	r3, [pc, #12]	; (401830 <pmc_disable_pllack+0x14>)
  401822:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401826:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401828:	bf00      	nop
  40182a:	46bd      	mov	sp, r7
  40182c:	bc80      	pop	{r7}
  40182e:	4770      	bx	lr
  401830:	400e0400 	.word	0x400e0400

00401834 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401834:	b480      	push	{r7}
  401836:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401838:	4b03      	ldr	r3, [pc, #12]	; (401848 <pmc_is_locked_pllack+0x14>)
  40183a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40183c:	f003 0302 	and.w	r3, r3, #2
}
  401840:	4618      	mov	r0, r3
  401842:	46bd      	mov	sp, r7
  401844:	bc80      	pop	{r7}
  401846:	4770      	bx	lr
  401848:	400e0400 	.word	0x400e0400

0040184c <pmc_enable_pllbck>:
 * \param mulb PLLB multiplier.
 * \param pllbcount PLLB counter.
 * \param divb Divider.
 */
void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
{
  40184c:	b580      	push	{r7, lr}
  40184e:	b084      	sub	sp, #16
  401850:	af00      	add	r7, sp, #0
  401852:	60f8      	str	r0, [r7, #12]
  401854:	60b9      	str	r1, [r7, #8]
  401856:	607a      	str	r2, [r7, #4]
  401858:	4a10      	ldr	r2, [pc, #64]	; (40189c <pmc_enable_pllbck+0x50>)
  40185a:	447a      	add	r2, pc
	/* first disable the PLL to unlock the lock */
	pmc_disable_pllbck();
  40185c:	4b10      	ldr	r3, [pc, #64]	; (4018a0 <pmc_enable_pllbck+0x54>)
  40185e:	58d3      	ldr	r3, [r2, r3]
  401860:	4798      	blx	r3

#if SAMG55
	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
#else
	PMC->CKGR_PLLBR =
  401862:	480c      	ldr	r0, [pc, #48]	; (401894 <pmc_enable_pllbck+0x48>)
			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
  401864:	687b      	ldr	r3, [r7, #4]
  401866:	b2da      	uxtb	r2, r3
  401868:	68bb      	ldr	r3, [r7, #8]
  40186a:	021b      	lsls	r3, r3, #8
  40186c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
  401870:	431a      	orrs	r2, r3
			| CKGR_PLLBR_MULB(mulb);
  401872:	68fb      	ldr	r3, [r7, #12]
  401874:	0419      	lsls	r1, r3, #16
  401876:	4b08      	ldr	r3, [pc, #32]	; (401898 <pmc_enable_pllbck+0x4c>)
  401878:	400b      	ands	r3, r1
  40187a:	4313      	orrs	r3, r2
	PMC->CKGR_PLLBR =
  40187c:	62c3      	str	r3, [r0, #44]	; 0x2c
#endif
	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
  40187e:	bf00      	nop
  401880:	4b04      	ldr	r3, [pc, #16]	; (401894 <pmc_enable_pllbck+0x48>)
  401882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401884:	f003 0304 	and.w	r3, r3, #4
  401888:	2b00      	cmp	r3, #0
  40188a:	d0f9      	beq.n	401880 <pmc_enable_pllbck+0x34>
}
  40188c:	bf00      	nop
  40188e:	3710      	adds	r7, #16
  401890:	46bd      	mov	sp, r7
  401892:	bd80      	pop	{r7, pc}
  401894:	400e0400 	.word	0x400e0400
  401898:	07ff0000 	.word	0x07ff0000
  40189c:	0000853e 	.word	0x0000853e
  4018a0:	000000a0 	.word	0x000000a0

004018a4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4018a4:	b480      	push	{r7}
  4018a6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4018a8:	4b03      	ldr	r3, [pc, #12]	; (4018b8 <pmc_disable_pllbck+0x14>)
  4018aa:	2200      	movs	r2, #0
  4018ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4018ae:	bf00      	nop
  4018b0:	46bd      	mov	sp, r7
  4018b2:	bc80      	pop	{r7}
  4018b4:	4770      	bx	lr
  4018b6:	bf00      	nop
  4018b8:	400e0400 	.word	0x400e0400

004018bc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4018bc:	b480      	push	{r7}
  4018be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4018c0:	4b03      	ldr	r3, [pc, #12]	; (4018d0 <pmc_is_locked_pllbck+0x14>)
  4018c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018c4:	f003 0304 	and.w	r3, r3, #4
}
  4018c8:	4618      	mov	r0, r3
  4018ca:	46bd      	mov	sp, r7
  4018cc:	bc80      	pop	{r7}
  4018ce:	4770      	bx	lr
  4018d0:	400e0400 	.word	0x400e0400

004018d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4018d4:	b480      	push	{r7}
  4018d6:	b083      	sub	sp, #12
  4018d8:	af00      	add	r7, sp, #0
  4018da:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4018dc:	687b      	ldr	r3, [r7, #4]
  4018de:	2b22      	cmp	r3, #34	; 0x22
  4018e0:	d901      	bls.n	4018e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4018e2:	2301      	movs	r3, #1
  4018e4:	e02f      	b.n	401946 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4018e6:	687b      	ldr	r3, [r7, #4]
  4018e8:	2b1f      	cmp	r3, #31
  4018ea:	d813      	bhi.n	401914 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4018ec:	4b18      	ldr	r3, [pc, #96]	; (401950 <pmc_enable_periph_clk+0x7c>)
  4018ee:	699a      	ldr	r2, [r3, #24]
  4018f0:	2101      	movs	r1, #1
  4018f2:	687b      	ldr	r3, [r7, #4]
  4018f4:	fa01 f303 	lsl.w	r3, r1, r3
  4018f8:	401a      	ands	r2, r3
  4018fa:	2101      	movs	r1, #1
  4018fc:	687b      	ldr	r3, [r7, #4]
  4018fe:	fa01 f303 	lsl.w	r3, r1, r3
  401902:	429a      	cmp	r2, r3
  401904:	d01e      	beq.n	401944 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  401906:	4a12      	ldr	r2, [pc, #72]	; (401950 <pmc_enable_periph_clk+0x7c>)
  401908:	2101      	movs	r1, #1
  40190a:	687b      	ldr	r3, [r7, #4]
  40190c:	fa01 f303 	lsl.w	r3, r1, r3
  401910:	6113      	str	r3, [r2, #16]
  401912:	e017      	b.n	401944 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401914:	687b      	ldr	r3, [r7, #4]
  401916:	3b20      	subs	r3, #32
  401918:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40191a:	4b0d      	ldr	r3, [pc, #52]	; (401950 <pmc_enable_periph_clk+0x7c>)
  40191c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401920:	2101      	movs	r1, #1
  401922:	687b      	ldr	r3, [r7, #4]
  401924:	fa01 f303 	lsl.w	r3, r1, r3
  401928:	401a      	ands	r2, r3
  40192a:	2101      	movs	r1, #1
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	fa01 f303 	lsl.w	r3, r1, r3
  401932:	429a      	cmp	r2, r3
  401934:	d006      	beq.n	401944 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  401936:	4a06      	ldr	r2, [pc, #24]	; (401950 <pmc_enable_periph_clk+0x7c>)
  401938:	2101      	movs	r1, #1
  40193a:	687b      	ldr	r3, [r7, #4]
  40193c:	fa01 f303 	lsl.w	r3, r1, r3
  401940:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  401944:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401946:	4618      	mov	r0, r3
  401948:	370c      	adds	r7, #12
  40194a:	46bd      	mov	sp, r7
  40194c:	bc80      	pop	{r7}
  40194e:	4770      	bx	lr
  401950:	400e0400 	.word	0x400e0400

00401954 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401954:	b480      	push	{r7}
  401956:	b083      	sub	sp, #12
  401958:	af00      	add	r7, sp, #0
  40195a:	4603      	mov	r3, r0
  40195c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40195e:	4908      	ldr	r1, [pc, #32]	; (401980 <NVIC_EnableIRQ+0x2c>)
  401960:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401964:	095b      	lsrs	r3, r3, #5
  401966:	79fa      	ldrb	r2, [r7, #7]
  401968:	f002 021f 	and.w	r2, r2, #31
  40196c:	2001      	movs	r0, #1
  40196e:	fa00 f202 	lsl.w	r2, r0, r2
  401972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401976:	bf00      	nop
  401978:	370c      	adds	r7, #12
  40197a:	46bd      	mov	sp, r7
  40197c:	bc80      	pop	{r7}
  40197e:	4770      	bx	lr
  401980:	e000e100 	.word	0xe000e100

00401984 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401984:	b480      	push	{r7}
  401986:	b083      	sub	sp, #12
  401988:	af00      	add	r7, sp, #0
  40198a:	4603      	mov	r3, r0
  40198c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40198e:	4909      	ldr	r1, [pc, #36]	; (4019b4 <NVIC_DisableIRQ+0x30>)
  401990:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401994:	095b      	lsrs	r3, r3, #5
  401996:	79fa      	ldrb	r2, [r7, #7]
  401998:	f002 021f 	and.w	r2, r2, #31
  40199c:	2001      	movs	r0, #1
  40199e:	fa00 f202 	lsl.w	r2, r0, r2
  4019a2:	3320      	adds	r3, #32
  4019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4019a8:	bf00      	nop
  4019aa:	370c      	adds	r7, #12
  4019ac:	46bd      	mov	sp, r7
  4019ae:	bc80      	pop	{r7}
  4019b0:	4770      	bx	lr
  4019b2:	bf00      	nop
  4019b4:	e000e100 	.word	0xe000e100

004019b8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4019b8:	b480      	push	{r7}
  4019ba:	b083      	sub	sp, #12
  4019bc:	af00      	add	r7, sp, #0
  4019be:	4603      	mov	r3, r0
  4019c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4019c2:	4909      	ldr	r1, [pc, #36]	; (4019e8 <NVIC_ClearPendingIRQ+0x30>)
  4019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019c8:	095b      	lsrs	r3, r3, #5
  4019ca:	79fa      	ldrb	r2, [r7, #7]
  4019cc:	f002 021f 	and.w	r2, r2, #31
  4019d0:	2001      	movs	r0, #1
  4019d2:	fa00 f202 	lsl.w	r2, r0, r2
  4019d6:	3360      	adds	r3, #96	; 0x60
  4019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4019dc:	bf00      	nop
  4019de:	370c      	adds	r7, #12
  4019e0:	46bd      	mov	sp, r7
  4019e2:	bc80      	pop	{r7}
  4019e4:	4770      	bx	lr
  4019e6:	bf00      	nop
  4019e8:	e000e100 	.word	0xe000e100

004019ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4019ec:	b480      	push	{r7}
  4019ee:	b083      	sub	sp, #12
  4019f0:	af00      	add	r7, sp, #0
  4019f2:	4603      	mov	r3, r0
  4019f4:	6039      	str	r1, [r7, #0]
  4019f6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019fc:	2b00      	cmp	r3, #0
  4019fe:	da0b      	bge.n	401a18 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a00:	490d      	ldr	r1, [pc, #52]	; (401a38 <NVIC_SetPriority+0x4c>)
  401a02:	79fb      	ldrb	r3, [r7, #7]
  401a04:	f003 030f 	and.w	r3, r3, #15
  401a08:	3b04      	subs	r3, #4
  401a0a:	683a      	ldr	r2, [r7, #0]
  401a0c:	b2d2      	uxtb	r2, r2
  401a0e:	0112      	lsls	r2, r2, #4
  401a10:	b2d2      	uxtb	r2, r2
  401a12:	440b      	add	r3, r1
  401a14:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  401a16:	e009      	b.n	401a2c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401a18:	4908      	ldr	r1, [pc, #32]	; (401a3c <NVIC_SetPriority+0x50>)
  401a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a1e:	683a      	ldr	r2, [r7, #0]
  401a20:	b2d2      	uxtb	r2, r2
  401a22:	0112      	lsls	r2, r2, #4
  401a24:	b2d2      	uxtb	r2, r2
  401a26:	440b      	add	r3, r1
  401a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  401a2c:	bf00      	nop
  401a2e:	370c      	adds	r7, #12
  401a30:	46bd      	mov	sp, r7
  401a32:	bc80      	pop	{r7}
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop
  401a38:	e000ed00 	.word	0xe000ed00
  401a3c:	e000e100 	.word	0xe000e100

00401a40 <osc_get_rate>:
{
  401a40:	b480      	push	{r7}
  401a42:	b083      	sub	sp, #12
  401a44:	af00      	add	r7, sp, #0
  401a46:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	2b07      	cmp	r3, #7
  401a4c:	d827      	bhi.n	401a9e <osc_get_rate+0x5e>
  401a4e:	a202      	add	r2, pc, #8	; (adr r2, 401a58 <osc_get_rate+0x18>)
  401a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401a54:	441a      	add	r2, r3
  401a56:	4710      	bx	r2
  401a58:	00000021 	.word	0x00000021
  401a5c:	00000027 	.word	0x00000027
  401a60:	0000002d 	.word	0x0000002d
  401a64:	00000033 	.word	0x00000033
  401a68:	00000037 	.word	0x00000037
  401a6c:	0000003b 	.word	0x0000003b
  401a70:	0000003f 	.word	0x0000003f
  401a74:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  401a78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401a7c:	e010      	b.n	401aa0 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  401a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a82:	e00d      	b.n	401aa0 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  401a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a88:	e00a      	b.n	401aa0 <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  401a8a:	4b08      	ldr	r3, [pc, #32]	; (401aac <osc_get_rate+0x6c>)
  401a8c:	e008      	b.n	401aa0 <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  401a8e:	4b08      	ldr	r3, [pc, #32]	; (401ab0 <osc_get_rate+0x70>)
  401a90:	e006      	b.n	401aa0 <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  401a92:	4b08      	ldr	r3, [pc, #32]	; (401ab4 <osc_get_rate+0x74>)
  401a94:	e004      	b.n	401aa0 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  401a96:	4b07      	ldr	r3, [pc, #28]	; (401ab4 <osc_get_rate+0x74>)
  401a98:	e002      	b.n	401aa0 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  401a9a:	4b06      	ldr	r3, [pc, #24]	; (401ab4 <osc_get_rate+0x74>)
  401a9c:	e000      	b.n	401aa0 <osc_get_rate+0x60>
	return 0;
  401a9e:	2300      	movs	r3, #0
}
  401aa0:	4618      	mov	r0, r3
  401aa2:	370c      	adds	r7, #12
  401aa4:	46bd      	mov	sp, r7
  401aa6:	bc80      	pop	{r7}
  401aa8:	4770      	bx	lr
  401aaa:	bf00      	nop
  401aac:	003d0900 	.word	0x003d0900
  401ab0:	007a1200 	.word	0x007a1200
  401ab4:	00b71b00 	.word	0x00b71b00

00401ab8 <sysclk_get_main_hz>:
{
  401ab8:	b580      	push	{r7, lr}
  401aba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401abc:	2006      	movs	r0, #6
  401abe:	4b05      	ldr	r3, [pc, #20]	; (401ad4 <sysclk_get_main_hz+0x1c>)
  401ac0:	447b      	add	r3, pc
  401ac2:	4798      	blx	r3
  401ac4:	4602      	mov	r2, r0
  401ac6:	4613      	mov	r3, r2
  401ac8:	009b      	lsls	r3, r3, #2
  401aca:	4413      	add	r3, r2
  401acc:	009b      	lsls	r3, r3, #2
}
  401ace:	4618      	mov	r0, r3
  401ad0:	bd80      	pop	{r7, pc}
  401ad2:	bf00      	nop
  401ad4:	ffffff7d 	.word	0xffffff7d

00401ad8 <sysclk_get_cpu_hz>:
{
  401ad8:	b580      	push	{r7, lr}
  401ada:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401adc:	4b03      	ldr	r3, [pc, #12]	; (401aec <sysclk_get_cpu_hz+0x14>)
  401ade:	447b      	add	r3, pc
  401ae0:	4798      	blx	r3
  401ae2:	4603      	mov	r3, r0
  401ae4:	085b      	lsrs	r3, r3, #1
}
  401ae6:	4618      	mov	r0, r3
  401ae8:	bd80      	pop	{r7, pc}
  401aea:	bf00      	nop
  401aec:	ffffffd7 	.word	0xffffffd7

00401af0 <vsync_handler>:

uint8_t *g_p_uc_cap_dest_buf;


void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401af0:	b480      	push	{r7}
  401af2:	b083      	sub	sp, #12
  401af4:	af00      	add	r7, sp, #0
  401af6:	6078      	str	r0, [r7, #4]
  401af8:	6039      	str	r1, [r7, #0]
  401afa:	4a05      	ldr	r2, [pc, #20]	; (401b10 <vsync_handler+0x20>)
  401afc:	447a      	add	r2, pc
	unused(ul_id);
	unused(ul_mask);

	vsync_flag = true;
  401afe:	4b05      	ldr	r3, [pc, #20]	; (401b14 <vsync_handler+0x24>)
  401b00:	58d3      	ldr	r3, [r2, r3]
  401b02:	2201      	movs	r2, #1
  401b04:	701a      	strb	r2, [r3, #0]
}
  401b06:	bf00      	nop
  401b08:	370c      	adds	r7, #12
  401b0a:	46bd      	mov	sp, r7
  401b0c:	bc80      	pop	{r7}
  401b0e:	4770      	bx	lr
  401b10:	0000829c 	.word	0x0000829c
  401b14:	00000080 	.word	0x00000080

00401b18 <init_vsync_interrupts>:

void init_vsync_interrupts(void)
{
  401b18:	b5b0      	push	{r4, r5, r7, lr}
  401b1a:	b082      	sub	sp, #8
  401b1c:	af02      	add	r7, sp, #8
  401b1e:	4c0b      	ldr	r4, [pc, #44]	; (401b4c <init_vsync_interrupts+0x34>)
  401b20:	447c      	add	r4, pc
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(VSYNC_PIO, VSYNC_ID, VSYNC_PIN_MSK, VSYNC_TYPE, vsync_handler);
  401b22:	4b0b      	ldr	r3, [pc, #44]	; (401b50 <init_vsync_interrupts+0x38>)
  401b24:	58e3      	ldr	r3, [r4, r3]
  401b26:	9300      	str	r3, [sp, #0]
  401b28:	f04f 5320 	mov.w	r3, #671088640	; 0x28000000
  401b2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401b30:	210b      	movs	r1, #11
  401b32:	4805      	ldr	r0, [pc, #20]	; (401b48 <init_vsync_interrupts+0x30>)
  401b34:	4d07      	ldr	r5, [pc, #28]	; (401b54 <init_vsync_interrupts+0x3c>)
  401b36:	5964      	ldr	r4, [r4, r5]
  401b38:	47a0      	blx	r4

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)VSYNC_ID);
  401b3a:	200b      	movs	r0, #11
  401b3c:	4b06      	ldr	r3, [pc, #24]	; (401b58 <init_vsync_interrupts+0x40>)
  401b3e:	447b      	add	r3, pc
  401b40:	4798      	blx	r3
}
  401b42:	bf00      	nop
  401b44:	46bd      	mov	sp, r7
  401b46:	bdb0      	pop	{r4, r5, r7, pc}
  401b48:	400e0e00 	.word	0x400e0e00
  401b4c:	00008278 	.word	0x00008278
  401b50:	00000164 	.word	0x00000164
  401b54:	00000050 	.word	0x00000050
  401b58:	fffffe13 	.word	0xfffffe13

00401b5c <init_camera>:

void init_camera(void)
{
  401b5c:	b598      	push	{r3, r4, r7, lr}
  401b5e:	af00      	add	r7, sp, #0
  401b60:	4c36      	ldr	r4, [pc, #216]	; (401c3c <init_camera+0xe0>)
  401b62:	447c      	add	r4, pc
	gpio_configure_pin(OV_DATA_BUS_D0, OV_DATA_BUS_FLAGS);
  401b64:	4932      	ldr	r1, [pc, #200]	; (401c30 <init_camera+0xd4>)
  401b66:	2018      	movs	r0, #24
  401b68:	4b35      	ldr	r3, [pc, #212]	; (401c40 <init_camera+0xe4>)
  401b6a:	58e3      	ldr	r3, [r4, r3]
  401b6c:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D1, OV_DATA_BUS_FLAGS);
  401b6e:	4930      	ldr	r1, [pc, #192]	; (401c30 <init_camera+0xd4>)
  401b70:	2019      	movs	r0, #25
  401b72:	4b33      	ldr	r3, [pc, #204]	; (401c40 <init_camera+0xe4>)
  401b74:	58e3      	ldr	r3, [r4, r3]
  401b76:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D2, OV_DATA_BUS_FLAGS);
  401b78:	492d      	ldr	r1, [pc, #180]	; (401c30 <init_camera+0xd4>)
  401b7a:	201a      	movs	r0, #26
  401b7c:	4b30      	ldr	r3, [pc, #192]	; (401c40 <init_camera+0xe4>)
  401b7e:	58e3      	ldr	r3, [r4, r3]
  401b80:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D3, OV_DATA_BUS_FLAGS);
  401b82:	492b      	ldr	r1, [pc, #172]	; (401c30 <init_camera+0xd4>)
  401b84:	201b      	movs	r0, #27
  401b86:	4b2e      	ldr	r3, [pc, #184]	; (401c40 <init_camera+0xe4>)
  401b88:	58e3      	ldr	r3, [r4, r3]
  401b8a:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D4, OV_DATA_BUS_FLAGS);
  401b8c:	4928      	ldr	r1, [pc, #160]	; (401c30 <init_camera+0xd4>)
  401b8e:	201c      	movs	r0, #28
  401b90:	4b2b      	ldr	r3, [pc, #172]	; (401c40 <init_camera+0xe4>)
  401b92:	58e3      	ldr	r3, [r4, r3]
  401b94:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D5, OV_DATA_BUS_FLAGS);
  401b96:	4926      	ldr	r1, [pc, #152]	; (401c30 <init_camera+0xd4>)
  401b98:	201d      	movs	r0, #29
  401b9a:	4b29      	ldr	r3, [pc, #164]	; (401c40 <init_camera+0xe4>)
  401b9c:	58e3      	ldr	r3, [r4, r3]
  401b9e:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D6, OV_DATA_BUS_FLAGS);
  401ba0:	4923      	ldr	r1, [pc, #140]	; (401c30 <init_camera+0xd4>)
  401ba2:	201e      	movs	r0, #30
  401ba4:	4b26      	ldr	r3, [pc, #152]	; (401c40 <init_camera+0xe4>)
  401ba6:	58e3      	ldr	r3, [r4, r3]
  401ba8:	4798      	blx	r3
	gpio_configure_pin(OV_DATA_BUS_D7, OV_DATA_BUS_FLAGS);
  401baa:	4921      	ldr	r1, [pc, #132]	; (401c30 <init_camera+0xd4>)
  401bac:	201f      	movs	r0, #31
  401bae:	4b24      	ldr	r3, [pc, #144]	; (401c40 <init_camera+0xe4>)
  401bb0:	58e3      	ldr	r3, [r4, r3]
  401bb2:	4798      	blx	r3
	gpio_configure_pin(XCLK_GPIO, XCLK_FLAGS);
  401bb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bb8:	2011      	movs	r0, #17
  401bba:	4b21      	ldr	r3, [pc, #132]	; (401c40 <init_camera+0xe4>)
  401bbc:	58e3      	ldr	r3, [r4, r3]
  401bbe:	4798      	blx	r3
	gpio_configure_pin(OV_HREF_GPIO, OV_HREF_FLAGS);
  401bc0:	2171      	movs	r1, #113	; 0x71
  401bc2:	2010      	movs	r0, #16
  401bc4:	4b1e      	ldr	r3, [pc, #120]	; (401c40 <init_camera+0xe4>)
  401bc6:	58e3      	ldr	r3, [r4, r3]
  401bc8:	4798      	blx	r3
	gpio_configure_pin(VSYNC_PIN_GPIO, VSYNC_FLAGS);
  401bca:	2171      	movs	r1, #113	; 0x71
  401bcc:	200f      	movs	r0, #15
  401bce:	4b1c      	ldr	r3, [pc, #112]	; (401c40 <init_camera+0xe4>)
  401bd0:	58e3      	ldr	r3, [r4, r3]
  401bd2:	4798      	blx	r3
	
	pio_set_peripheral(PIOA, PIO_PERIPH_B, PIO_PA17);
  401bd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  401bd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401bdc:	4815      	ldr	r0, [pc, #84]	; (401c34 <init_camera+0xd8>)
  401bde:	4b19      	ldr	r3, [pc, #100]	; (401c44 <init_camera+0xe8>)
  401be0:	58e3      	ldr	r3, [r4, r3]
  401be2:	4798      	blx	r3
	
	/* Init Vsync handler*/
	init_vsync_interrupts();
  401be4:	4b18      	ldr	r3, [pc, #96]	; (401c48 <init_camera+0xec>)
  401be6:	58e3      	ldr	r3, [r4, r3]
  401be8:	4798      	blx	r3

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  401bea:	210b      	movs	r1, #11
  401bec:	4811      	ldr	r0, [pc, #68]	; (401c34 <init_camera+0xd8>)
  401bee:	4b17      	ldr	r3, [pc, #92]	; (401c4c <init_camera+0xf0>)
  401bf0:	58e3      	ldr	r3, [r4, r3]
  401bf2:	4798      	blx	r3

	/* Turn on ov7740 image sensor using power pin */
	// "Set the CAM reset pin high" - Ilya
	gpio_set_pin_high(RST_CAM_PIN);
  401bf4:	2014      	movs	r0, #20
  401bf6:	4b16      	ldr	r3, [pc, #88]	; (401c50 <init_camera+0xf4>)
  401bf8:	58e3      	ldr	r3, [r4, r3]
  401bfa:	4798      	blx	r3
	//	ov_power(true, OV_POWER_PIO, OV_POWER_MASK);

	pmc_enable_pllbck(3, 0x1, 1);
  401bfc:	2201      	movs	r2, #1
  401bfe:	2101      	movs	r1, #1
  401c00:	2003      	movs	r0, #3
  401c02:	4b14      	ldr	r3, [pc, #80]	; (401c54 <init_camera+0xf8>)
  401c04:	58e3      	ldr	r3, [r4, r3]
  401c06:	4798      	blx	r3
	
	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[1] = (PMC_PCK_PRES_CLK_1 | PMC_PCK_CSS_PLLB_CLK);
  401c08:	4b0b      	ldr	r3, [pc, #44]	; (401c38 <init_camera+0xdc>)
  401c0a:	2203      	movs	r2, #3
  401c0c:	645a      	str	r2, [r3, #68]	; 0x44
	PMC->PMC_SCER = PMC_SCER_PCK1;
  401c0e:	4b0a      	ldr	r3, [pc, #40]	; (401c38 <init_camera+0xdc>)
  401c10:	f44f 7200 	mov.w	r2, #512	; 0x200
  401c14:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK1)) {
  401c16:	bf00      	nop
  401c18:	4b07      	ldr	r3, [pc, #28]	; (401c38 <init_camera+0xdc>)
  401c1a:	689b      	ldr	r3, [r3, #8]
  401c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  401c20:	2b00      	cmp	r3, #0
  401c22:	d0f9      	beq.n	401c18 <init_camera+0xbc>
	}
	
	configure_twi();
  401c24:	4b0c      	ldr	r3, [pc, #48]	; (401c58 <init_camera+0xfc>)
  401c26:	58e3      	ldr	r3, [r4, r3]
  401c28:	4798      	blx	r3
}
  401c2a:	bf00      	nop
  401c2c:	bd98      	pop	{r3, r4, r7, pc}
  401c2e:	bf00      	nop
  401c30:	28000001 	.word	0x28000001
  401c34:	400e0e00 	.word	0x400e0e00
  401c38:	400e0400 	.word	0x400e0400
  401c3c:	00008236 	.word	0x00008236
  401c40:	00000068 	.word	0x00000068
  401c44:	00000088 	.word	0x00000088
  401c48:	00000178 	.word	0x00000178
  401c4c:	000000f0 	.word	0x000000f0
  401c50:	000000f4 	.word	0x000000f4
  401c54:	0000004c 	.word	0x0000004c
  401c58:	000000e8 	.word	0x000000e8

00401c5c <configure_twi>:


void configure_twi(void)
{
  401c5c:	b590      	push	{r4, r7, lr}
  401c5e:	b085      	sub	sp, #20
  401c60:	af00      	add	r7, sp, #0
  401c62:	4c1c      	ldr	r4, [pc, #112]	; (401cd4 <configure_twi+0x78>)
  401c64:	447c      	add	r4, pc
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401c66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c6a:	2003      	movs	r0, #3
  401c6c:	4b1a      	ldr	r3, [pc, #104]	; (401cd8 <configure_twi+0x7c>)
  401c6e:	58e3      	ldr	r3, [r4, r3]
  401c70:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401c72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c76:	2004      	movs	r0, #4
  401c78:	4b17      	ldr	r3, [pc, #92]	; (401cd8 <configure_twi+0x7c>)
  401c7a:	58e3      	ldr	r3, [r4, r3]
  401c7c:	4798      	blx	r3
	
	twi_options_t opt;
	
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  401c7e:	2013      	movs	r0, #19
  401c80:	4b16      	ldr	r3, [pc, #88]	; (401cdc <configure_twi+0x80>)
  401c82:	58e3      	ldr	r3, [r4, r3]
  401c84:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  401c86:	4b16      	ldr	r3, [pc, #88]	; (401ce0 <configure_twi+0x84>)
  401c88:	447b      	add	r3, pc
  401c8a:	4798      	blx	r3
  401c8c:	4603      	mov	r3, r0
  401c8e:	607b      	str	r3, [r7, #4]
	opt.speed      = TWI_CLK;
  401c90:	4b0e      	ldr	r3, [pc, #56]	; (401ccc <configure_twi+0x70>)
  401c92:	60bb      	str	r3, [r7, #8]
	twi_master_init(BOARD_TWI, &opt);
  401c94:	1d3b      	adds	r3, r7, #4
  401c96:	4619      	mov	r1, r3
  401c98:	480d      	ldr	r0, [pc, #52]	; (401cd0 <configure_twi+0x74>)
  401c9a:	4b12      	ldr	r3, [pc, #72]	; (401ce4 <configure_twi+0x88>)
  401c9c:	58e3      	ldr	r3, [r4, r3]
  401c9e:	4798      	blx	r3

	/* Configure TWI interrupts */
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
  401ca0:	2013      	movs	r0, #19
  401ca2:	4b11      	ldr	r3, [pc, #68]	; (401ce8 <configure_twi+0x8c>)
  401ca4:	447b      	add	r3, pc
  401ca6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
  401ca8:	2013      	movs	r0, #19
  401caa:	4b10      	ldr	r3, [pc, #64]	; (401cec <configure_twi+0x90>)
  401cac:	447b      	add	r3, pc
  401cae:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
  401cb0:	2100      	movs	r1, #0
  401cb2:	2013      	movs	r0, #19
  401cb4:	4b0e      	ldr	r3, [pc, #56]	; (401cf0 <configure_twi+0x94>)
  401cb6:	447b      	add	r3, pc
  401cb8:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
  401cba:	2013      	movs	r0, #19
  401cbc:	4b0d      	ldr	r3, [pc, #52]	; (401cf4 <configure_twi+0x98>)
  401cbe:	447b      	add	r3, pc
  401cc0:	4798      	blx	r3
}
  401cc2:	bf00      	nop
  401cc4:	3714      	adds	r7, #20
  401cc6:	46bd      	mov	sp, r7
  401cc8:	bd90      	pop	{r4, r7, pc}
  401cca:	bf00      	nop
  401ccc:	00061a80 	.word	0x00061a80
  401cd0:	40018000 	.word	0x40018000
  401cd4:	00008134 	.word	0x00008134
  401cd8:	00000068 	.word	0x00000068
  401cdc:	00000184 	.word	0x00000184
  401ce0:	fffffe4d 	.word	0xfffffe4d
  401ce4:	000000dc 	.word	0x000000dc
  401ce8:	fffffcdd 	.word	0xfffffcdd
  401cec:	fffffd09 	.word	0xfffffd09
  401cf0:	fffffd33 	.word	0xfffffd33
  401cf4:	fffffc93 	.word	0xfffffc93

00401cf8 <configure_camera>:

void configure_camera(void)
{
  401cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  401cfc:	b082      	sub	sp, #8
  401cfe:	af00      	add	r7, sp, #0
  401d00:	4d36      	ldr	r5, [pc, #216]	; (401ddc <configure_camera+0xe4>)
  401d02:	447d      	add	r5, pc
	/* ov7740 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  401d04:	bf00      	nop
  401d06:	4834      	ldr	r0, [pc, #208]	; (401dd8 <configure_camera+0xe0>)
  401d08:	4b35      	ldr	r3, [pc, #212]	; (401de0 <configure_camera+0xe8>)
  401d0a:	58eb      	ldr	r3, [r5, r3]
  401d0c:	4798      	blx	r3
  401d0e:	4603      	mov	r3, r0
  401d10:	2b01      	cmp	r3, #1
  401d12:	d0f8      	beq.n	401d06 <configure_camera+0xe>
	}
	
	/* ov7740 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  401d14:	2100      	movs	r1, #0
  401d16:	4830      	ldr	r0, [pc, #192]	; (401dd8 <configure_camera+0xe0>)
  401d18:	4b32      	ldr	r3, [pc, #200]	; (401de4 <configure_camera+0xec>)
  401d1a:	58eb      	ldr	r3, [r5, r3]
  401d1c:	4798      	blx	r3
	ov_configure(BOARD_TWI, YUV422);
  401d1e:	2101      	movs	r1, #1
  401d20:	482d      	ldr	r0, [pc, #180]	; (401dd8 <configure_camera+0xe0>)
  401d22:	4b30      	ldr	r3, [pc, #192]	; (401de4 <configure_camera+0xec>)
  401d24:	58eb      	ldr	r3, [r5, r3]
  401d26:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG);
  401d28:	2102      	movs	r1, #2
  401d2a:	482b      	ldr	r0, [pc, #172]	; (401dd8 <configure_camera+0xe0>)
  401d2c:	4b2d      	ldr	r3, [pc, #180]	; (401de4 <configure_camera+0xec>)
  401d2e:	58eb      	ldr	r3, [r5, r3]
  401d30:	4798      	blx	r3
	ov_configure(BOARD_TWI, JPEG_320x240);
  401d32:	2103      	movs	r1, #3
  401d34:	4828      	ldr	r0, [pc, #160]	; (401dd8 <configure_camera+0xe0>)
  401d36:	4b2b      	ldr	r3, [pc, #172]	; (401de4 <configure_camera+0xec>)
  401d38:	58eb      	ldr	r3, [r5, r3]
  401d3a:	4798      	blx	r3
	//ov_configure(BOARD_TWI, JPEG_1600x1200);

	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  401d3c:	4b2a      	ldr	r3, [pc, #168]	; (401de8 <configure_camera+0xf0>)
  401d3e:	447b      	add	r3, pc
  401d40:	4798      	blx	r3
  401d42:	4603      	mov	r3, r0
  401d44:	4619      	mov	r1, r3
  401d46:	f04f 0200 	mov.w	r2, #0
  401d4a:	460b      	mov	r3, r1
  401d4c:	4614      	mov	r4, r2
  401d4e:	18db      	adds	r3, r3, r3
  401d50:	eb44 0404 	adc.w	r4, r4, r4
  401d54:	185b      	adds	r3, r3, r1
  401d56:	eb44 0402 	adc.w	r4, r4, r2
  401d5a:	0120      	lsls	r0, r4, #4
  401d5c:	6078      	str	r0, [r7, #4]
  401d5e:	6878      	ldr	r0, [r7, #4]
  401d60:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  401d64:	6078      	str	r0, [r7, #4]
  401d66:	011b      	lsls	r3, r3, #4
  401d68:	603b      	str	r3, [r7, #0]
  401d6a:	e9d7 3400 	ldrd	r3, r4, [r7]
  401d6e:	1a5b      	subs	r3, r3, r1
  401d70:	eb64 0402 	sbc.w	r4, r4, r2
  401d74:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
  401d78:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
  401d7c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
  401d80:	4653      	mov	r3, sl
  401d82:	465c      	mov	r4, fp
  401d84:	1a5b      	subs	r3, r3, r1
  401d86:	eb64 0402 	sbc.w	r4, r4, r2
  401d8a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  401d8e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  401d92:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  401d96:	4643      	mov	r3, r8
  401d98:	464c      	mov	r4, r9
  401d9a:	4619      	mov	r1, r3
  401d9c:	4622      	mov	r2, r4
  401d9e:	f243 63af 	movw	r3, #13999	; 0x36af
  401da2:	f04f 0400 	mov.w	r4, #0
  401da6:	eb11 0803 	adds.w	r8, r1, r3
  401daa:	eb42 0904 	adc.w	r9, r2, r4
  401dae:	4640      	mov	r0, r8
  401db0:	4649      	mov	r1, r9
  401db2:	4b0e      	ldr	r3, [pc, #56]	; (401dec <configure_camera+0xf4>)
  401db4:	58eb      	ldr	r3, [r5, r3]
  401db6:	461c      	mov	r4, r3
  401db8:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401dbc:	f04f 0300 	mov.w	r3, #0
  401dc0:	47a0      	blx	r4
  401dc2:	4603      	mov	r3, r0
  401dc4:	460c      	mov	r4, r1
  401dc6:	4618      	mov	r0, r3
  401dc8:	4b09      	ldr	r3, [pc, #36]	; (401df0 <configure_camera+0xf8>)
  401dca:	58eb      	ldr	r3, [r5, r3]
  401dcc:	4798      	blx	r3
}
  401dce:	bf00      	nop
  401dd0:	3708      	adds	r7, #8
  401dd2:	46bd      	mov	sp, r7
  401dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
  401dd8:	40018000 	.word	0x40018000
  401ddc:	00008096 	.word	0x00008096
  401de0:	00000160 	.word	0x00000160
  401de4:	00000000 	.word	0x00000000
  401de8:	fffffd97 	.word	0xfffffd97
  401dec:	0000008c 	.word	0x0000008c
  401df0:	000001b8 	.word	0x000001b8

00401df4 <pio_capture_init>:


void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  401df4:	b580      	push	{r7, lr}
  401df6:	b082      	sub	sp, #8
  401df8:	af00      	add	r7, sp, #0
  401dfa:	6078      	str	r0, [r7, #4]
  401dfc:	6039      	str	r1, [r7, #0]
  401dfe:	4a1d      	ldr	r2, [pc, #116]	; (401e74 <pio_capture_init+0x80>)
  401e00:	447a      	add	r2, pc
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  401e02:	6838      	ldr	r0, [r7, #0]
  401e04:	4b1c      	ldr	r3, [pc, #112]	; (401e78 <pio_capture_init+0x84>)
  401e06:	58d3      	ldr	r3, [r2, r3]
  401e08:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  401e0a:	687b      	ldr	r3, [r7, #4]
  401e0c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401e10:	f023 0201 	bic.w	r2, r3, #1
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  401e1a:	687b      	ldr	r3, [r7, #4]
  401e1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
  401e20:	f043 0208 	orr.w	r2, r3, #8
  401e24:	687b      	ldr	r3, [r7, #4]
  401e26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  401e2a:	687b      	ldr	r3, [r7, #4]
  401e2c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
  401e34:	687b      	ldr	r3, [r7, #4]
  401e36:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  401e3a:	687b      	ldr	r3, [r7, #4]
  401e3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401e40:	f043 0220 	orr.w	r2, r3, #32
  401e44:	687b      	ldr	r3, [r7, #4]
  401e46:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  401e4a:	687b      	ldr	r3, [r7, #4]
  401e4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401e50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
  401e54:	687b      	ldr	r3, [r7, #4]
  401e56:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  401e5a:	687b      	ldr	r3, [r7, #4]
  401e5c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  401e60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  401e64:	687b      	ldr	r3, [r7, #4]
  401e66:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
//#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	//p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
	//p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
//#endif
}
  401e6a:	bf00      	nop
  401e6c:	3708      	adds	r7, #8
  401e6e:	46bd      	mov	sp, r7
  401e70:	bd80      	pop	{r7, pc}
  401e72:	bf00      	nop
  401e74:	00007f98 	.word	0x00007f98
  401e78:	00000184 	.word	0x00000184

00401e7c <pio_capture_to_buffer>:

uint8_t pio_capture_to_buffer(Pio *p_pio, uint8_t *uc_buf, uint32_t ul_size)
{
  401e7c:	b480      	push	{r7}
  401e7e:	b085      	sub	sp, #20
  401e80:	af00      	add	r7, sp, #0
  401e82:	60f8      	str	r0, [r7, #12]
  401e84:	60b9      	str	r1, [r7, #8]
  401e86:	607a      	str	r2, [r7, #4]
	/* Check if the first PDC bank is free */
	if ((p_pio->PIO_RCR == 0) && (p_pio->PIO_RNCR == 0)) 
  401e88:	68fb      	ldr	r3, [r7, #12]
  401e8a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
  401e8e:	2b00      	cmp	r3, #0
  401e90:	d112      	bne.n	401eb8 <pio_capture_to_buffer+0x3c>
  401e92:	68fb      	ldr	r3, [r7, #12]
  401e94:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d10d      	bne.n	401eb8 <pio_capture_to_buffer+0x3c>
	{
		p_pio->PIO_RPR = (uint32_t)uc_buf;
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	68fb      	ldr	r3, [r7, #12]
  401ea0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		p_pio->PIO_RCR = ul_size;
  401ea4:	68fb      	ldr	r3, [r7, #12]
  401ea6:	687a      	ldr	r2, [r7, #4]
  401ea8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		p_pio->PIO_PTCR = PIO_PTCR_RXTEN;
  401eac:	68fb      	ldr	r3, [r7, #12]
  401eae:	2201      	movs	r2, #1
  401eb0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		return 1;
  401eb4:	2301      	movs	r3, #1
  401eb6:	e00f      	b.n	401ed8 <pio_capture_to_buffer+0x5c>
	} 
	
	else if (p_pio->PIO_RNCR == 0) 
  401eb8:	68fb      	ldr	r3, [r7, #12]
  401eba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
  401ebe:	2b00      	cmp	r3, #0
  401ec0:	d109      	bne.n	401ed6 <pio_capture_to_buffer+0x5a>
	{
		p_pio->PIO_RNPR = (uint32_t)uc_buf;
  401ec2:	68ba      	ldr	r2, [r7, #8]
  401ec4:	68fb      	ldr	r3, [r7, #12]
  401ec6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		p_pio->PIO_RNCR = ul_size;
  401eca:	68fb      	ldr	r3, [r7, #12]
  401ecc:	687a      	ldr	r2, [r7, #4]
  401ece:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		return 1;
  401ed2:	2301      	movs	r3, #1
  401ed4:	e000      	b.n	401ed8 <pio_capture_to_buffer+0x5c>
	} 
	
	else 
	{
		return 0;
  401ed6:	2300      	movs	r3, #0
	}
}
  401ed8:	4618      	mov	r0, r3
  401eda:	3714      	adds	r7, #20
  401edc:	46bd      	mov	sp, r7
  401ede:	bc80      	pop	{r7}
  401ee0:	4770      	bx	lr
	...

00401ee4 <start_capture>:

uint8_t start_capture(void)
{
  401ee4:	b590      	push	{r4, r7, lr}
  401ee6:	b083      	sub	sp, #12
  401ee8:	af00      	add	r7, sp, #0
  401eea:	4c2c      	ldr	r4, [pc, #176]	; (401f9c <start_capture+0xb8>)
  401eec:	447c      	add	r4, pc
    for (int jj=0;jj<MAX_BUFF;jj++) image_buffer[jj] = 0;
  401eee:	2300      	movs	r3, #0
  401ef0:	607b      	str	r3, [r7, #4]
  401ef2:	e009      	b.n	401f08 <start_capture+0x24>
  401ef4:	4b2a      	ldr	r3, [pc, #168]	; (401fa0 <start_capture+0xbc>)
  401ef6:	58e3      	ldr	r3, [r4, r3]
  401ef8:	461a      	mov	r2, r3
  401efa:	687b      	ldr	r3, [r7, #4]
  401efc:	4413      	add	r3, r2
  401efe:	2200      	movs	r2, #0
  401f00:	701a      	strb	r2, [r3, #0]
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	3301      	adds	r3, #1
  401f06:	607b      	str	r3, [r7, #4]
  401f08:	687b      	ldr	r3, [r7, #4]
  401f0a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  401f0e:	4293      	cmp	r3, r2
  401f10:	ddf0      	ble.n	401ef4 <start_capture+0x10>

	g_p_uc_cap_dest_buf = (uint8_t *)image_buffer;
  401f12:	4b24      	ldr	r3, [pc, #144]	; (401fa4 <start_capture+0xc0>)
  401f14:	58e3      	ldr	r3, [r4, r3]
  401f16:	461a      	mov	r2, r3
  401f18:	4b21      	ldr	r3, [pc, #132]	; (401fa0 <start_capture+0xbc>)
  401f1a:	58e3      	ldr	r3, [r4, r3]
  401f1c:	6013      	str	r3, [r2, #0]


	/* Enable vsync interrupt*/
	pio_enable_interrupt(VSYNC_PIO, VSYNC_PIN_MSK);
  401f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401f22:	481d      	ldr	r0, [pc, #116]	; (401f98 <start_capture+0xb4>)
  401f24:	4b20      	ldr	r3, [pc, #128]	; (401fa8 <start_capture+0xc4>)
  401f26:	58e3      	ldr	r3, [r4, r3]
  401f28:	4798      	blx	r3

	/* Capture acquisition will start on rising edge of Vsync signal.
	 * So wait vsync_flag = 1 before start process
	 */
	while (!vsync_flag) {
  401f2a:	bf00      	nop
  401f2c:	4b1f      	ldr	r3, [pc, #124]	; (401fac <start_capture+0xc8>)
  401f2e:	58e3      	ldr	r3, [r4, r3]
  401f30:	781b      	ldrb	r3, [r3, #0]
  401f32:	b2db      	uxtb	r3, r3
  401f34:	f083 0301 	eor.w	r3, r3, #1
  401f38:	b2db      	uxtb	r3, r3
  401f3a:	2b00      	cmp	r3, #0
  401f3c:	d1f6      	bne.n	401f2c <start_capture+0x48>
	}

	/* Disable vsync interrupt*/
	pio_disable_interrupt(VSYNC_PIO, VSYNC_PIN_MSK);
  401f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401f42:	4815      	ldr	r0, [pc, #84]	; (401f98 <start_capture+0xb4>)
  401f44:	4b1a      	ldr	r3, [pc, #104]	; (401fb0 <start_capture+0xcc>)
  401f46:	58e3      	ldr	r3, [r4, r3]
  401f48:	4798      	blx	r3

	/* Enable pio capture*/
	pio_capture_enable(OV_DATA_BUS_PIO);
  401f4a:	4813      	ldr	r0, [pc, #76]	; (401f98 <start_capture+0xb4>)
  401f4c:	4b19      	ldr	r3, [pc, #100]	; (401fb4 <start_capture+0xd0>)
  401f4e:	58e3      	ldr	r3, [r4, r3]
  401f50:	4798      	blx	r3

	/* Capture data and send it to external SRAM memory thanks to PDC
	 * feature */
	pio_capture_to_buffer(OV_DATA_BUS_PIO, g_p_uc_cap_dest_buf, (MAX_BUFF) >> 2);
  401f52:	4b14      	ldr	r3, [pc, #80]	; (401fa4 <start_capture+0xc0>)
  401f54:	58e3      	ldr	r3, [r4, r3]
  401f56:	681b      	ldr	r3, [r3, #0]
  401f58:	f241 3288 	movw	r2, #5000	; 0x1388
  401f5c:	4619      	mov	r1, r3
  401f5e:	480e      	ldr	r0, [pc, #56]	; (401f98 <start_capture+0xb4>)
  401f60:	4b15      	ldr	r3, [pc, #84]	; (401fb8 <start_capture+0xd4>)
  401f62:	58e3      	ldr	r3, [r4, r3]
  401f64:	4798      	blx	r3

	/* Wait end of capture*/
	while (!((OV_DATA_BUS_PIO->PIO_PCISR & PIO_PCIMR_RXBUFF) == PIO_PCIMR_RXBUFF)) {
  401f66:	bf00      	nop
  401f68:	4b0b      	ldr	r3, [pc, #44]	; (401f98 <start_capture+0xb4>)
  401f6a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
  401f6e:	f003 0308 	and.w	r3, r3, #8
  401f72:	2b08      	cmp	r3, #8
  401f74:	d1f8      	bne.n	401f68 <start_capture+0x84>
	}

	/* Disable pio capture*/
	pio_capture_disable(OV_DATA_BUS_PIO);
  401f76:	4808      	ldr	r0, [pc, #32]	; (401f98 <start_capture+0xb4>)
  401f78:	4b10      	ldr	r3, [pc, #64]	; (401fbc <start_capture+0xd8>)
  401f7a:	58e3      	ldr	r3, [r4, r3]
  401f7c:	4798      	blx	r3

	/* Reset vsync flag*/
	vsync_flag = false;
  401f7e:	4b0b      	ldr	r3, [pc, #44]	; (401fac <start_capture+0xc8>)
  401f80:	58e3      	ldr	r3, [r4, r3]
  401f82:	2200      	movs	r2, #0
  401f84:	701a      	strb	r2, [r3, #0]
	
	return find_image_len();
  401f86:	4b0e      	ldr	r3, [pc, #56]	; (401fc0 <start_capture+0xdc>)
  401f88:	58e3      	ldr	r3, [r4, r3]
  401f8a:	4798      	blx	r3
  401f8c:	4603      	mov	r3, r0

}
  401f8e:	4618      	mov	r0, r3
  401f90:	370c      	adds	r7, #12
  401f92:	46bd      	mov	sp, r7
  401f94:	bd90      	pop	{r4, r7, pc}
  401f96:	bf00      	nop
  401f98:	400e0e00 	.word	0x400e0e00
  401f9c:	00007eac 	.word	0x00007eac
  401fa0:	00000248 	.word	0x00000248
  401fa4:	000000c8 	.word	0x000000c8
  401fa8:	00000238 	.word	0x00000238
  401fac:	00000080 	.word	0x00000080
  401fb0:	000000d4 	.word	0x000000d4
  401fb4:	00000140 	.word	0x00000140
  401fb8:	00000120 	.word	0x00000120
  401fbc:	0000001c 	.word	0x0000001c
  401fc0:	000001d0 	.word	0x000001d0

00401fc4 <find_image_len>:

uint8_t find_image_len(void)
{
  401fc4:	b480      	push	{r7}
  401fc6:	b083      	sub	sp, #12
  401fc8:	af00      	add	r7, sp, #0
  401fca:	4b41      	ldr	r3, [pc, #260]	; (4020d0 <find_image_len+0x10c>)
  401fcc:	447b      	add	r3, pc
	char c1 = 0x0;
  401fce:	2200      	movs	r2, #0
  401fd0:	70fa      	strb	r2, [r7, #3]
	char c2 = 0x0;
  401fd2:	2200      	movs	r2, #0
  401fd4:	70ba      	strb	r2, [r7, #2]
	
	start_image_flag = false;
  401fd6:	4a3f      	ldr	r2, [pc, #252]	; (4020d4 <find_image_len+0x110>)
  401fd8:	589a      	ldr	r2, [r3, r2]
  401fda:	2100      	movs	r1, #0
  401fdc:	7011      	strb	r1, [r2, #0]
	end_image_flag = false;
  401fde:	4a3e      	ldr	r2, [pc, #248]	; (4020d8 <find_image_len+0x114>)
  401fe0:	589a      	ldr	r2, [r3, r2]
  401fe2:	2100      	movs	r1, #0
  401fe4:	7011      	strb	r1, [r2, #0]
	start_image = 0;
  401fe6:	4a3d      	ldr	r2, [pc, #244]	; (4020dc <find_image_len+0x118>)
  401fe8:	589a      	ldr	r2, [r3, r2]
  401fea:	4611      	mov	r1, r2
  401fec:	2200      	movs	r2, #0
  401fee:	600a      	str	r2, [r1, #0]
	end_image = 0;
  401ff0:	4a3b      	ldr	r2, [pc, #236]	; (4020e0 <find_image_len+0x11c>)
  401ff2:	589a      	ldr	r2, [r3, r2]
  401ff4:	4611      	mov	r1, r2
  401ff6:	2200      	movs	r2, #0
  401ff8:	600a      	str	r2, [r1, #0]
	
	for (uint32_t ii = 1; ii < MAX_BUFF; ii++)
  401ffa:	2201      	movs	r2, #1
  401ffc:	607a      	str	r2, [r7, #4]
  401ffe:	e038      	b.n	402072 <find_image_len+0xae>
	{
		c1 = image_buffer[ii-1];
  402000:	687a      	ldr	r2, [r7, #4]
  402002:	3a01      	subs	r2, #1
  402004:	4937      	ldr	r1, [pc, #220]	; (4020e4 <find_image_len+0x120>)
  402006:	5859      	ldr	r1, [r3, r1]
  402008:	5c8a      	ldrb	r2, [r1, r2]
  40200a:	70fa      	strb	r2, [r7, #3]
		c2 = image_buffer[ii];
  40200c:	4a35      	ldr	r2, [pc, #212]	; (4020e4 <find_image_len+0x120>)
  40200e:	589a      	ldr	r2, [r3, r2]
  402010:	4611      	mov	r1, r2
  402012:	687a      	ldr	r2, [r7, #4]
  402014:	440a      	add	r2, r1
  402016:	7812      	ldrb	r2, [r2, #0]
  402018:	70ba      	strb	r2, [r7, #2]
		
		if (c1 == 0xff)
  40201a:	78fa      	ldrb	r2, [r7, #3]
  40201c:	2aff      	cmp	r2, #255	; 0xff
  40201e:	d125      	bne.n	40206c <find_image_len+0xa8>
		{
			if (c2 == 0xd8)
  402020:	78ba      	ldrb	r2, [r7, #2]
  402022:	2ad8      	cmp	r2, #216	; 0xd8
  402024:	d109      	bne.n	40203a <find_image_len+0x76>
			{
				// start of image
				start_image = ii-1;
  402026:	687a      	ldr	r2, [r7, #4]
  402028:	3a01      	subs	r2, #1
  40202a:	4611      	mov	r1, r2
  40202c:	4a2b      	ldr	r2, [pc, #172]	; (4020dc <find_image_len+0x118>)
  40202e:	589a      	ldr	r2, [r3, r2]
  402030:	6011      	str	r1, [r2, #0]
				start_image_flag = true;
  402032:	4a28      	ldr	r2, [pc, #160]	; (4020d4 <find_image_len+0x110>)
  402034:	589a      	ldr	r2, [r3, r2]
  402036:	2101      	movs	r1, #1
  402038:	7011      	strb	r1, [r2, #0]
			}
			if (c2 == 0xd9 && start_image_flag && ii > start_image)
  40203a:	78ba      	ldrb	r2, [r7, #2]
  40203c:	2ad9      	cmp	r2, #217	; 0xd9
  40203e:	d115      	bne.n	40206c <find_image_len+0xa8>
  402040:	4a24      	ldr	r2, [pc, #144]	; (4020d4 <find_image_len+0x110>)
  402042:	589a      	ldr	r2, [r3, r2]
  402044:	7812      	ldrb	r2, [r2, #0]
  402046:	b2d2      	uxtb	r2, r2
  402048:	2a00      	cmp	r2, #0
  40204a:	d00f      	beq.n	40206c <find_image_len+0xa8>
  40204c:	4a23      	ldr	r2, [pc, #140]	; (4020dc <find_image_len+0x118>)
  40204e:	589a      	ldr	r2, [r3, r2]
  402050:	6812      	ldr	r2, [r2, #0]
  402052:	4611      	mov	r1, r2
  402054:	687a      	ldr	r2, [r7, #4]
  402056:	428a      	cmp	r2, r1
  402058:	d908      	bls.n	40206c <find_image_len+0xa8>
			{
				// end of image
				end_image = ii;
  40205a:	687a      	ldr	r2, [r7, #4]
  40205c:	4920      	ldr	r1, [pc, #128]	; (4020e0 <find_image_len+0x11c>)
  40205e:	5859      	ldr	r1, [r3, r1]
  402060:	600a      	str	r2, [r1, #0]
				end_image_flag = true;
  402062:	4a1d      	ldr	r2, [pc, #116]	; (4020d8 <find_image_len+0x114>)
  402064:	589a      	ldr	r2, [r3, r2]
  402066:	2101      	movs	r1, #1
  402068:	7011      	strb	r1, [r2, #0]
				break;
  40206a:	e007      	b.n	40207c <find_image_len+0xb8>
	for (uint32_t ii = 1; ii < MAX_BUFF; ii++)
  40206c:	687a      	ldr	r2, [r7, #4]
  40206e:	3201      	adds	r2, #1
  402070:	607a      	str	r2, [r7, #4]
  402072:	687a      	ldr	r2, [r7, #4]
  402074:	f644 611f 	movw	r1, #19999	; 0x4e1f
  402078:	428a      	cmp	r2, r1
  40207a:	d9c1      	bls.n	402000 <find_image_len+0x3c>
			}
		}
	}
	
	image_length_JPEG = end_image - start_image;
  40207c:	4a18      	ldr	r2, [pc, #96]	; (4020e0 <find_image_len+0x11c>)
  40207e:	589a      	ldr	r2, [r3, r2]
  402080:	6811      	ldr	r1, [r2, #0]
  402082:	4a16      	ldr	r2, [pc, #88]	; (4020dc <find_image_len+0x118>)
  402084:	589a      	ldr	r2, [r3, r2]
  402086:	6812      	ldr	r2, [r2, #0]
  402088:	1a8a      	subs	r2, r1, r2
  40208a:	4917      	ldr	r1, [pc, #92]	; (4020e8 <find_image_len+0x124>)
  40208c:	5859      	ldr	r1, [r3, r1]
  40208e:	600a      	str	r2, [r1, #0]
	
	if ((image_length_JPEG == 0) || ((start_image_flag == false) || (end_image_flag == false)))
  402090:	4a15      	ldr	r2, [pc, #84]	; (4020e8 <find_image_len+0x124>)
  402092:	589a      	ldr	r2, [r3, r2]
  402094:	6812      	ldr	r2, [r2, #0]
  402096:	2a00      	cmp	r2, #0
  402098:	d011      	beq.n	4020be <find_image_len+0xfa>
  40209a:	4a0e      	ldr	r2, [pc, #56]	; (4020d4 <find_image_len+0x110>)
  40209c:	589a      	ldr	r2, [r3, r2]
  40209e:	7812      	ldrb	r2, [r2, #0]
  4020a0:	b2d2      	uxtb	r2, r2
  4020a2:	f082 0201 	eor.w	r2, r2, #1
  4020a6:	b2d2      	uxtb	r2, r2
  4020a8:	2a00      	cmp	r2, #0
  4020aa:	d108      	bne.n	4020be <find_image_len+0xfa>
  4020ac:	4a0a      	ldr	r2, [pc, #40]	; (4020d8 <find_image_len+0x114>)
  4020ae:	589b      	ldr	r3, [r3, r2]
  4020b0:	781b      	ldrb	r3, [r3, #0]
  4020b2:	b2db      	uxtb	r3, r3
  4020b4:	f083 0301 	eor.w	r3, r3, #1
  4020b8:	b2db      	uxtb	r3, r3
  4020ba:	2b00      	cmp	r3, #0
  4020bc:	d001      	beq.n	4020c2 <find_image_len+0xfe>
	{
		return 0;
  4020be:	2300      	movs	r3, #0
  4020c0:	e000      	b.n	4020c4 <find_image_len+0x100>
	}
	
	else
	{
		return 1;
  4020c2:	2301      	movs	r3, #1
	}
}
  4020c4:	4618      	mov	r0, r3
  4020c6:	370c      	adds	r7, #12
  4020c8:	46bd      	mov	sp, r7
  4020ca:	bc80      	pop	{r7}
  4020cc:	4770      	bx	lr
  4020ce:	bf00      	nop
  4020d0:	00007dcc 	.word	0x00007dcc
  4020d4:	000000b8 	.word	0x000000b8
  4020d8:	00000234 	.word	0x00000234
  4020dc:	00000220 	.word	0x00000220
  4020e0:	0000000c 	.word	0x0000000c
  4020e4:	00000248 	.word	0x00000248
  4020e8:	000000f8 	.word	0x000000f8

004020ec <osc_get_rate>:
{
  4020ec:	b480      	push	{r7}
  4020ee:	b083      	sub	sp, #12
  4020f0:	af00      	add	r7, sp, #0
  4020f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4020f4:	687b      	ldr	r3, [r7, #4]
  4020f6:	2b07      	cmp	r3, #7
  4020f8:	d827      	bhi.n	40214a <osc_get_rate+0x5e>
  4020fa:	a202      	add	r2, pc, #8	; (adr r2, 402104 <osc_get_rate+0x18>)
  4020fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402100:	441a      	add	r2, r3
  402102:	4710      	bx	r2
  402104:	00000021 	.word	0x00000021
  402108:	00000027 	.word	0x00000027
  40210c:	0000002d 	.word	0x0000002d
  402110:	00000033 	.word	0x00000033
  402114:	00000037 	.word	0x00000037
  402118:	0000003b 	.word	0x0000003b
  40211c:	0000003f 	.word	0x0000003f
  402120:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  402124:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402128:	e010      	b.n	40214c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  40212a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40212e:	e00d      	b.n	40214c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  402130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402134:	e00a      	b.n	40214c <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  402136:	4b08      	ldr	r3, [pc, #32]	; (402158 <osc_get_rate+0x6c>)
  402138:	e008      	b.n	40214c <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  40213a:	4b08      	ldr	r3, [pc, #32]	; (40215c <osc_get_rate+0x70>)
  40213c:	e006      	b.n	40214c <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  40213e:	4b08      	ldr	r3, [pc, #32]	; (402160 <osc_get_rate+0x74>)
  402140:	e004      	b.n	40214c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  402142:	4b07      	ldr	r3, [pc, #28]	; (402160 <osc_get_rate+0x74>)
  402144:	e002      	b.n	40214c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  402146:	4b06      	ldr	r3, [pc, #24]	; (402160 <osc_get_rate+0x74>)
  402148:	e000      	b.n	40214c <osc_get_rate+0x60>
	return 0;
  40214a:	2300      	movs	r3, #0
}
  40214c:	4618      	mov	r0, r3
  40214e:	370c      	adds	r7, #12
  402150:	46bd      	mov	sp, r7
  402152:	bc80      	pop	{r7}
  402154:	4770      	bx	lr
  402156:	bf00      	nop
  402158:	003d0900 	.word	0x003d0900
  40215c:	007a1200 	.word	0x007a1200
  402160:	00b71b00 	.word	0x00b71b00

00402164 <sysclk_get_main_hz>:
{
  402164:	b580      	push	{r7, lr}
  402166:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402168:	2006      	movs	r0, #6
  40216a:	4b05      	ldr	r3, [pc, #20]	; (402180 <sysclk_get_main_hz+0x1c>)
  40216c:	447b      	add	r3, pc
  40216e:	4798      	blx	r3
  402170:	4602      	mov	r2, r0
  402172:	4613      	mov	r3, r2
  402174:	009b      	lsls	r3, r3, #2
  402176:	4413      	add	r3, r2
  402178:	009b      	lsls	r3, r3, #2
}
  40217a:	4618      	mov	r0, r3
  40217c:	bd80      	pop	{r7, pc}
  40217e:	bf00      	nop
  402180:	ffffff7d 	.word	0xffffff7d

00402184 <sysclk_get_cpu_hz>:
{
  402184:	b580      	push	{r7, lr}
  402186:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402188:	4b03      	ldr	r3, [pc, #12]	; (402198 <sysclk_get_cpu_hz+0x14>)
  40218a:	447b      	add	r3, pc
  40218c:	4798      	blx	r3
  40218e:	4603      	mov	r3, r0
  402190:	085b      	lsrs	r3, r3, #1
}
  402192:	4618      	mov	r0, r3
  402194:	bd80      	pop	{r7, pc}
  402196:	bf00      	nop
  402198:	ffffffd7 	.word	0xffffffd7

0040219c <ov_id>:
 *
 * \param p_twi TWI interface.
 * \return PID and VER.
 */
static uint32_t ov_id(Twi* const p_twi)
{
  40219c:	b590      	push	{r4, r7, lr}
  40219e:	b08f      	sub	sp, #60	; 0x3c
  4021a0:	af00      	add	r7, sp, #0
  4021a2:	6078      	str	r0, [r7, #4]
  4021a4:	4c1a      	ldr	r4, [pc, #104]	; (402210 <ov_id+0x74>)
  4021a6:	447c      	add	r4, pc
	twi_packet_t packet_pid;
	twi_packet_t packet_ver;
	uint32_t ul_id = 0;
  4021a8:	2300      	movs	r3, #0
  4021aa:	60fb      	str	r3, [r7, #12]
	uint32_t ul_ver = 0;
  4021ac:	2300      	movs	r3, #0
  4021ae:	60bb      	str	r3, [r7, #8]

	/* OV_PID */
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4021b0:	2330      	movs	r3, #48	; 0x30
  4021b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet_pid.addr[0] = OV2640_PIDH;
  4021b6:	230a      	movs	r3, #10
  4021b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet_pid.addr_length = 1;
  4021bc:	2301      	movs	r3, #1
  4021be:	62bb      	str	r3, [r7, #40]	; 0x28
	packet_pid.buffer = &ul_id;
  4021c0:	f107 030c 	add.w	r3, r7, #12
  4021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet_pid.length = 1;
  4021c6:	2301      	movs	r3, #1
  4021c8:	633b      	str	r3, [r7, #48]	; 0x30

	ov_read_reg(p_twi, &packet_pid);
  4021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4021ce:	4619      	mov	r1, r3
  4021d0:	6878      	ldr	r0, [r7, #4]
  4021d2:	4b10      	ldr	r3, [pc, #64]	; (402214 <ov_id+0x78>)
  4021d4:	58e3      	ldr	r3, [r4, r3]
  4021d6:	4798      	blx	r3

	/* OV_VER */
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  4021d8:	2330      	movs	r3, #48	; 0x30
  4021da:	f887 3020 	strb.w	r3, [r7, #32]
	packet_ver.addr[0] = OV2640_PIDL;
  4021de:	230b      	movs	r3, #11
  4021e0:	743b      	strb	r3, [r7, #16]
	packet_ver.addr_length = 1;
  4021e2:	2301      	movs	r3, #1
  4021e4:	617b      	str	r3, [r7, #20]
	packet_ver.buffer = &ul_ver;
  4021e6:	f107 0308 	add.w	r3, r7, #8
  4021ea:	61bb      	str	r3, [r7, #24]
	packet_ver.length = 1;
  4021ec:	2301      	movs	r3, #1
  4021ee:	61fb      	str	r3, [r7, #28]

	ov_read_reg(p_twi, &packet_ver);
  4021f0:	f107 0310 	add.w	r3, r7, #16
  4021f4:	4619      	mov	r1, r3
  4021f6:	6878      	ldr	r0, [r7, #4]
  4021f8:	4b06      	ldr	r3, [pc, #24]	; (402214 <ov_id+0x78>)
  4021fa:	58e3      	ldr	r3, [r4, r3]
  4021fc:	4798      	blx	r3
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4021fe:	68fb      	ldr	r3, [r7, #12]
  402200:	021a      	lsls	r2, r3, #8
  402202:	68bb      	ldr	r3, [r7, #8]
  402204:	4313      	orrs	r3, r2
}
  402206:	4618      	mov	r0, r3
  402208:	373c      	adds	r7, #60	; 0x3c
  40220a:	46bd      	mov	sp, r7
  40220c:	bd90      	pop	{r4, r7, pc}
  40220e:	bf00      	nop
  402210:	00007bf2 	.word	0x00007bf2
  402214:	000001f8 	.word	0x000001f8

00402218 <ov_manufacturer>:
 *
 * \param p_twi TWI interface.
 * \return 0 if the sensor is present, 1 otherwise.
 */
static uint32_t ov_manufacturer(Twi* const p_twi)
{
  402218:	b590      	push	{r4, r7, lr}
  40221a:	b08b      	sub	sp, #44	; 0x2c
  40221c:	af00      	add	r7, sp, #0
  40221e:	6078      	str	r0, [r7, #4]
  402220:	4c1c      	ldr	r4, [pc, #112]	; (402294 <ov_manufacturer+0x7c>)
  402222:	447c      	add	r4, pc
	twi_packet_t twi_packet;
	uint32_t ul_midh = 0;
  402224:	2300      	movs	r3, #0
  402226:	613b      	str	r3, [r7, #16]
	uint32_t ul_midl = 0;
  402228:	2300      	movs	r3, #0
  40222a:	60fb      	str	r3, [r7, #12]

	/* OV_MIDH */
	twi_packet.addr[0] = OV2640_MIDH;
  40222c:	231c      	movs	r3, #28
  40222e:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  402230:	2301      	movs	r3, #1
  402232:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  402234:	2330      	movs	r3, #48	; 0x30
  402236:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midh;
  40223a:	f107 0310 	add.w	r3, r7, #16
  40223e:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  402240:	2301      	movs	r3, #1
  402242:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  402244:	f107 0314 	add.w	r3, r7, #20
  402248:	4619      	mov	r1, r3
  40224a:	6878      	ldr	r0, [r7, #4]
  40224c:	4b12      	ldr	r3, [pc, #72]	; (402298 <ov_manufacturer+0x80>)
  40224e:	58e3      	ldr	r3, [r4, r3]
  402250:	4798      	blx	r3

	/* OV_MIDL */
	twi_packet.addr[0] = OV2640_MIDL;
  402252:	231d      	movs	r3, #29
  402254:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  402256:	2301      	movs	r3, #1
  402258:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  40225a:	2330      	movs	r3, #48	; 0x30
  40225c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.buffer = &ul_midl;
  402260:	f107 030c 	add.w	r3, r7, #12
  402264:	61fb      	str	r3, [r7, #28]
	twi_packet.length = 1;
  402266:	2301      	movs	r3, #1
  402268:	623b      	str	r3, [r7, #32]

	ov_read_reg(p_twi, &twi_packet);
  40226a:	f107 0314 	add.w	r3, r7, #20
  40226e:	4619      	mov	r1, r3
  402270:	6878      	ldr	r0, [r7, #4]
  402272:	4b09      	ldr	r3, [pc, #36]	; (402298 <ov_manufacturer+0x80>)
  402274:	58e3      	ldr	r3, [r4, r3]
  402276:	4798      	blx	r3

	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  402278:	693b      	ldr	r3, [r7, #16]
  40227a:	2b7f      	cmp	r3, #127	; 0x7f
  40227c:	d104      	bne.n	402288 <ov_manufacturer+0x70>
  40227e:	68fb      	ldr	r3, [r7, #12]
  402280:	2ba2      	cmp	r3, #162	; 0xa2
  402282:	d101      	bne.n	402288 <ov_manufacturer+0x70>
		return 0;
  402284:	2300      	movs	r3, #0
  402286:	e000      	b.n	40228a <ov_manufacturer+0x72>
	}

	return 1;
  402288:	2301      	movs	r3, #1
}
  40228a:	4618      	mov	r0, r3
  40228c:	372c      	adds	r7, #44	; 0x2c
  40228e:	46bd      	mov	sp, r7
  402290:	bd90      	pop	{r4, r7, pc}
  402292:	bf00      	nop
  402294:	00007b76 	.word	0x00007b76
  402298:	000001f8 	.word	0x000001f8

0040229c <ov_test_write>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
static uint32_t ov_test_write(Twi* const p_twi)
{
  40229c:	b590      	push	{r4, r7, lr}
  40229e:	b08b      	sub	sp, #44	; 0x2c
  4022a0:	af00      	add	r7, sp, #0
  4022a2:	6078      	str	r0, [r7, #4]
  4022a4:	4c2a      	ldr	r4, [pc, #168]	; (402350 <ov_test_write+0xb4>)
  4022a6:	447c      	add	r4, pc
	twi_packet_t twi_packet;
	uint32_t ul_value = 0;
  4022a8:	2300      	movs	r3, #0
  4022aa:	613b      	str	r3, [r7, #16]
	uint32_t ul_oldvalue = 0;
  4022ac:	2300      	movs	r3, #0
  4022ae:	60fb      	str	r3, [r7, #12]
	uint32_t ul_entervalue = 0;
  4022b0:	2300      	movs	r3, #0
  4022b2:	60bb      	str	r3, [r7, #8]

	/* OV_BLUE_GAIN */
	twi_packet.addr[0] = 0x01;
  4022b4:	2301      	movs	r3, #1
  4022b6:	753b      	strb	r3, [r7, #20]
	twi_packet.addr_length = 1;
  4022b8:	2301      	movs	r3, #1
  4022ba:	61bb      	str	r3, [r7, #24]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  4022bc:	2330      	movs	r3, #48	; 0x30
  4022be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	twi_packet.length = 1;
  4022c2:	2301      	movs	r3, #1
  4022c4:	623b      	str	r3, [r7, #32]

	twi_packet.buffer = &ul_oldvalue;
  4022c6:	f107 030c 	add.w	r3, r7, #12
  4022ca:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  4022cc:	f107 0314 	add.w	r3, r7, #20
  4022d0:	4619      	mov	r1, r3
  4022d2:	6878      	ldr	r0, [r7, #4]
  4022d4:	4b1f      	ldr	r3, [pc, #124]	; (402354 <ov_test_write+0xb8>)
  4022d6:	58e3      	ldr	r3, [r4, r3]
  4022d8:	4798      	blx	r3

	ul_entervalue = 0xAD;
  4022da:	23ad      	movs	r3, #173	; 0xad
  4022dc:	60bb      	str	r3, [r7, #8]
	twi_packet.buffer = &ul_entervalue;
  4022de:	f107 0308 	add.w	r3, r7, #8
  4022e2:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  4022e4:	f107 0314 	add.w	r3, r7, #20
  4022e8:	4619      	mov	r1, r3
  4022ea:	6878      	ldr	r0, [r7, #4]
  4022ec:	4b1a      	ldr	r3, [pc, #104]	; (402358 <ov_test_write+0xbc>)
  4022ee:	58e3      	ldr	r3, [r4, r3]
  4022f0:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  4022f2:	f107 0310 	add.w	r3, r7, #16
  4022f6:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  4022f8:	f107 0314 	add.w	r3, r7, #20
  4022fc:	4619      	mov	r1, r3
  4022fe:	6878      	ldr	r0, [r7, #4]
  402300:	4b14      	ldr	r3, [pc, #80]	; (402354 <ov_test_write+0xb8>)
  402302:	58e3      	ldr	r3, [r4, r3]
  402304:	4798      	blx	r3

	if (ul_value != ul_entervalue) {
  402306:	693a      	ldr	r2, [r7, #16]
  402308:	68bb      	ldr	r3, [r7, #8]
  40230a:	429a      	cmp	r2, r3
  40230c:	d001      	beq.n	402312 <ov_test_write+0x76>
		return 1;
  40230e:	2301      	movs	r3, #1
  402310:	e01a      	b.n	402348 <ov_test_write+0xac>
	}

	/* return old value */
	twi_packet.buffer = &ul_oldvalue;
  402312:	f107 030c 	add.w	r3, r7, #12
  402316:	61fb      	str	r3, [r7, #28]
	ov_write_reg(p_twi, &twi_packet);
  402318:	f107 0314 	add.w	r3, r7, #20
  40231c:	4619      	mov	r1, r3
  40231e:	6878      	ldr	r0, [r7, #4]
  402320:	4b0d      	ldr	r3, [pc, #52]	; (402358 <ov_test_write+0xbc>)
  402322:	58e3      	ldr	r3, [r4, r3]
  402324:	4798      	blx	r3

	twi_packet.buffer = &ul_value;
  402326:	f107 0310 	add.w	r3, r7, #16
  40232a:	61fb      	str	r3, [r7, #28]
	ov_read_reg(p_twi, &twi_packet);
  40232c:	f107 0314 	add.w	r3, r7, #20
  402330:	4619      	mov	r1, r3
  402332:	6878      	ldr	r0, [r7, #4]
  402334:	4b07      	ldr	r3, [pc, #28]	; (402354 <ov_test_write+0xb8>)
  402336:	58e3      	ldr	r3, [r4, r3]
  402338:	4798      	blx	r3

	if (ul_value != ul_oldvalue) {
  40233a:	693a      	ldr	r2, [r7, #16]
  40233c:	68fb      	ldr	r3, [r7, #12]
  40233e:	429a      	cmp	r2, r3
  402340:	d001      	beq.n	402346 <ov_test_write+0xaa>
		return 1;
  402342:	2301      	movs	r3, #1
  402344:	e000      	b.n	402348 <ov_test_write+0xac>
	}

	return 0;
  402346:	2300      	movs	r3, #0
}
  402348:	4618      	mov	r0, r3
  40234a:	372c      	adds	r7, #44	; 0x2c
  40234c:	46bd      	mov	sp, r7
  40234e:	bd90      	pop	{r4, r7, pc}
  402350:	00007af2 	.word	0x00007af2
  402354:	000001f8 	.word	0x000001f8
  402358:	00000108 	.word	0x00000108

0040235c <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  40235c:	b580      	push	{r7, lr}
  40235e:	b084      	sub	sp, #16
  402360:	af00      	add	r7, sp, #0
  402362:	6078      	str	r0, [r7, #4]
  402364:	6039      	str	r1, [r7, #0]
  402366:	4a06      	ldr	r2, [pc, #24]	; (402380 <ov_read_reg+0x24>)
  402368:	447a      	add	r2, pc
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  40236a:	6839      	ldr	r1, [r7, #0]
  40236c:	6878      	ldr	r0, [r7, #4]
  40236e:	4b05      	ldr	r3, [pc, #20]	; (402384 <ov_read_reg+0x28>)
  402370:	58d3      	ldr	r3, [r2, r3]
  402372:	4798      	blx	r3
  402374:	60f8      	str	r0, [r7, #12]

	return ul_status;
  402376:	68fb      	ldr	r3, [r7, #12]
}
  402378:	4618      	mov	r0, r3
  40237a:	3710      	adds	r7, #16
  40237c:	46bd      	mov	sp, r7
  40237e:	bd80      	pop	{r7, pc}
  402380:	00007a30 	.word	0x00007a30
  402384:	00000224 	.word	0x00000224

00402388 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  402388:	b580      	push	{r7, lr}
  40238a:	b084      	sub	sp, #16
  40238c:	af00      	add	r7, sp, #0
  40238e:	6078      	str	r0, [r7, #4]
  402390:	6039      	str	r1, [r7, #0]
  402392:	4a06      	ldr	r2, [pc, #24]	; (4023ac <ov_write_reg+0x24>)
  402394:	447a      	add	r2, pc
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  402396:	6839      	ldr	r1, [r7, #0]
  402398:	6878      	ldr	r0, [r7, #4]
  40239a:	4b05      	ldr	r3, [pc, #20]	; (4023b0 <ov_write_reg+0x28>)
  40239c:	58d3      	ldr	r3, [r2, r3]
  40239e:	4798      	blx	r3
  4023a0:	60f8      	str	r0, [r7, #12]

	return ul_status;
  4023a2:	68fb      	ldr	r3, [r7, #12]
}
  4023a4:	4618      	mov	r0, r3
  4023a6:	3710      	adds	r7, #16
  4023a8:	46bd      	mov	sp, r7
  4023aa:	bd80      	pop	{r7, pc}
  4023ac:	00007a04 	.word	0x00007a04
  4023b0:	00000070 	.word	0x00000070

004023b4 <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  4023b4:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
  4023b8:	b08b      	sub	sp, #44	; 0x2c
  4023ba:	af00      	add	r7, sp, #0
  4023bc:	6078      	str	r0, [r7, #4]
  4023be:	6039      	str	r1, [r7, #0]
  4023c0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 402490 <ov_write_regs+0xdc>
  4023c4:	44f8      	add	r8, pc
	uint32_t ul_err;
	uint32_t ul_size = 0;
  4023c6:	2300      	movs	r3, #0
  4023c8:	627b      	str	r3, [r7, #36]	; 0x24
	twi_packet_t twi_packet_regs;
	ov_reg *p_next = (ov_reg *)p_reg_list;
  4023ca:	683b      	ldr	r3, [r7, #0]
  4023cc:	623b      	str	r3, [r7, #32]

	while (!((p_next->reg == OV_REG_TERM) &&
  4023ce:	e050      	b.n	402472 <ov_write_regs+0xbe>
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
  4023d0:	6a3b      	ldr	r3, [r7, #32]
  4023d2:	781b      	ldrb	r3, [r3, #0]
  4023d4:	2bfe      	cmp	r3, #254	; 0xfe
  4023d6:	d12c      	bne.n	402432 <ov_write_regs+0x7e>
			delay_ms(5);
  4023d8:	4b2e      	ldr	r3, [pc, #184]	; (402494 <ov_write_regs+0xe0>)
  4023da:	447b      	add	r3, pc
  4023dc:	4798      	blx	r3
  4023de:	4603      	mov	r3, r0
  4023e0:	4619      	mov	r1, r3
  4023e2:	f04f 0200 	mov.w	r2, #0
  4023e6:	460b      	mov	r3, r1
  4023e8:	4614      	mov	r4, r2
  4023ea:	00a6      	lsls	r6, r4, #2
  4023ec:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4023f0:	009d      	lsls	r5, r3, #2
  4023f2:	462b      	mov	r3, r5
  4023f4:	4634      	mov	r4, r6
  4023f6:	185b      	adds	r3, r3, r1
  4023f8:	eb44 0402 	adc.w	r4, r4, r2
  4023fc:	f243 61af 	movw	r1, #13999	; 0x36af
  402400:	f04f 0200 	mov.w	r2, #0
  402404:	eb13 0b01 	adds.w	fp, r3, r1
  402408:	eb44 0c02 	adc.w	ip, r4, r2
  40240c:	4658      	mov	r0, fp
  40240e:	4661      	mov	r1, ip
  402410:	4b21      	ldr	r3, [pc, #132]	; (402498 <ov_write_regs+0xe4>)
  402412:	f858 3003 	ldr.w	r3, [r8, r3]
  402416:	461c      	mov	r4, r3
  402418:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40241c:	f04f 0300 	mov.w	r3, #0
  402420:	47a0      	blx	r4
  402422:	4603      	mov	r3, r0
  402424:	460c      	mov	r4, r1
  402426:	4618      	mov	r0, r3
  402428:	4b1c      	ldr	r3, [pc, #112]	; (40249c <ov_write_regs+0xe8>)
  40242a:	f858 3003 	ldr.w	r3, [r8, r3]
  40242e:	4798      	blx	r3
  402430:	e01c      	b.n	40246c <ov_write_regs+0xb8>
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
  402432:	6a3b      	ldr	r3, [r7, #32]
  402434:	781b      	ldrb	r3, [r3, #0]
  402436:	723b      	strb	r3, [r7, #8]
			twi_packet_regs.addr_length = 1;
  402438:	2301      	movs	r3, #1
  40243a:	60fb      	str	r3, [r7, #12]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40243c:	2330      	movs	r3, #48	; 0x30
  40243e:	763b      	strb	r3, [r7, #24]
			twi_packet_regs.length = 1;
  402440:	2301      	movs	r3, #1
  402442:	617b      	str	r3, [r7, #20]
			twi_packet_regs.buffer = &(p_next->val);
  402444:	6a3b      	ldr	r3, [r7, #32]
  402446:	3301      	adds	r3, #1
  402448:	613b      	str	r3, [r7, #16]

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  40244a:	f107 0308 	add.w	r3, r7, #8
  40244e:	4619      	mov	r1, r3
  402450:	6878      	ldr	r0, [r7, #4]
  402452:	4b13      	ldr	r3, [pc, #76]	; (4024a0 <ov_write_regs+0xec>)
  402454:	f858 3003 	ldr.w	r3, [r8, r3]
  402458:	4798      	blx	r3
  40245a:	61f8      	str	r0, [r7, #28]
			ul_size++;
  40245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40245e:	3301      	adds	r3, #1
  402460:	627b      	str	r3, [r7, #36]	; 0x24

			if (ul_err == TWI_BUSY) {
  402462:	69fb      	ldr	r3, [r7, #28]
  402464:	2b08      	cmp	r3, #8
  402466:	d101      	bne.n	40246c <ov_write_regs+0xb8>
				return ul_err;
  402468:	69fb      	ldr	r3, [r7, #28]
  40246a:	e00b      	b.n	402484 <ov_write_regs+0xd0>
			}
		}

		p_next++;
  40246c:	6a3b      	ldr	r3, [r7, #32]
  40246e:	3302      	adds	r3, #2
  402470:	623b      	str	r3, [r7, #32]
	while (!((p_next->reg == OV_REG_TERM) &&
  402472:	6a3b      	ldr	r3, [r7, #32]
  402474:	781b      	ldrb	r3, [r3, #0]
  402476:	2bff      	cmp	r3, #255	; 0xff
  402478:	d1aa      	bne.n	4023d0 <ov_write_regs+0x1c>
			(p_next->val == OV_VAL_TERM))) {
  40247a:	6a3b      	ldr	r3, [r7, #32]
  40247c:	785b      	ldrb	r3, [r3, #1]
	while (!((p_next->reg == OV_REG_TERM) &&
  40247e:	2bff      	cmp	r3, #255	; 0xff
  402480:	d1a6      	bne.n	4023d0 <ov_write_regs+0x1c>
	}
	return 0;
  402482:	2300      	movs	r3, #0
}
  402484:	4618      	mov	r0, r3
  402486:	372c      	adds	r7, #44	; 0x2c
  402488:	46bd      	mov	sp, r7
  40248a:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
  40248e:	bf00      	nop
  402490:	000079d4 	.word	0x000079d4
  402494:	fffffda7 	.word	0xfffffda7
  402498:	0000008c 	.word	0x0000008c
  40249c:	000001b8 	.word	0x000001b8
  4024a0:	00000108 	.word	0x00000108

004024a4 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  4024a4:	b590      	push	{r4, r7, lr}
  4024a6:	b08b      	sub	sp, #44	; 0x2c
  4024a8:	af00      	add	r7, sp, #0
  4024aa:	6078      	str	r0, [r7, #4]
  4024ac:	4c1f      	ldr	r4, [pc, #124]	; (40252c <ov_init+0x88>)
  4024ae:	447c      	add	r4, pc
	const uint8_t cont_reg_val = 1;
  4024b0:	2301      	movs	r3, #1
  4024b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	twi_packet_t init_packet = {
  4024b6:	f107 030c 	add.w	r3, r7, #12
  4024ba:	2200      	movs	r2, #0
  4024bc:	601a      	str	r2, [r3, #0]
  4024be:	605a      	str	r2, [r3, #4]
  4024c0:	609a      	str	r2, [r3, #8]
  4024c2:	60da      	str	r2, [r3, #12]
  4024c4:	611a      	str	r2, [r3, #16]
  4024c6:	23ff      	movs	r3, #255	; 0xff
  4024c8:	733b      	strb	r3, [r7, #12]
  4024ca:	2301      	movs	r3, #1
  4024cc:	613b      	str	r3, [r7, #16]
  4024ce:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4024d2:	617b      	str	r3, [r7, #20]
  4024d4:	2301      	movs	r3, #1
  4024d6:	61bb      	str	r3, [r7, #24]
  4024d8:	2330      	movs	r3, #48	; 0x30
  4024da:	773b      	strb	r3, [r7, #28]
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  4024dc:	f107 030c 	add.w	r3, r7, #12
  4024e0:	4619      	mov	r1, r3
  4024e2:	6878      	ldr	r0, [r7, #4]
  4024e4:	4b12      	ldr	r3, [pc, #72]	; (402530 <ov_init+0x8c>)
  4024e6:	58e3      	ldr	r3, [r4, r3]
  4024e8:	4798      	blx	r3
	
	
	uint32_t ul_id = 0;
  4024ea:	2300      	movs	r3, #0
  4024ec:	627b      	str	r3, [r7, #36]	; 0x24

	ul_id = ov_id( p_twi );
  4024ee:	6878      	ldr	r0, [r7, #4]
  4024f0:	4b10      	ldr	r3, [pc, #64]	; (402534 <ov_init+0x90>)
  4024f2:	447b      	add	r3, pc
  4024f4:	4798      	blx	r3
  4024f6:	6278      	str	r0, [r7, #36]	; 0x24

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  4024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4024fa:	0a1b      	lsrs	r3, r3, #8
  4024fc:	b2db      	uxtb	r3, r3
  4024fe:	2b26      	cmp	r3, #38	; 0x26
  402500:	d10f      	bne.n	402522 <ov_init+0x7e>
		if (ov_manufacturer( p_twi ) == 0) {
  402502:	6878      	ldr	r0, [r7, #4]
  402504:	4b0c      	ldr	r3, [pc, #48]	; (402538 <ov_init+0x94>)
  402506:	447b      	add	r3, pc
  402508:	4798      	blx	r3
  40250a:	4603      	mov	r3, r0
  40250c:	2b00      	cmp	r3, #0
  40250e:	d108      	bne.n	402522 <ov_init+0x7e>
			if (ov_test_write( p_twi ) == 0) {
  402510:	6878      	ldr	r0, [r7, #4]
  402512:	4b0a      	ldr	r3, [pc, #40]	; (40253c <ov_init+0x98>)
  402514:	447b      	add	r3, pc
  402516:	4798      	blx	r3
  402518:	4603      	mov	r3, r0
  40251a:	2b00      	cmp	r3, #0
  40251c:	d101      	bne.n	402522 <ov_init+0x7e>
				return 0;
  40251e:	2300      	movs	r3, #0
  402520:	e000      	b.n	402524 <ov_init+0x80>
			}
		}
	}

	return 1;
  402522:	2301      	movs	r3, #1
}
  402524:	4618      	mov	r0, r3
  402526:	372c      	adds	r7, #44	; 0x2c
  402528:	46bd      	mov	sp, r7
  40252a:	bd90      	pop	{r4, r7, pc}
  40252c:	000078ea 	.word	0x000078ea
  402530:	00000108 	.word	0x00000108
  402534:	fffffca7 	.word	0xfffffca7
  402538:	fffffd0f 	.word	0xfffffd0f
  40253c:	fffffd85 	.word	0xfffffd85

00402540 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  402540:	b580      	push	{r7, lr}
  402542:	b084      	sub	sp, #16
  402544:	af00      	add	r7, sp, #0
  402546:	6078      	str	r0, [r7, #4]
  402548:	460b      	mov	r3, r1
  40254a:	70fb      	strb	r3, [r7, #3]
  40254c:	4b43      	ldr	r3, [pc, #268]	; (40265c <ov_configure+0x11c>)
  40254e:	447b      	add	r3, pc
	const ov_reg *p_regs_conf = NULL;
  402550:	2200      	movs	r2, #0
  402552:	60fa      	str	r2, [r7, #12]

	/* Common register initialization */
	switch (format) {
  402554:	78fa      	ldrb	r2, [r7, #3]
  402556:	2a11      	cmp	r2, #17
  402558:	d870      	bhi.n	40263c <ov_configure+0xfc>
  40255a:	a102      	add	r1, pc, #8	; (adr r1, 402564 <ov_configure+0x24>)
  40255c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  402560:	4411      	add	r1, r2
  402562:	4708      	bx	r1
  402564:	00000049 	.word	0x00000049
  402568:	00000051 	.word	0x00000051
  40256c:	00000059 	.word	0x00000059
  402570:	00000061 	.word	0x00000061
  402574:	00000069 	.word	0x00000069
  402578:	00000071 	.word	0x00000071
  40257c:	00000079 	.word	0x00000079
  402580:	00000081 	.word	0x00000081
  402584:	00000089 	.word	0x00000089
  402588:	00000091 	.word	0x00000091
  40258c:	00000099 	.word	0x00000099
  402590:	000000a1 	.word	0x000000a1
  402594:	000000a9 	.word	0x000000a9
  402598:	000000b1 	.word	0x000000b1
  40259c:	000000b9 	.word	0x000000b9
  4025a0:	000000c1 	.word	0x000000c1
  4025a4:	000000c9 	.word	0x000000c9
  4025a8:	000000d1 	.word	0x000000d1
		
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
  4025ac:	4a2c      	ldr	r2, [pc, #176]	; (402660 <ov_configure+0x120>)
  4025ae:	589a      	ldr	r2, [r3, r2]
  4025b0:	60fa      	str	r2, [r7, #12]
		break;
  4025b2:	e044      	b.n	40263e <ov_configure+0xfe>
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  4025b4:	4a2b      	ldr	r2, [pc, #172]	; (402664 <ov_configure+0x124>)
  4025b6:	589a      	ldr	r2, [r3, r2]
  4025b8:	60fa      	str	r2, [r7, #12]
		break;
  4025ba:	e040      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG:
		p_regs_conf = OV2640_JPEG;
  4025bc:	4a2a      	ldr	r2, [pc, #168]	; (402668 <ov_configure+0x128>)
  4025be:	589a      	ldr	r2, [r3, r2]
  4025c0:	60fa      	str	r2, [r7, #12]
		break;
  4025c2:	e03c      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  4025c4:	4a29      	ldr	r2, [pc, #164]	; (40266c <ov_configure+0x12c>)
  4025c6:	589a      	ldr	r2, [r3, r2]
  4025c8:	60fa      	str	r2, [r7, #12]
		break;
  4025ca:	e038      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  4025cc:	4a28      	ldr	r2, [pc, #160]	; (402670 <ov_configure+0x130>)
  4025ce:	589a      	ldr	r2, [r3, r2]
  4025d0:	60fa      	str	r2, [r7, #12]
		break;
  4025d2:	e034      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  4025d4:	4a27      	ldr	r2, [pc, #156]	; (402674 <ov_configure+0x134>)
  4025d6:	589a      	ldr	r2, [r3, r2]
  4025d8:	60fa      	str	r2, [r7, #12]
		break;
  4025da:	e030      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  4025dc:	4a26      	ldr	r2, [pc, #152]	; (402678 <ov_configure+0x138>)
  4025de:	589a      	ldr	r2, [r3, r2]
  4025e0:	60fa      	str	r2, [r7, #12]
		break;
  4025e2:	e02c      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  4025e4:	4a25      	ldr	r2, [pc, #148]	; (40267c <ov_configure+0x13c>)
  4025e6:	589a      	ldr	r2, [r3, r2]
  4025e8:	60fa      	str	r2, [r7, #12]
		break;
  4025ea:	e028      	b.n	40263e <ov_configure+0xfe>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  4025ec:	4a24      	ldr	r2, [pc, #144]	; (402680 <ov_configure+0x140>)
  4025ee:	589a      	ldr	r2, [r3, r2]
  4025f0:	60fa      	str	r2, [r7, #12]
		break;
  4025f2:	e024      	b.n	40263e <ov_configure+0xfe>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  4025f4:	4a23      	ldr	r2, [pc, #140]	; (402684 <ov_configure+0x144>)
  4025f6:	589a      	ldr	r2, [r3, r2]
  4025f8:	60fa      	str	r2, [r7, #12]
		break;
  4025fa:	e020      	b.n	40263e <ov_configure+0xfe>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  4025fc:	4a22      	ldr	r2, [pc, #136]	; (402688 <ov_configure+0x148>)
  4025fe:	589a      	ldr	r2, [r3, r2]
  402600:	60fa      	str	r2, [r7, #12]
		break;
  402602:	e01c      	b.n	40263e <ov_configure+0xfe>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  402604:	4a21      	ldr	r2, [pc, #132]	; (40268c <ov_configure+0x14c>)
  402606:	589a      	ldr	r2, [r3, r2]
  402608:	60fa      	str	r2, [r7, #12]
		break;
  40260a:	e018      	b.n	40263e <ov_configure+0xfe>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  40260c:	4a20      	ldr	r2, [pc, #128]	; (402690 <ov_configure+0x150>)
  40260e:	589a      	ldr	r2, [r3, r2]
  402610:	60fa      	str	r2, [r7, #12]
		break;
  402612:	e014      	b.n	40263e <ov_configure+0xfe>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  402614:	4a1f      	ldr	r2, [pc, #124]	; (402694 <ov_configure+0x154>)
  402616:	589a      	ldr	r2, [r3, r2]
  402618:	60fa      	str	r2, [r7, #12]
		break;
  40261a:	e010      	b.n	40263e <ov_configure+0xfe>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  40261c:	4a1e      	ldr	r2, [pc, #120]	; (402698 <ov_configure+0x158>)
  40261e:	589a      	ldr	r2, [r3, r2]
  402620:	60fa      	str	r2, [r7, #12]
		break;
  402622:	e00c      	b.n	40263e <ov_configure+0xfe>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  402624:	4a1d      	ldr	r2, [pc, #116]	; (40269c <ov_configure+0x15c>)
  402626:	589a      	ldr	r2, [r3, r2]
  402628:	60fa      	str	r2, [r7, #12]
		break;
  40262a:	e008      	b.n	40263e <ov_configure+0xfe>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  40262c:	4a1c      	ldr	r2, [pc, #112]	; (4026a0 <ov_configure+0x160>)
  40262e:	589a      	ldr	r2, [r3, r2]
  402630:	60fa      	str	r2, [r7, #12]
		break;
  402632:	e004      	b.n	40263e <ov_configure+0xfe>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  402634:	4a1b      	ldr	r2, [pc, #108]	; (4026a4 <ov_configure+0x164>)
  402636:	589a      	ldr	r2, [r3, r2]
  402638:	60fa      	str	r2, [r7, #12]
		break;
  40263a:	e000      	b.n	40263e <ov_configure+0xfe>

	default:
		break;
  40263c:	bf00      	nop
	}

	if (p_regs_conf != NULL) {
  40263e:	68fa      	ldr	r2, [r7, #12]
  402640:	2a00      	cmp	r2, #0
  402642:	d006      	beq.n	402652 <ov_configure+0x112>
		ov_write_regs( p_twi, p_regs_conf );
  402644:	68f9      	ldr	r1, [r7, #12]
  402646:	6878      	ldr	r0, [r7, #4]
  402648:	4a17      	ldr	r2, [pc, #92]	; (4026a8 <ov_configure+0x168>)
  40264a:	589b      	ldr	r3, [r3, r2]
  40264c:	4798      	blx	r3
		return 0;
  40264e:	2300      	movs	r3, #0
  402650:	e000      	b.n	402654 <ov_configure+0x114>
	}

	return 1;
  402652:	2301      	movs	r3, #1
}
  402654:	4618      	mov	r0, r3
  402656:	3710      	adds	r7, #16
  402658:	46bd      	mov	sp, r7
  40265a:	bd80      	pop	{r7, pc}
  40265c:	0000784a 	.word	0x0000784a
  402660:	00000138 	.word	0x00000138
  402664:	00000008 	.word	0x00000008
  402668:	000001f4 	.word	0x000001f4
  40266c:	00000044 	.word	0x00000044
  402670:	00000170 	.word	0x00000170
  402674:	000000fc 	.word	0x000000fc
  402678:	00000144 	.word	0x00000144
  40267c:	00000028 	.word	0x00000028
  402680:	00000148 	.word	0x00000148
  402684:	000001b4 	.word	0x000001b4
  402688:	0000012c 	.word	0x0000012c
  40268c:	00000190 	.word	0x00000190
  402690:	0000009c 	.word	0x0000009c
  402694:	000000ac 	.word	0x000000ac
  402698:	000001dc 	.word	0x000001dc
  40269c:	000001b0 	.word	0x000001b0
  4026a0:	000000ec 	.word	0x000000ec
  4026a4:	00000114 	.word	0x00000114
  4026a8:	00000048 	.word	0x00000048

004026ac <NVIC_EnableIRQ>:
{
  4026ac:	b480      	push	{r7}
  4026ae:	b083      	sub	sp, #12
  4026b0:	af00      	add	r7, sp, #0
  4026b2:	4603      	mov	r3, r0
  4026b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4026b6:	4908      	ldr	r1, [pc, #32]	; (4026d8 <NVIC_EnableIRQ+0x2c>)
  4026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026bc:	095b      	lsrs	r3, r3, #5
  4026be:	79fa      	ldrb	r2, [r7, #7]
  4026c0:	f002 021f 	and.w	r2, r2, #31
  4026c4:	2001      	movs	r0, #1
  4026c6:	fa00 f202 	lsl.w	r2, r0, r2
  4026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4026ce:	bf00      	nop
  4026d0:	370c      	adds	r7, #12
  4026d2:	46bd      	mov	sp, r7
  4026d4:	bc80      	pop	{r7}
  4026d6:	4770      	bx	lr
  4026d8:	e000e100 	.word	0xe000e100

004026dc <osc_get_rate>:
{
  4026dc:	b480      	push	{r7}
  4026de:	b083      	sub	sp, #12
  4026e0:	af00      	add	r7, sp, #0
  4026e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4026e4:	687b      	ldr	r3, [r7, #4]
  4026e6:	2b07      	cmp	r3, #7
  4026e8:	d827      	bhi.n	40273a <osc_get_rate+0x5e>
  4026ea:	a202      	add	r2, pc, #8	; (adr r2, 4026f4 <osc_get_rate+0x18>)
  4026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4026f0:	441a      	add	r2, r3
  4026f2:	4710      	bx	r2
  4026f4:	00000021 	.word	0x00000021
  4026f8:	00000027 	.word	0x00000027
  4026fc:	0000002d 	.word	0x0000002d
  402700:	00000033 	.word	0x00000033
  402704:	00000037 	.word	0x00000037
  402708:	0000003b 	.word	0x0000003b
  40270c:	0000003f 	.word	0x0000003f
  402710:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  402714:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402718:	e010      	b.n	40273c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  40271a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40271e:	e00d      	b.n	40273c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  402720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402724:	e00a      	b.n	40273c <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  402726:	4b08      	ldr	r3, [pc, #32]	; (402748 <osc_get_rate+0x6c>)
  402728:	e008      	b.n	40273c <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  40272a:	4b08      	ldr	r3, [pc, #32]	; (40274c <osc_get_rate+0x70>)
  40272c:	e006      	b.n	40273c <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  40272e:	4b08      	ldr	r3, [pc, #32]	; (402750 <osc_get_rate+0x74>)
  402730:	e004      	b.n	40273c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  402732:	4b07      	ldr	r3, [pc, #28]	; (402750 <osc_get_rate+0x74>)
  402734:	e002      	b.n	40273c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  402736:	4b06      	ldr	r3, [pc, #24]	; (402750 <osc_get_rate+0x74>)
  402738:	e000      	b.n	40273c <osc_get_rate+0x60>
	return 0;
  40273a:	2300      	movs	r3, #0
}
  40273c:	4618      	mov	r0, r3
  40273e:	370c      	adds	r7, #12
  402740:	46bd      	mov	sp, r7
  402742:	bc80      	pop	{r7}
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	003d0900 	.word	0x003d0900
  40274c:	007a1200 	.word	0x007a1200
  402750:	00b71b00 	.word	0x00b71b00

00402754 <sysclk_get_main_hz>:
{
  402754:	b580      	push	{r7, lr}
  402756:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402758:	2006      	movs	r0, #6
  40275a:	4b05      	ldr	r3, [pc, #20]	; (402770 <sysclk_get_main_hz+0x1c>)
  40275c:	447b      	add	r3, pc
  40275e:	4798      	blx	r3
  402760:	4602      	mov	r2, r0
  402762:	4613      	mov	r3, r2
  402764:	009b      	lsls	r3, r3, #2
  402766:	4413      	add	r3, r2
  402768:	009b      	lsls	r3, r3, #2
}
  40276a:	4618      	mov	r0, r3
  40276c:	bd80      	pop	{r7, pc}
  40276e:	bf00      	nop
  402770:	ffffff7d 	.word	0xffffff7d

00402774 <sysclk_get_cpu_hz>:
{
  402774:	b580      	push	{r7, lr}
  402776:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402778:	4b03      	ldr	r3, [pc, #12]	; (402788 <sysclk_get_cpu_hz+0x14>)
  40277a:	447b      	add	r3, pc
  40277c:	4798      	blx	r3
  40277e:	4603      	mov	r3, r0
  402780:	085b      	lsrs	r3, r3, #1
}
  402782:	4618      	mov	r0, r3
  402784:	bd80      	pop	{r7, pc}
  402786:	bf00      	nop
  402788:	ffffffd7 	.word	0xffffffd7

0040278c <TC0_Handler>:

#include "timer_interface.h"


void TC0_Handler(void)
{
  40278c:	b590      	push	{r4, r7, lr}
  40278e:	b083      	sub	sp, #12
  402790:	af00      	add	r7, sp, #0
  402792:	4c0e      	ldr	r4, [pc, #56]	; (4027cc <TC0_Handler+0x40>)
  402794:	447c      	add	r4, pc
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  402796:	2100      	movs	r1, #0
  402798:	480b      	ldr	r0, [pc, #44]	; (4027c8 <TC0_Handler+0x3c>)
  40279a:	4b0d      	ldr	r3, [pc, #52]	; (4027d0 <TC0_Handler+0x44>)
  40279c:	58e3      	ldr	r3, [r4, r3]
  40279e:	4798      	blx	r3
  4027a0:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  4027a2:	687b      	ldr	r3, [r7, #4]
  4027a4:	f003 0310 	and.w	r3, r3, #16
  4027a8:	2b00      	cmp	r3, #0
  4027aa:	d008      	beq.n	4027be <TC0_Handler+0x32>
		counts++;
  4027ac:	4b09      	ldr	r3, [pc, #36]	; (4027d4 <TC0_Handler+0x48>)
  4027ae:	58e3      	ldr	r3, [r4, r3]
  4027b0:	781b      	ldrb	r3, [r3, #0]
  4027b2:	b2db      	uxtb	r3, r3
  4027b4:	3301      	adds	r3, #1
  4027b6:	b2da      	uxtb	r2, r3
  4027b8:	4b06      	ldr	r3, [pc, #24]	; (4027d4 <TC0_Handler+0x48>)
  4027ba:	58e3      	ldr	r3, [r4, r3]
  4027bc:	701a      	strb	r2, [r3, #0]
	}
}
  4027be:	bf00      	nop
  4027c0:	370c      	adds	r7, #12
  4027c2:	46bd      	mov	sp, r7
  4027c4:	bd90      	pop	{r4, r7, pc}
  4027c6:	bf00      	nop
  4027c8:	40010000 	.word	0x40010000
  4027cc:	00007604 	.word	0x00007604
  4027d0:	00000200 	.word	0x00000200
  4027d4:	00000230 	.word	0x00000230

004027d8 <configure_tc>:

void configure_tc(void)
{
  4027d8:	b5b0      	push	{r4, r5, r7, lr}
  4027da:	b086      	sub	sp, #24
  4027dc:	af02      	add	r7, sp, #8
  4027de:	4c1e      	ldr	r4, [pc, #120]	; (402858 <configure_tc+0x80>)
  4027e0:	447c      	add	r4, pc
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk;

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();
  4027e2:	4b1e      	ldr	r3, [pc, #120]	; (40285c <configure_tc+0x84>)
  4027e4:	447b      	add	r3, pc
  4027e6:	4798      	blx	r3
  4027e8:	60f8      	str	r0, [r7, #12]

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  4027ea:	2017      	movs	r0, #23
  4027ec:	4b1c      	ldr	r3, [pc, #112]	; (402860 <configure_tc+0x88>)
  4027ee:	58e3      	ldr	r3, [r4, r3]
  4027f0:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4027f2:	1d39      	adds	r1, r7, #4
  4027f4:	f107 0208 	add.w	r2, r7, #8
  4027f8:	68fb      	ldr	r3, [r7, #12]
  4027fa:	9300      	str	r3, [sp, #0]
  4027fc:	460b      	mov	r3, r1
  4027fe:	68f9      	ldr	r1, [r7, #12]
  402800:	2001      	movs	r0, #1
  402802:	4d18      	ldr	r5, [pc, #96]	; (402864 <configure_tc+0x8c>)
  402804:	5965      	ldr	r5, [r4, r5]
  402806:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  402808:	687b      	ldr	r3, [r7, #4]
  40280a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40280e:	461a      	mov	r2, r3
  402810:	2100      	movs	r1, #0
  402812:	4810      	ldr	r0, [pc, #64]	; (402854 <configure_tc+0x7c>)
  402814:	4b14      	ldr	r3, [pc, #80]	; (402868 <configure_tc+0x90>)
  402816:	58e3      	ldr	r3, [r4, r3]
  402818:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  40281a:	68bb      	ldr	r3, [r7, #8]
  40281c:	68fa      	ldr	r2, [r7, #12]
  40281e:	fbb2 f3f3 	udiv	r3, r2, r3
  402822:	461a      	mov	r2, r3
  402824:	2100      	movs	r1, #0
  402826:	480b      	ldr	r0, [pc, #44]	; (402854 <configure_tc+0x7c>)
  402828:	4b10      	ldr	r3, [pc, #64]	; (40286c <configure_tc+0x94>)
  40282a:	58e3      	ldr	r3, [r4, r3]
  40282c:	4798      	blx	r3

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
  40282e:	2017      	movs	r0, #23
  402830:	4b0f      	ldr	r3, [pc, #60]	; (402870 <configure_tc+0x98>)
  402832:	447b      	add	r3, pc
  402834:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  402836:	2210      	movs	r2, #16
  402838:	2100      	movs	r1, #0
  40283a:	4806      	ldr	r0, [pc, #24]	; (402854 <configure_tc+0x7c>)
  40283c:	4b0d      	ldr	r3, [pc, #52]	; (402874 <configure_tc+0x9c>)
  40283e:	58e3      	ldr	r3, [r4, r3]
  402840:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  402842:	2100      	movs	r1, #0
  402844:	4803      	ldr	r0, [pc, #12]	; (402854 <configure_tc+0x7c>)
  402846:	4b0c      	ldr	r3, [pc, #48]	; (402878 <configure_tc+0xa0>)
  402848:	58e3      	ldr	r3, [r4, r3]
  40284a:	4798      	blx	r3
  40284c:	bf00      	nop
  40284e:	3710      	adds	r7, #16
  402850:	46bd      	mov	sp, r7
  402852:	bdb0      	pop	{r4, r5, r7, pc}
  402854:	40010000 	.word	0x40010000
  402858:	000075b8 	.word	0x000075b8
  40285c:	ffffff8d 	.word	0xffffff8d
  402860:	00000184 	.word	0x00000184
  402864:	000000cc 	.word	0x000000cc
  402868:	0000023c 	.word	0x0000023c
  40286c:	000001a8 	.word	0x000001a8
  402870:	fffffe77 	.word	0xfffffe77
  402874:	00000128 	.word	0x00000128
  402878:	000000a4 	.word	0x000000a4

0040287c <NVIC_EnableIRQ>:
{
  40287c:	b480      	push	{r7}
  40287e:	b083      	sub	sp, #12
  402880:	af00      	add	r7, sp, #0
  402882:	4603      	mov	r3, r0
  402884:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402886:	4908      	ldr	r1, [pc, #32]	; (4028a8 <NVIC_EnableIRQ+0x2c>)
  402888:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40288c:	095b      	lsrs	r3, r3, #5
  40288e:	79fa      	ldrb	r2, [r7, #7]
  402890:	f002 021f 	and.w	r2, r2, #31
  402894:	2001      	movs	r0, #1
  402896:	fa00 f202 	lsl.w	r2, r0, r2
  40289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40289e:	bf00      	nop
  4028a0:	370c      	adds	r7, #12
  4028a2:	46bd      	mov	sp, r7
  4028a4:	bc80      	pop	{r7}
  4028a6:	4770      	bx	lr
  4028a8:	e000e100 	.word	0xe000e100

004028ac <osc_get_rate>:
{
  4028ac:	b480      	push	{r7}
  4028ae:	b083      	sub	sp, #12
  4028b0:	af00      	add	r7, sp, #0
  4028b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4028b4:	687b      	ldr	r3, [r7, #4]
  4028b6:	2b07      	cmp	r3, #7
  4028b8:	d827      	bhi.n	40290a <osc_get_rate+0x5e>
  4028ba:	a202      	add	r2, pc, #8	; (adr r2, 4028c4 <osc_get_rate+0x18>)
  4028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4028c0:	441a      	add	r2, r3
  4028c2:	4710      	bx	r2
  4028c4:	00000021 	.word	0x00000021
  4028c8:	00000027 	.word	0x00000027
  4028cc:	0000002d 	.word	0x0000002d
  4028d0:	00000033 	.word	0x00000033
  4028d4:	00000037 	.word	0x00000037
  4028d8:	0000003b 	.word	0x0000003b
  4028dc:	0000003f 	.word	0x0000003f
  4028e0:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  4028e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4028e8:	e010      	b.n	40290c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  4028ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028ee:	e00d      	b.n	40290c <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  4028f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028f4:	e00a      	b.n	40290c <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  4028f6:	4b08      	ldr	r3, [pc, #32]	; (402918 <osc_get_rate+0x6c>)
  4028f8:	e008      	b.n	40290c <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  4028fa:	4b08      	ldr	r3, [pc, #32]	; (40291c <osc_get_rate+0x70>)
  4028fc:	e006      	b.n	40290c <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  4028fe:	4b08      	ldr	r3, [pc, #32]	; (402920 <osc_get_rate+0x74>)
  402900:	e004      	b.n	40290c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  402902:	4b07      	ldr	r3, [pc, #28]	; (402920 <osc_get_rate+0x74>)
  402904:	e002      	b.n	40290c <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  402906:	4b06      	ldr	r3, [pc, #24]	; (402920 <osc_get_rate+0x74>)
  402908:	e000      	b.n	40290c <osc_get_rate+0x60>
	return 0;
  40290a:	2300      	movs	r3, #0
}
  40290c:	4618      	mov	r0, r3
  40290e:	370c      	adds	r7, #12
  402910:	46bd      	mov	sp, r7
  402912:	bc80      	pop	{r7}
  402914:	4770      	bx	lr
  402916:	bf00      	nop
  402918:	003d0900 	.word	0x003d0900
  40291c:	007a1200 	.word	0x007a1200
  402920:	00b71b00 	.word	0x00b71b00

00402924 <sysclk_get_main_hz>:
{
  402924:	b580      	push	{r7, lr}
  402926:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402928:	2006      	movs	r0, #6
  40292a:	4b05      	ldr	r3, [pc, #20]	; (402940 <sysclk_get_main_hz+0x1c>)
  40292c:	447b      	add	r3, pc
  40292e:	4798      	blx	r3
  402930:	4602      	mov	r2, r0
  402932:	4613      	mov	r3, r2
  402934:	009b      	lsls	r3, r3, #2
  402936:	4413      	add	r3, r2
  402938:	009b      	lsls	r3, r3, #2
}
  40293a:	4618      	mov	r0, r3
  40293c:	bd80      	pop	{r7, pc}
  40293e:	bf00      	nop
  402940:	ffffff7d 	.word	0xffffff7d

00402944 <sysclk_get_cpu_hz>:
{
  402944:	b580      	push	{r7, lr}
  402946:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402948:	4b03      	ldr	r3, [pc, #12]	; (402958 <sysclk_get_cpu_hz+0x14>)
  40294a:	447b      	add	r3, pc
  40294c:	4798      	blx	r3
  40294e:	4603      	mov	r3, r0
  402950:	085b      	lsrs	r3, r3, #1
}
  402952:	4618      	mov	r0, r3
  402954:	bd80      	pop	{r7, pc}
  402956:	bf00      	nop
  402958:	ffffffd7 	.word	0xffffffd7

0040295c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  40295c:	b580      	push	{r7, lr}
  40295e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402960:	4b03      	ldr	r3, [pc, #12]	; (402970 <sysclk_get_peripheral_hz+0x14>)
  402962:	447b      	add	r3, pc
  402964:	4798      	blx	r3
  402966:	4603      	mov	r3, r0
  402968:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40296a:	4618      	mov	r0, r3
  40296c:	bd80      	pop	{r7, pc}
  40296e:	bf00      	nop
  402970:	ffffffbf 	.word	0xffffffbf

00402974 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402974:	b580      	push	{r7, lr}
  402976:	b082      	sub	sp, #8
  402978:	af00      	add	r7, sp, #0
  40297a:	6078      	str	r0, [r7, #4]
  40297c:	4a04      	ldr	r2, [pc, #16]	; (402990 <sysclk_enable_peripheral_clock+0x1c>)
  40297e:	447a      	add	r2, pc
	pmc_enable_periph_clk(ul_id);
  402980:	6878      	ldr	r0, [r7, #4]
  402982:	4b04      	ldr	r3, [pc, #16]	; (402994 <sysclk_enable_peripheral_clock+0x20>)
  402984:	58d3      	ldr	r3, [r2, r3]
  402986:	4798      	blx	r3
}
  402988:	bf00      	nop
  40298a:	3708      	adds	r7, #8
  40298c:	46bd      	mov	sp, r7
  40298e:	bd80      	pop	{r7, pc}
  402990:	0000741a 	.word	0x0000741a
  402994:	00000184 	.word	0x00000184

00402998 <USART0_Handler>:
volatile bool none_flag = false;
volatile bool closed_flag = false;


void WIFI_USART_HANDLER(void)
{
  402998:	b590      	push	{r4, r7, lr}
  40299a:	b083      	sub	sp, #12
  40299c:	af00      	add	r7, sp, #0
  40299e:	4c12      	ldr	r4, [pc, #72]	; (4029e8 <USART0_Handler+0x50>)
  4029a0:	447c      	add	r4, pc
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(BOARD_USART);
  4029a2:	4810      	ldr	r0, [pc, #64]	; (4029e4 <USART0_Handler+0x4c>)
  4029a4:	4b11      	ldr	r3, [pc, #68]	; (4029ec <USART0_Handler+0x54>)
  4029a6:	58e3      	ldr	r3, [r4, r3]
  4029a8:	4798      	blx	r3
  4029aa:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  4029ac:	687b      	ldr	r3, [r7, #4]
  4029ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d012      	beq.n	4029dc <USART0_Handler+0x44>
		usart_read(BOARD_USART, &received_byte_wifi);
  4029b6:	4b0e      	ldr	r3, [pc, #56]	; (4029f0 <USART0_Handler+0x58>)
  4029b8:	58e3      	ldr	r3, [r4, r3]
  4029ba:	4619      	mov	r1, r3
  4029bc:	4809      	ldr	r0, [pc, #36]	; (4029e4 <USART0_Handler+0x4c>)
  4029be:	4b0d      	ldr	r3, [pc, #52]	; (4029f4 <USART0_Handler+0x5c>)
  4029c0:	58e3      	ldr	r3, [r4, r3]
  4029c2:	4798      	blx	r3
		new_rx_wifi = true;
  4029c4:	4b0c      	ldr	r3, [pc, #48]	; (4029f8 <USART0_Handler+0x60>)
  4029c6:	58e3      	ldr	r3, [r4, r3]
  4029c8:	2201      	movs	r2, #1
  4029ca:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4029cc:	4b08      	ldr	r3, [pc, #32]	; (4029f0 <USART0_Handler+0x58>)
  4029ce:	58e3      	ldr	r3, [r4, r3]
  4029d0:	681b      	ldr	r3, [r3, #0]
  4029d2:	b2db      	uxtb	r3, r3
  4029d4:	4618      	mov	r0, r3
  4029d6:	4b09      	ldr	r3, [pc, #36]	; (4029fc <USART0_Handler+0x64>)
  4029d8:	58e3      	ldr	r3, [r4, r3]
  4029da:	4798      	blx	r3
	}
}
  4029dc:	bf00      	nop
  4029de:	370c      	adds	r7, #12
  4029e0:	46bd      	mov	sp, r7
  4029e2:	bd90      	pop	{r4, r7, pc}
  4029e4:	40024000 	.word	0x40024000
  4029e8:	000073f8 	.word	0x000073f8
  4029ec:	00000004 	.word	0x00000004
  4029f0:	00000040 	.word	0x00000040
  4029f4:	000001a0 	.word	0x000001a0
  4029f8:	00000074 	.word	0x00000074
  4029fc:	000001d8 	.word	0x000001d8

00402a00 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402a00:	b590      	push	{r4, r7, lr}
  402a02:	b085      	sub	sp, #20
  402a04:	af00      	add	r7, sp, #0
  402a06:	6078      	str	r0, [r7, #4]
  402a08:	6039      	str	r1, [r7, #0]
  402a0a:	4c11      	ldr	r4, [pc, #68]	; (402a50 <wifi_command_response_handler+0x50>)
  402a0c:	447c      	add	r4, pc
	unused(ul_id);
	unused(ul_mask);
	
	command_received_flag = true;
  402a0e:	4b11      	ldr	r3, [pc, #68]	; (402a54 <wifi_command_response_handler+0x54>)
  402a10:	58e3      	ldr	r3, [r4, r3]
  402a12:	2201      	movs	r2, #1
  402a14:	701a      	strb	r2, [r3, #0]

	process_data_wifi();
  402a16:	4b10      	ldr	r3, [pc, #64]	; (402a58 <wifi_command_response_handler+0x58>)
  402a18:	58e3      	ldr	r3, [r4, r3]
  402a1a:	4798      	blx	r3
	for (int jj=0;jj<MAX_INPUT_WIFI;jj++) input_line_wifi[jj] = 0;
  402a1c:	2300      	movs	r3, #0
  402a1e:	60fb      	str	r3, [r7, #12]
  402a20:	e009      	b.n	402a36 <wifi_command_response_handler+0x36>
  402a22:	4b0e      	ldr	r3, [pc, #56]	; (402a5c <wifi_command_response_handler+0x5c>)
  402a24:	58e3      	ldr	r3, [r4, r3]
  402a26:	461a      	mov	r2, r3
  402a28:	68fb      	ldr	r3, [r7, #12]
  402a2a:	4413      	add	r3, r2
  402a2c:	2200      	movs	r2, #0
  402a2e:	701a      	strb	r2, [r3, #0]
  402a30:	68fb      	ldr	r3, [r7, #12]
  402a32:	3301      	adds	r3, #1
  402a34:	60fb      	str	r3, [r7, #12]
  402a36:	68fb      	ldr	r3, [r7, #12]
  402a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402a3c:	dbf1      	blt.n	402a22 <wifi_command_response_handler+0x22>
	input_pos_wifi = 0;
  402a3e:	4b08      	ldr	r3, [pc, #32]	; (402a60 <wifi_command_response_handler+0x60>)
  402a40:	58e3      	ldr	r3, [r4, r3]
  402a42:	461a      	mov	r2, r3
  402a44:	2300      	movs	r3, #0
  402a46:	6013      	str	r3, [r2, #0]
}
  402a48:	bf00      	nop
  402a4a:	3714      	adds	r7, #20
  402a4c:	46bd      	mov	sp, r7
  402a4e:	bd90      	pop	{r4, r7, pc}
  402a50:	0000738c 	.word	0x0000738c
  402a54:	00000058 	.word	0x00000058
  402a58:	000000b0 	.word	0x000000b0
  402a5c:	00000030 	.word	0x00000030
  402a60:	0000018c 	.word	0x0000018c

00402a64 <wifi_web_setup_handler>:

void wifi_web_setup_handler(uint32_t ul_id, uint32_t ul_mask)
{
  402a64:	b480      	push	{r7}
  402a66:	b083      	sub	sp, #12
  402a68:	af00      	add	r7, sp, #0
  402a6a:	6078      	str	r0, [r7, #4]
  402a6c:	6039      	str	r1, [r7, #0]
  402a6e:	4a05      	ldr	r2, [pc, #20]	; (402a84 <wifi_web_setup_handler+0x20>)
  402a70:	447a      	add	r2, pc
	unused(ul_id);
	unused(ul_mask);

	web_setup_flag = true;
  402a72:	4b05      	ldr	r3, [pc, #20]	; (402a88 <wifi_web_setup_handler+0x24>)
  402a74:	58d3      	ldr	r3, [r2, r3]
  402a76:	2201      	movs	r2, #1
  402a78:	701a      	strb	r2, [r3, #0]
}
  402a7a:	bf00      	nop
  402a7c:	370c      	adds	r7, #12
  402a7e:	46bd      	mov	sp, r7
  402a80:	bc80      	pop	{r7}
  402a82:	4770      	bx	lr
  402a84:	00007328 	.word	0x00007328
  402a88:	00000020 	.word	0x00000020

00402a8c <configure_usart_wifi>:

void configure_usart_wifi(void)
{
  402a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402a8e:	b087      	sub	sp, #28
  402a90:	af00      	add	r7, sp, #0
  402a92:	4c27      	ldr	r4, [pc, #156]	; (402b30 <configure_usart_wifi+0xa4>)
  402a94:	447c      	add	r4, pc
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  402a96:	4924      	ldr	r1, [pc, #144]	; (402b28 <configure_usart_wifi+0x9c>)
  402a98:	2005      	movs	r0, #5
  402a9a:	4b26      	ldr	r3, [pc, #152]	; (402b34 <configure_usart_wifi+0xa8>)
  402a9c:	58e3      	ldr	r3, [r4, r3]
  402a9e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  402aa0:	4921      	ldr	r1, [pc, #132]	; (402b28 <configure_usart_wifi+0x9c>)
  402aa2:	2006      	movs	r0, #6
  402aa4:	4b23      	ldr	r3, [pc, #140]	; (402b34 <configure_usart_wifi+0xa8>)
  402aa6:	58e3      	ldr	r3, [r4, r3]
  402aa8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_CTS_IDX, PIN_USART0_CTS_FLAGS);
  402aaa:	491f      	ldr	r1, [pc, #124]	; (402b28 <configure_usart_wifi+0x9c>)
  402aac:	2008      	movs	r0, #8
  402aae:	4b21      	ldr	r3, [pc, #132]	; (402b34 <configure_usart_wifi+0xa8>)
  402ab0:	58e3      	ldr	r3, [r4, r3]
  402ab2:	4798      	blx	r3
// 	gpio_configure_pin(PIN_USART0_RTS_IDX, PIN_USART0_RTS_FLAGS);
	
	static uint32_t ul_sysclk;
	const sam_usart_opt_t usart_console_settings = {
  402ab4:	4b20      	ldr	r3, [pc, #128]	; (402b38 <configure_usart_wifi+0xac>)
  402ab6:	447b      	add	r3, pc
  402ab8:	463d      	mov	r5, r7
  402aba:	461e      	mov	r6, r3
  402abc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  402abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402ac0:	e896 0003 	ldmia.w	r6, {r0, r1}
  402ac4:	e885 0003 	stmia.w	r5, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Get peripheral clock. */
	ul_sysclk = sysclk_get_peripheral_hz();
  402ac8:	4b1c      	ldr	r3, [pc, #112]	; (402b3c <configure_usart_wifi+0xb0>)
  402aca:	447b      	add	r3, pc
  402acc:	4798      	blx	r3
  402ace:	4602      	mov	r2, r0
  402ad0:	4b1b      	ldr	r3, [pc, #108]	; (402b40 <configure_usart_wifi+0xb4>)
  402ad2:	447b      	add	r3, pc
  402ad4:	601a      	str	r2, [r3, #0]

	/* Enable peripheral clock. */
	sysclk_enable_peripheral_clock(BOARD_USART_ID);
  402ad6:	200e      	movs	r0, #14
  402ad8:	4b1a      	ldr	r3, [pc, #104]	; (402b44 <configure_usart_wifi+0xb8>)
  402ada:	447b      	add	r3, pc
  402adc:	4798      	blx	r3

	/* Configure USART. */
	usart_init_hw_handshaking(BOARD_USART, &usart_console_settings, ul_sysclk);
  402ade:	4b1a      	ldr	r3, [pc, #104]	; (402b48 <configure_usart_wifi+0xbc>)
  402ae0:	447b      	add	r3, pc
  402ae2:	681a      	ldr	r2, [r3, #0]
  402ae4:	463b      	mov	r3, r7
  402ae6:	4619      	mov	r1, r3
  402ae8:	4810      	ldr	r0, [pc, #64]	; (402b2c <configure_usart_wifi+0xa0>)
  402aea:	4b18      	ldr	r3, [pc, #96]	; (402b4c <configure_usart_wifi+0xc0>)
  402aec:	58e3      	ldr	r3, [r4, r3]
  402aee:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
  402af0:	f04f 31ff 	mov.w	r1, #4294967295
  402af4:	480d      	ldr	r0, [pc, #52]	; (402b2c <configure_usart_wifi+0xa0>)
  402af6:	4b16      	ldr	r3, [pc, #88]	; (402b50 <configure_usart_wifi+0xc4>)
  402af8:	58e3      	ldr	r3, [r4, r3]
  402afa:	4798      	blx	r3
	
	/* Enable TX & RX function. */
	usart_enable_tx(BOARD_USART);
  402afc:	480b      	ldr	r0, [pc, #44]	; (402b2c <configure_usart_wifi+0xa0>)
  402afe:	4b15      	ldr	r3, [pc, #84]	; (402b54 <configure_usart_wifi+0xc8>)
  402b00:	58e3      	ldr	r3, [r4, r3]
  402b02:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
  402b04:	4809      	ldr	r0, [pc, #36]	; (402b2c <configure_usart_wifi+0xa0>)
  402b06:	4b14      	ldr	r3, [pc, #80]	; (402b58 <configure_usart_wifi+0xcc>)
  402b08:	58e3      	ldr	r3, [r4, r3]
  402b0a:	4798      	blx	r3
	
	usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
  402b0c:	2101      	movs	r1, #1
  402b0e:	4807      	ldr	r0, [pc, #28]	; (402b2c <configure_usart_wifi+0xa0>)
  402b10:	4b12      	ldr	r3, [pc, #72]	; (402b5c <configure_usart_wifi+0xd0>)
  402b12:	58e3      	ldr	r3, [r4, r3]
  402b14:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(BOARD_USART_IRQn);
  402b16:	200e      	movs	r0, #14
  402b18:	4b11      	ldr	r3, [pc, #68]	; (402b60 <configure_usart_wifi+0xd4>)
  402b1a:	447b      	add	r3, pc
  402b1c:	4798      	blx	r3
}
  402b1e:	bf00      	nop
  402b20:	371c      	adds	r7, #28
  402b22:	46bd      	mov	sp, r7
  402b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b26:	bf00      	nop
  402b28:	08000001 	.word	0x08000001
  402b2c:	40024000 	.word	0x40024000
  402b30:	00007304 	.word	0x00007304
  402b34:	00000068 	.word	0x00000068
  402b38:	00006d9e 	.word	0x00006d9e
  402b3c:	fffffe8f 	.word	0xfffffe8f
  402b40:	1fbfdfae 	.word	0x1fbfdfae
  402b44:	fffffe97 	.word	0xfffffe97
  402b48:	1fbfdfa0 	.word	0x1fbfdfa0
  402b4c:	0000005c 	.word	0x0000005c
  402b50:	00000024 	.word	0x00000024
  402b54:	0000014c 	.word	0x0000014c
  402b58:	0000011c 	.word	0x0000011c
  402b5c:	0000006c 	.word	0x0000006c
  402b60:	fffffd5f 	.word	0xfffffd5f

00402b64 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  402b64:	b5b0      	push	{r4, r5, r7, lr}
  402b66:	b082      	sub	sp, #8
  402b68:	af02      	add	r7, sp, #8
  402b6a:	4c10      	ldr	r4, [pc, #64]	; (402bac <configure_wifi_comm_pin+0x48>)
  402b6c:	447c      	add	r4, pc
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  402b6e:	200c      	movs	r0, #12
  402b70:	4b0f      	ldr	r3, [pc, #60]	; (402bb0 <configure_wifi_comm_pin+0x4c>)
  402b72:	58e3      	ldr	r3, [r4, r3]
  402b74:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_MSK,
  402b76:	4b0f      	ldr	r3, [pc, #60]	; (402bb4 <configure_wifi_comm_pin+0x50>)
  402b78:	58e3      	ldr	r3, [r4, r3]
  402b7a:	9300      	str	r3, [sp, #0]
  402b7c:	2379      	movs	r3, #121	; 0x79
  402b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402b82:	210c      	movs	r1, #12
  402b84:	4808      	ldr	r0, [pc, #32]	; (402ba8 <configure_wifi_comm_pin+0x44>)
  402b86:	4d0c      	ldr	r5, [pc, #48]	; (402bb8 <configure_wifi_comm_pin+0x54>)
  402b88:	5965      	ldr	r5, [r4, r5]
  402b8a:	47a8      	blx	r5
			WIFI_COMM_ATTR, wifi_command_response_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  402b8c:	200c      	movs	r0, #12
  402b8e:	4b0b      	ldr	r3, [pc, #44]	; (402bbc <configure_wifi_comm_pin+0x58>)
  402b90:	447b      	add	r3, pc
  402b92:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_MSK);
  402b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402b98:	4803      	ldr	r0, [pc, #12]	; (402ba8 <configure_wifi_comm_pin+0x44>)
  402b9a:	4b09      	ldr	r3, [pc, #36]	; (402bc0 <configure_wifi_comm_pin+0x5c>)
  402b9c:	58e3      	ldr	r3, [r4, r3]
  402b9e:	4798      	blx	r3
}
  402ba0:	bf00      	nop
  402ba2:	46bd      	mov	sp, r7
  402ba4:	bdb0      	pop	{r4, r5, r7, pc}
  402ba6:	bf00      	nop
  402ba8:	400e1000 	.word	0x400e1000
  402bac:	0000722c 	.word	0x0000722c
  402bb0:	00000184 	.word	0x00000184
  402bb4:	00000168 	.word	0x00000168
  402bb8:	00000050 	.word	0x00000050
  402bbc:	fffffce9 	.word	0xfffffce9
  402bc0:	00000238 	.word	0x00000238

00402bc4 <configure_wifi_web_setup_pin>:

void configure_wifi_web_setup_pin(void)
{
  402bc4:	b5b0      	push	{r4, r5, r7, lr}
  402bc6:	b082      	sub	sp, #8
  402bc8:	af02      	add	r7, sp, #8
  402bca:	4c12      	ldr	r4, [pc, #72]	; (402c14 <configure_wifi_web_setup_pin+0x50>)
  402bcc:	447c      	add	r4, pc
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WEB_SETUP_ID);
  402bce:	200b      	movs	r0, #11
  402bd0:	4b11      	ldr	r3, [pc, #68]	; (402c18 <configure_wifi_web_setup_pin+0x54>)
  402bd2:	58e3      	ldr	r3, [r4, r3]
  402bd4:	4798      	blx	r3

	/* Adjust PIO debounce filter using a 10 Hz filter. */
	pio_set_debounce_filter(WEB_SETUP_PIO, WEB_SETUP_PIN_MSK, 10);
  402bd6:	220a      	movs	r2, #10
  402bd8:	2104      	movs	r1, #4
  402bda:	480d      	ldr	r0, [pc, #52]	; (402c10 <configure_wifi_web_setup_pin+0x4c>)
  402bdc:	4b0f      	ldr	r3, [pc, #60]	; (402c1c <configure_wifi_web_setup_pin+0x58>)
  402bde:	58e3      	ldr	r3, [r4, r3]
  402be0:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WEB_SETUP_PIO, WEB_SETUP_ID, WEB_SETUP_PIN_MSK,
  402be2:	4b0f      	ldr	r3, [pc, #60]	; (402c20 <configure_wifi_web_setup_pin+0x5c>)
  402be4:	58e3      	ldr	r3, [r4, r3]
  402be6:	9300      	str	r3, [sp, #0]
  402be8:	2379      	movs	r3, #121	; 0x79
  402bea:	2204      	movs	r2, #4
  402bec:	210b      	movs	r1, #11
  402bee:	4808      	ldr	r0, [pc, #32]	; (402c10 <configure_wifi_web_setup_pin+0x4c>)
  402bf0:	4d0c      	ldr	r5, [pc, #48]	; (402c24 <configure_wifi_web_setup_pin+0x60>)
  402bf2:	5965      	ldr	r5, [r4, r5]
  402bf4:	47a8      	blx	r5
			WEB_SETUP_ATTR, wifi_web_setup_handler);

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WEB_SETUP_ID);
  402bf6:	200b      	movs	r0, #11
  402bf8:	4b0b      	ldr	r3, [pc, #44]	; (402c28 <configure_wifi_web_setup_pin+0x64>)
  402bfa:	447b      	add	r3, pc
  402bfc:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WEB_SETUP_PIO, WEB_SETUP_PIN_MSK);
  402bfe:	2104      	movs	r1, #4
  402c00:	4803      	ldr	r0, [pc, #12]	; (402c10 <configure_wifi_web_setup_pin+0x4c>)
  402c02:	4b0a      	ldr	r3, [pc, #40]	; (402c2c <configure_wifi_web_setup_pin+0x68>)
  402c04:	58e3      	ldr	r3, [r4, r3]
  402c06:	4798      	blx	r3
}
  402c08:	bf00      	nop
  402c0a:	46bd      	mov	sp, r7
  402c0c:	bdb0      	pop	{r4, r5, r7, pc}
  402c0e:	bf00      	nop
  402c10:	400e0e00 	.word	0x400e0e00
  402c14:	000071cc 	.word	0x000071cc
  402c18:	00000184 	.word	0x00000184
  402c1c:	00000104 	.word	0x00000104
  402c20:	00000118 	.word	0x00000118
  402c24:	00000050 	.word	0x00000050
  402c28:	fffffc7f 	.word	0xfffffc7f
  402c2c:	00000238 	.word	0x00000238

00402c30 <process_incoming_byte_wifi>:


void process_incoming_byte_wifi(uint8_t in_byte)
{ 
  402c30:	b480      	push	{r7}
  402c32:	b083      	sub	sp, #12
  402c34:	af00      	add	r7, sp, #0
  402c36:	4603      	mov	r3, r0
  402c38:	71fb      	strb	r3, [r7, #7]
  402c3a:	4b09      	ldr	r3, [pc, #36]	; (402c60 <process_incoming_byte_wifi+0x30>)
  402c3c:	447b      	add	r3, pc
	input_line_wifi[input_pos_wifi++] = in_byte;
  402c3e:	4a09      	ldr	r2, [pc, #36]	; (402c64 <process_incoming_byte_wifi+0x34>)
  402c40:	589a      	ldr	r2, [r3, r2]
  402c42:	6812      	ldr	r2, [r2, #0]
  402c44:	1c51      	adds	r1, r2, #1
  402c46:	4807      	ldr	r0, [pc, #28]	; (402c64 <process_incoming_byte_wifi+0x34>)
  402c48:	5818      	ldr	r0, [r3, r0]
  402c4a:	6001      	str	r1, [r0, #0]
  402c4c:	4906      	ldr	r1, [pc, #24]	; (402c68 <process_incoming_byte_wifi+0x38>)
  402c4e:	585b      	ldr	r3, [r3, r1]
  402c50:	4619      	mov	r1, r3
  402c52:	79fb      	ldrb	r3, [r7, #7]
  402c54:	548b      	strb	r3, [r1, r2]
}
  402c56:	bf00      	nop
  402c58:	370c      	adds	r7, #12
  402c5a:	46bd      	mov	sp, r7
  402c5c:	bc80      	pop	{r7}
  402c5e:	4770      	bx	lr
  402c60:	0000715c 	.word	0x0000715c
  402c64:	0000018c 	.word	0x0000018c
  402c68:	00000030 	.word	0x00000030

00402c6c <process_data_wifi>:

void process_data_wifi (void)
{
  402c6c:	b598      	push	{r3, r4, r7, lr}
  402c6e:	af00      	add	r7, sp, #0
  402c70:	4c1a      	ldr	r4, [pc, #104]	; (402cdc <process_data_wifi+0x70>)
  402c72:	447c      	add	r4, pc
	
	if (strstr(input_line_wifi, "Start transfer"))
  402c74:	4b1a      	ldr	r3, [pc, #104]	; (402ce0 <process_data_wifi+0x74>)
  402c76:	447b      	add	r3, pc
  402c78:	4619      	mov	r1, r3
  402c7a:	4b1a      	ldr	r3, [pc, #104]	; (402ce4 <process_data_wifi+0x78>)
  402c7c:	58e3      	ldr	r3, [r4, r3]
  402c7e:	4618      	mov	r0, r3
  402c80:	4b19      	ldr	r3, [pc, #100]	; (402ce8 <process_data_wifi+0x7c>)
  402c82:	58e3      	ldr	r3, [r4, r3]
  402c84:	4798      	blx	r3
  402c86:	4603      	mov	r3, r0
  402c88:	2b00      	cmp	r3, #0
  402c8a:	d004      	beq.n	402c96 <process_data_wifi+0x2a>
	{
		start_transfer_flag = true;
  402c8c:	4b17      	ldr	r3, [pc, #92]	; (402cec <process_data_wifi+0x80>)
  402c8e:	58e3      	ldr	r3, [r4, r3]
  402c90:	2201      	movs	r2, #1
  402c92:	701a      	strb	r2, [r3, #0]
	 
	 else if (strstr(input_line_wifi, "[Closed: 0]"))
	 {
		 closed_flag = true;
	 }
}
  402c94:	e020      	b.n	402cd8 <process_data_wifi+0x6c>
	 else if (strstr(input_line_wifi, "None"))
  402c96:	4b16      	ldr	r3, [pc, #88]	; (402cf0 <process_data_wifi+0x84>)
  402c98:	447b      	add	r3, pc
  402c9a:	4619      	mov	r1, r3
  402c9c:	4b11      	ldr	r3, [pc, #68]	; (402ce4 <process_data_wifi+0x78>)
  402c9e:	58e3      	ldr	r3, [r4, r3]
  402ca0:	4618      	mov	r0, r3
  402ca2:	4b11      	ldr	r3, [pc, #68]	; (402ce8 <process_data_wifi+0x7c>)
  402ca4:	58e3      	ldr	r3, [r4, r3]
  402ca6:	4798      	blx	r3
  402ca8:	4603      	mov	r3, r0
  402caa:	2b00      	cmp	r3, #0
  402cac:	d004      	beq.n	402cb8 <process_data_wifi+0x4c>
		 none_flag = true;
  402cae:	4b11      	ldr	r3, [pc, #68]	; (402cf4 <process_data_wifi+0x88>)
  402cb0:	58e3      	ldr	r3, [r4, r3]
  402cb2:	2201      	movs	r2, #1
  402cb4:	701a      	strb	r2, [r3, #0]
}
  402cb6:	e00f      	b.n	402cd8 <process_data_wifi+0x6c>
	 else if (strstr(input_line_wifi, "[Closed: 0]"))
  402cb8:	4b0f      	ldr	r3, [pc, #60]	; (402cf8 <process_data_wifi+0x8c>)
  402cba:	447b      	add	r3, pc
  402cbc:	4619      	mov	r1, r3
  402cbe:	4b09      	ldr	r3, [pc, #36]	; (402ce4 <process_data_wifi+0x78>)
  402cc0:	58e3      	ldr	r3, [r4, r3]
  402cc2:	4618      	mov	r0, r3
  402cc4:	4b08      	ldr	r3, [pc, #32]	; (402ce8 <process_data_wifi+0x7c>)
  402cc6:	58e3      	ldr	r3, [r4, r3]
  402cc8:	4798      	blx	r3
  402cca:	4603      	mov	r3, r0
  402ccc:	2b00      	cmp	r3, #0
  402cce:	d003      	beq.n	402cd8 <process_data_wifi+0x6c>
		 closed_flag = true;
  402cd0:	4b0a      	ldr	r3, [pc, #40]	; (402cfc <process_data_wifi+0x90>)
  402cd2:	58e3      	ldr	r3, [r4, r3]
  402cd4:	2201      	movs	r2, #1
  402cd6:	701a      	strb	r2, [r3, #0]
}
  402cd8:	bf00      	nop
  402cda:	bd98      	pop	{r3, r4, r7, pc}
  402cdc:	00007126 	.word	0x00007126
  402ce0:	00006bf6 	.word	0x00006bf6
  402ce4:	00000030 	.word	0x00000030
  402ce8:	00000110 	.word	0x00000110
  402cec:	0000015c 	.word	0x0000015c
  402cf0:	00006be4 	.word	0x00006be4
  402cf4:	000001c8 	.word	0x000001c8
  402cf8:	00006bca 	.word	0x00006bca
  402cfc:	000000e4 	.word	0x000000e4

00402d00 <write_wifi_command>:

void write_wifi_command(char* comm, uint8_t cnt)
{
  402d00:	b590      	push	{r4, r7, lr}
  402d02:	b083      	sub	sp, #12
  402d04:	af00      	add	r7, sp, #0
  402d06:	6078      	str	r0, [r7, #4]
  402d08:	460b      	mov	r3, r1
  402d0a:	70fb      	strb	r3, [r7, #3]
  402d0c:	4c11      	ldr	r4, [pc, #68]	; (402d54 <write_wifi_command+0x54>)
  402d0e:	447c      	add	r4, pc
	counts = 0;
  402d10:	4b11      	ldr	r3, [pc, #68]	; (402d58 <write_wifi_command+0x58>)
  402d12:	58e3      	ldr	r3, [r4, r3]
  402d14:	2200      	movs	r2, #0
  402d16:	701a      	strb	r2, [r3, #0]
	command_received_flag = false;
  402d18:	4b10      	ldr	r3, [pc, #64]	; (402d5c <write_wifi_command+0x5c>)
  402d1a:	58e3      	ldr	r3, [r4, r3]
  402d1c:	2200      	movs	r2, #0
  402d1e:	701a      	strb	r2, [r3, #0]

	usart_write_line(BOARD_USART, comm);
  402d20:	6879      	ldr	r1, [r7, #4]
  402d22:	480b      	ldr	r0, [pc, #44]	; (402d50 <write_wifi_command+0x50>)
  402d24:	4b0e      	ldr	r3, [pc, #56]	; (402d60 <write_wifi_command+0x60>)
  402d26:	58e3      	ldr	r3, [r4, r3]
  402d28:	4798      	blx	r3
		
	while (counts < cnt)
  402d2a:	e005      	b.n	402d38 <write_wifi_command+0x38>
	{
		if (command_received_flag == true)
  402d2c:	4b0b      	ldr	r3, [pc, #44]	; (402d5c <write_wifi_command+0x5c>)
  402d2e:	58e3      	ldr	r3, [r4, r3]
  402d30:	781b      	ldrb	r3, [r3, #0]
  402d32:	b2db      	uxtb	r3, r3
  402d34:	2b00      	cmp	r3, #0
  402d36:	d107      	bne.n	402d48 <write_wifi_command+0x48>
	while (counts < cnt)
  402d38:	4b07      	ldr	r3, [pc, #28]	; (402d58 <write_wifi_command+0x58>)
  402d3a:	58e3      	ldr	r3, [r4, r3]
  402d3c:	781b      	ldrb	r3, [r3, #0]
  402d3e:	b2db      	uxtb	r3, r3
  402d40:	78fa      	ldrb	r2, [r7, #3]
  402d42:	429a      	cmp	r2, r3
  402d44:	d8f2      	bhi.n	402d2c <write_wifi_command+0x2c>
  402d46:	e000      	b.n	402d4a <write_wifi_command+0x4a>
		{
			return;
  402d48:	bf00      	nop
		}
	}
}
  402d4a:	370c      	adds	r7, #12
  402d4c:	46bd      	mov	sp, r7
  402d4e:	bd90      	pop	{r4, r7, pc}
  402d50:	40024000 	.word	0x40024000
  402d54:	0000708a 	.word	0x0000708a
  402d58:	00000230 	.word	0x00000230
  402d5c:	00000058 	.word	0x00000058
  402d60:	000001fc 	.word	0x000001fc

00402d64 <write_image_to_file>:

void write_image_to_file(void)
{
  402d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d68:	b0dd      	sub	sp, #372	; 0x174
  402d6a:	af00      	add	r7, sp, #0
  402d6c:	4c8e      	ldr	r4, [pc, #568]	; (402fa8 <write_image_to_file+0x244>)
  402d6e:	447c      	add	r4, pc
 	if (image_length_JPEG == 0)
  402d70:	4b8e      	ldr	r3, [pc, #568]	; (402fac <write_image_to_file+0x248>)
  402d72:	58e3      	ldr	r3, [r4, r3]
  402d74:	681b      	ldr	r3, [r3, #0]
  402d76:	2b00      	cmp	r3, #0
  402d78:	f000 810e 	beq.w	402f98 <write_image_to_file+0x234>
 		return;
 	}

	else
	{	
		itoa(image_length_JPEG, image_length_JPEG_string, 10);
  402d7c:	4b8b      	ldr	r3, [pc, #556]	; (402fac <write_image_to_file+0x248>)
  402d7e:	58e3      	ldr	r3, [r4, r3]
  402d80:	6818      	ldr	r0, [r3, #0]
  402d82:	220a      	movs	r2, #10
  402d84:	4b8a      	ldr	r3, [pc, #552]	; (402fb0 <write_image_to_file+0x24c>)
  402d86:	58e3      	ldr	r3, [r4, r3]
  402d88:	4619      	mov	r1, r3
  402d8a:	4b8a      	ldr	r3, [pc, #552]	; (402fb4 <write_image_to_file+0x250>)
  402d8c:	58e3      	ldr	r3, [r4, r3]
  402d8e:	4798      	blx	r3
		image_string_length = strlen(image_length_JPEG_string);
  402d90:	4b87      	ldr	r3, [pc, #540]	; (402fb0 <write_image_to_file+0x24c>)
  402d92:	58e3      	ldr	r3, [r4, r3]
  402d94:	4618      	mov	r0, r3
  402d96:	4b88      	ldr	r3, [pc, #544]	; (402fb8 <write_image_to_file+0x254>)
  402d98:	58e3      	ldr	r3, [r4, r3]
  402d9a:	4798      	blx	r3
  402d9c:	4603      	mov	r3, r0
  402d9e:	461a      	mov	r2, r3
  402da0:	4b86      	ldr	r3, [pc, #536]	; (402fbc <write_image_to_file+0x258>)
  402da2:	58e3      	ldr	r3, [r4, r3]
  402da4:	601a      	str	r2, [r3, #0]
		
		uint8_t current_byte = "";
  402da6:	4b86      	ldr	r3, [pc, #536]	; (402fc0 <write_image_to_file+0x25c>)
  402da8:	447b      	add	r3, pc
  402daa:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		
		char data_length[128] = "";
  402dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
  402db2:	2200      	movs	r2, #0
  402db4:	601a      	str	r2, [r3, #0]
  402db6:	3304      	adds	r3, #4
  402db8:	227c      	movs	r2, #124	; 0x7c
  402dba:	2100      	movs	r1, #0
  402dbc:	4618      	mov	r0, r3
  402dbe:	4b81      	ldr	r3, [pc, #516]	; (402fc4 <write_image_to_file+0x260>)
  402dc0:	58e3      	ldr	r3, [r4, r3]
  402dc2:	4798      	blx	r3
		char write_length[128] = "";
  402dc4:	2300      	movs	r3, #0
  402dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  402dca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
  402dce:	227c      	movs	r2, #124	; 0x7c
  402dd0:	2100      	movs	r1, #0
  402dd2:	4618      	mov	r0, r3
  402dd4:	4b7b      	ldr	r3, [pc, #492]	; (402fc4 <write_image_to_file+0x260>)
  402dd6:	58e3      	ldr	r3, [r4, r3]
  402dd8:	4798      	blx	r3
		
		if (closed_flag == true)
  402dda:	4b7b      	ldr	r3, [pc, #492]	; (402fc8 <write_image_to_file+0x264>)
  402ddc:	58e3      	ldr	r3, [r4, r3]
  402dde:	781b      	ldrb	r3, [r3, #0]
  402de0:	b2db      	uxtb	r3, r3
  402de2:	2b00      	cmp	r3, #0
  402de4:	d006      	beq.n	402df4 <write_image_to_file+0x90>
		{
			write_wifi_command("tcpc 18.191.102.247 8000 \r\n", 10);
  402de6:	210a      	movs	r1, #10
  402de8:	4b78      	ldr	r3, [pc, #480]	; (402fcc <write_image_to_file+0x268>)
  402dea:	447b      	add	r3, pc
  402dec:	4618      	mov	r0, r3
  402dee:	4b78      	ldr	r3, [pc, #480]	; (402fd0 <write_image_to_file+0x26c>)
  402df0:	58e3      	ldr	r3, [r4, r3]
  402df2:	4798      	blx	r3
		}
		
		char post_string[100];
		sprintf(post_string, "POST /image HTTP/1.1\r\nHost: 10.0.0.0\r\nContent-Type: imagebin\r\nContent-Length: \r\n\r\n");
  402df4:	1d3b      	adds	r3, r7, #4
  402df6:	4a77      	ldr	r2, [pc, #476]	; (402fd4 <write_image_to_file+0x270>)
  402df8:	447a      	add	r2, pc
  402dfa:	4618      	mov	r0, r3
  402dfc:	4611      	mov	r1, r2
  402dfe:	2353      	movs	r3, #83	; 0x53
  402e00:	461a      	mov	r2, r3
  402e02:	4b75      	ldr	r3, [pc, #468]	; (402fd8 <write_image_to_file+0x274>)
  402e04:	58e3      	ldr	r3, [r4, r3]
  402e06:	4798      	blx	r3
		uint8_t len_post_string = strlen(post_string);
  402e08:	1d3b      	adds	r3, r7, #4
  402e0a:	4618      	mov	r0, r3
  402e0c:	4b6a      	ldr	r3, [pc, #424]	; (402fb8 <write_image_to_file+0x254>)
  402e0e:	58e3      	ldr	r3, [r4, r3]
  402e10:	4798      	blx	r3
  402e12:	4603      	mov	r3, r0
  402e14:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
		
		sprintf(write_length, "write 0 %d\r\n", len_post_string+image_string_length+image_length_JPEG+1);
  402e18:	f897 216a 	ldrb.w	r2, [r7, #362]	; 0x16a
  402e1c:	4b67      	ldr	r3, [pc, #412]	; (402fbc <write_image_to_file+0x258>)
  402e1e:	58e3      	ldr	r3, [r4, r3]
  402e20:	681b      	ldr	r3, [r3, #0]
  402e22:	441a      	add	r2, r3
  402e24:	4b61      	ldr	r3, [pc, #388]	; (402fac <write_image_to_file+0x248>)
  402e26:	58e3      	ldr	r3, [r4, r3]
  402e28:	681b      	ldr	r3, [r3, #0]
  402e2a:	4413      	add	r3, r2
  402e2c:	1c5a      	adds	r2, r3, #1
  402e2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
  402e32:	496a      	ldr	r1, [pc, #424]	; (402fdc <write_image_to_file+0x278>)
  402e34:	4479      	add	r1, pc
  402e36:	4618      	mov	r0, r3
  402e38:	4b69      	ldr	r3, [pc, #420]	; (402fe0 <write_image_to_file+0x27c>)
  402e3a:	58e3      	ldr	r3, [r4, r3]
  402e3c:	4798      	blx	r3
		usart_write_line(BOARD_USART, write_length);
  402e3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
  402e42:	4619      	mov	r1, r3
  402e44:	4857      	ldr	r0, [pc, #348]	; (402fa4 <write_image_to_file+0x240>)
  402e46:	4b67      	ldr	r3, [pc, #412]	; (402fe4 <write_image_to_file+0x280>)
  402e48:	58e3      	ldr	r3, [r4, r3]
  402e4a:	4798      	blx	r3
		//write_wifi_command(write_length,10);
		delay_ms(10);
  402e4c:	4b66      	ldr	r3, [pc, #408]	; (402fe8 <write_image_to_file+0x284>)
  402e4e:	447b      	add	r3, pc
  402e50:	4798      	blx	r3
  402e52:	4603      	mov	r3, r0
  402e54:	4618      	mov	r0, r3
  402e56:	f04f 0100 	mov.w	r1, #0
  402e5a:	4602      	mov	r2, r0
  402e5c:	460b      	mov	r3, r1
  402e5e:	ea4f 0983 	mov.w	r9, r3, lsl #2
  402e62:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
  402e66:	ea4f 0882 	mov.w	r8, r2, lsl #2
  402e6a:	4642      	mov	r2, r8
  402e6c:	464b      	mov	r3, r9
  402e6e:	1812      	adds	r2, r2, r0
  402e70:	eb43 0301 	adc.w	r3, r3, r1
  402e74:	1892      	adds	r2, r2, r2
  402e76:	eb43 0303 	adc.w	r3, r3, r3
  402e7a:	4610      	mov	r0, r2
  402e7c:	4619      	mov	r1, r3
  402e7e:	f243 62af 	movw	r2, #13999	; 0x36af
  402e82:	f04f 0300 	mov.w	r3, #0
  402e86:	1880      	adds	r0, r0, r2
  402e88:	eb41 0103 	adc.w	r1, r1, r3
  402e8c:	4b57      	ldr	r3, [pc, #348]	; (402fec <write_image_to_file+0x288>)
  402e8e:	58e3      	ldr	r3, [r4, r3]
  402e90:	461d      	mov	r5, r3
  402e92:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402e96:	f04f 0300 	mov.w	r3, #0
  402e9a:	47a8      	blx	r5
  402e9c:	4602      	mov	r2, r0
  402e9e:	460b      	mov	r3, r1
  402ea0:	4613      	mov	r3, r2
  402ea2:	4618      	mov	r0, r3
  402ea4:	4b52      	ldr	r3, [pc, #328]	; (402ff0 <write_image_to_file+0x28c>)
  402ea6:	58e3      	ldr	r3, [r4, r3]
  402ea8:	4798      	blx	r3
		
		sprintf(data_length, "POST /image HTTP/1.1\r\nHost: 10.0.0.0\r\nContent-Type: imagebin\r\nContent-Length: %d\r\n\r\n", image_length_JPEG+1); 
  402eaa:	4b40      	ldr	r3, [pc, #256]	; (402fac <write_image_to_file+0x248>)
  402eac:	58e3      	ldr	r3, [r4, r3]
  402eae:	681b      	ldr	r3, [r3, #0]
  402eb0:	1c5a      	adds	r2, r3, #1
  402eb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
  402eb6:	494f      	ldr	r1, [pc, #316]	; (402ff4 <write_image_to_file+0x290>)
  402eb8:	4479      	add	r1, pc
  402eba:	4618      	mov	r0, r3
  402ebc:	4b48      	ldr	r3, [pc, #288]	; (402fe0 <write_image_to_file+0x27c>)
  402ebe:	58e3      	ldr	r3, [r4, r3]
  402ec0:	4798      	blx	r3
		usart_write_line(BOARD_USART, data_length);
  402ec2:	f107 0368 	add.w	r3, r7, #104	; 0x68
  402ec6:	4619      	mov	r1, r3
  402ec8:	4836      	ldr	r0, [pc, #216]	; (402fa4 <write_image_to_file+0x240>)
  402eca:	4b46      	ldr	r3, [pc, #280]	; (402fe4 <write_image_to_file+0x280>)
  402ecc:	58e3      	ldr	r3, [r4, r3]
  402ece:	4798      	blx	r3
		//write_wifi_command(data_length, 10);
		
		for (int i = 0; i < image_length_JPEG+1; i++)
  402ed0:	2300      	movs	r3, #0
  402ed2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  402ed6:	e016      	b.n	402f06 <write_image_to_file+0x1a2>
		{
			current_byte = image_buffer[start_image + i];
  402ed8:	4b47      	ldr	r3, [pc, #284]	; (402ff8 <write_image_to_file+0x294>)
  402eda:	58e3      	ldr	r3, [r4, r3]
  402edc:	681a      	ldr	r2, [r3, #0]
  402ede:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
  402ee2:	4413      	add	r3, r2
  402ee4:	4a45      	ldr	r2, [pc, #276]	; (402ffc <write_image_to_file+0x298>)
  402ee6:	58a2      	ldr	r2, [r4, r2]
  402ee8:	5cd3      	ldrb	r3, [r2, r3]
  402eea:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
			usart_putchar(BOARD_USART, current_byte);					
  402eee:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
  402ef2:	4619      	mov	r1, r3
  402ef4:	482b      	ldr	r0, [pc, #172]	; (402fa4 <write_image_to_file+0x240>)
  402ef6:	4b42      	ldr	r3, [pc, #264]	; (403000 <write_image_to_file+0x29c>)
  402ef8:	58e3      	ldr	r3, [r4, r3]
  402efa:	4798      	blx	r3
		for (int i = 0; i < image_length_JPEG+1; i++)
  402efc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
  402f00:	3301      	adds	r3, #1
  402f02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  402f06:	4b29      	ldr	r3, [pc, #164]	; (402fac <write_image_to_file+0x248>)
  402f08:	58e3      	ldr	r3, [r4, r3]
  402f0a:	681b      	ldr	r3, [r3, #0]
  402f0c:	1c5a      	adds	r2, r3, #1
  402f0e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
  402f12:	429a      	cmp	r2, r3
  402f14:	dce0      	bgt.n	402ed8 <write_image_to_file+0x174>
		}
            
		usart_write_line(BOARD_USART, "read 0 1000 \r\n");
  402f16:	4b3b      	ldr	r3, [pc, #236]	; (403004 <write_image_to_file+0x2a0>)
  402f18:	447b      	add	r3, pc
  402f1a:	4619      	mov	r1, r3
  402f1c:	4821      	ldr	r0, [pc, #132]	; (402fa4 <write_image_to_file+0x240>)
  402f1e:	4b31      	ldr	r3, [pc, #196]	; (402fe4 <write_image_to_file+0x280>)
  402f20:	58e3      	ldr	r3, [r4, r3]
  402f22:	4798      	blx	r3
		//write_wifi_command("read 0 1000 \r\n", 10);
		
		closed_flag = false;
  402f24:	4b28      	ldr	r3, [pc, #160]	; (402fc8 <write_image_to_file+0x264>)
  402f26:	58e3      	ldr	r3, [r4, r3]
  402f28:	2200      	movs	r2, #0
  402f2a:	701a      	strb	r2, [r3, #0]
		
		delay_ms(50);
  402f2c:	4b36      	ldr	r3, [pc, #216]	; (403008 <write_image_to_file+0x2a4>)
  402f2e:	447b      	add	r3, pc
  402f30:	4798      	blx	r3
  402f32:	4603      	mov	r3, r0
  402f34:	4618      	mov	r0, r3
  402f36:	f04f 0100 	mov.w	r1, #0
  402f3a:	4602      	mov	r2, r0
  402f3c:	460b      	mov	r3, r1
  402f3e:	1892      	adds	r2, r2, r2
  402f40:	eb43 0303 	adc.w	r3, r3, r3
  402f44:	1812      	adds	r2, r2, r0
  402f46:	eb43 0301 	adc.w	r3, r3, r1
  402f4a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
  402f4e:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
  402f52:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
  402f56:	4652      	mov	r2, sl
  402f58:	465b      	mov	r3, fp
  402f5a:	1812      	adds	r2, r2, r0
  402f5c:	eb43 0301 	adc.w	r3, r3, r1
  402f60:	1892      	adds	r2, r2, r2
  402f62:	eb43 0303 	adc.w	r3, r3, r3
  402f66:	4610      	mov	r0, r2
  402f68:	4619      	mov	r1, r3
  402f6a:	f243 62af 	movw	r2, #13999	; 0x36af
  402f6e:	f04f 0300 	mov.w	r3, #0
  402f72:	1880      	adds	r0, r0, r2
  402f74:	eb41 0103 	adc.w	r1, r1, r3
  402f78:	4b1c      	ldr	r3, [pc, #112]	; (402fec <write_image_to_file+0x288>)
  402f7a:	58e3      	ldr	r3, [r4, r3]
  402f7c:	461d      	mov	r5, r3
  402f7e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402f82:	f04f 0300 	mov.w	r3, #0
  402f86:	47a8      	blx	r5
  402f88:	4602      	mov	r2, r0
  402f8a:	460b      	mov	r3, r1
  402f8c:	4613      	mov	r3, r2
  402f8e:	4618      	mov	r0, r3
  402f90:	4b17      	ldr	r3, [pc, #92]	; (402ff0 <write_image_to_file+0x28c>)
  402f92:	58e3      	ldr	r3, [r4, r3]
  402f94:	4798      	blx	r3
  402f96:	e000      	b.n	402f9a <write_image_to_file+0x236>
 		return;
  402f98:	bf00      	nop
	}

}
  402f9a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
  402f9e:	46bd      	mov	sp, r7
  402fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fa4:	40024000 	.word	0x40024000
  402fa8:	0000702a 	.word	0x0000702a
  402fac:	000000f8 	.word	0x000000f8
  402fb0:	000001cc 	.word	0x000001cc
  402fb4:	000000a8 	.word	0x000000a8
  402fb8:	0000021c 	.word	0x0000021c
  402fbc:	00000240 	.word	0x00000240
  402fc0:	00006ae8 	.word	0x00006ae8
  402fc4:	00000180 	.word	0x00000180
  402fc8:	000000e4 	.word	0x000000e4
  402fcc:	00006aaa 	.word	0x00006aaa
  402fd0:	00000174 	.word	0x00000174
  402fd4:	00006ab8 	.word	0x00006ab8
  402fd8:	0000007c 	.word	0x0000007c
  402fdc:	00006ad0 	.word	0x00006ad0
  402fe0:	000001c0 	.word	0x000001c0
  402fe4:	000001fc 	.word	0x000001fc
  402fe8:	fffffaf3 	.word	0xfffffaf3
  402fec:	0000008c 	.word	0x0000008c
  402ff0:	000001b8 	.word	0x000001b8
  402ff4:	00006a5c 	.word	0x00006a5c
  402ff8:	00000220 	.word	0x00000220
  402ffc:	00000248 	.word	0x00000248
  403000:	00000244 	.word	0x00000244
  403004:	00006a54 	.word	0x00006a54
  403008:	fffffa13 	.word	0xfffffa13

0040300c <sysclk_enable_peripheral_clock>:
{
  40300c:	b580      	push	{r7, lr}
  40300e:	b082      	sub	sp, #8
  403010:	af00      	add	r7, sp, #0
  403012:	6078      	str	r0, [r7, #4]
  403014:	4a04      	ldr	r2, [pc, #16]	; (403028 <sysclk_enable_peripheral_clock+0x1c>)
  403016:	447a      	add	r2, pc
	pmc_enable_periph_clk(ul_id);
  403018:	6878      	ldr	r0, [r7, #4]
  40301a:	4b04      	ldr	r3, [pc, #16]	; (40302c <sysclk_enable_peripheral_clock+0x20>)
  40301c:	58d3      	ldr	r3, [r2, r3]
  40301e:	4798      	blx	r3
}
  403020:	bf00      	nop
  403022:	3708      	adds	r7, #8
  403024:	46bd      	mov	sp, r7
  403026:	bd80      	pop	{r7, pc}
  403028:	00006d82 	.word	0x00006d82
  40302c:	00000184 	.word	0x00000184

00403030 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  403030:	b580      	push	{r7, lr}
  403032:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  403034:	200b      	movs	r0, #11
  403036:	4b04      	ldr	r3, [pc, #16]	; (403048 <ioport_init+0x18>)
  403038:	447b      	add	r3, pc
  40303a:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40303c:	200c      	movs	r0, #12
  40303e:	4b03      	ldr	r3, [pc, #12]	; (40304c <ioport_init+0x1c>)
  403040:	447b      	add	r3, pc
  403042:	4798      	blx	r3
	arch_ioport_init();
}
  403044:	bf00      	nop
  403046:	bd80      	pop	{r7, pc}
  403048:	ffffffd1 	.word	0xffffffd1
  40304c:	ffffffc9 	.word	0xffffffc9

00403050 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403050:	b480      	push	{r7}
  403052:	b08d      	sub	sp, #52	; 0x34
  403054:	af00      	add	r7, sp, #0
  403056:	6078      	str	r0, [r7, #4]
  403058:	460b      	mov	r3, r1
  40305a:	70fb      	strb	r3, [r7, #3]
  40305c:	687b      	ldr	r3, [r7, #4]
  40305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  403060:	78fb      	ldrb	r3, [r7, #3]
  403062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  403066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403068:	627b      	str	r3, [r7, #36]	; 0x24
  40306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40306c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40306e:	6a3b      	ldr	r3, [r7, #32]
  403070:	095b      	lsrs	r3, r3, #5
  403072:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403074:	69fb      	ldr	r3, [r7, #28]
  403076:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40307a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40307e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403080:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403086:	2b01      	cmp	r3, #1
  403088:	d109      	bne.n	40309e <ioport_set_pin_dir+0x4e>
  40308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40308c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40308e:	697b      	ldr	r3, [r7, #20]
  403090:	f003 031f 	and.w	r3, r3, #31
  403094:	2201      	movs	r2, #1
  403096:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403098:	69bb      	ldr	r3, [r7, #24]
  40309a:	611a      	str	r2, [r3, #16]
  40309c:	e00c      	b.n	4030b8 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40309e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4030a2:	2b00      	cmp	r3, #0
  4030a4:	d108      	bne.n	4030b8 <ioport_set_pin_dir+0x68>
  4030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4030a8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4030aa:	693b      	ldr	r3, [r7, #16]
  4030ac:	f003 031f 	and.w	r3, r3, #31
  4030b0:	2201      	movs	r2, #1
  4030b2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4030b4:	69bb      	ldr	r3, [r7, #24]
  4030b6:	615a      	str	r2, [r3, #20]
  4030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4030ba:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4030bc:	68fb      	ldr	r3, [r7, #12]
  4030be:	f003 031f 	and.w	r3, r3, #31
  4030c2:	2201      	movs	r2, #1
  4030c4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4030c6:	69bb      	ldr	r3, [r7, #24]
  4030c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4030cc:	bf00      	nop
  4030ce:	3734      	adds	r7, #52	; 0x34
  4030d0:	46bd      	mov	sp, r7
  4030d2:	bc80      	pop	{r7}
  4030d4:	4770      	bx	lr

004030d6 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4030d6:	b480      	push	{r7}
  4030d8:	b08b      	sub	sp, #44	; 0x2c
  4030da:	af00      	add	r7, sp, #0
  4030dc:	6078      	str	r0, [r7, #4]
  4030de:	460b      	mov	r3, r1
  4030e0:	70fb      	strb	r3, [r7, #3]
  4030e2:	687b      	ldr	r3, [r7, #4]
  4030e4:	627b      	str	r3, [r7, #36]	; 0x24
  4030e6:	78fb      	ldrb	r3, [r7, #3]
  4030e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4030ee:	61fb      	str	r3, [r7, #28]
  4030f0:	69fb      	ldr	r3, [r7, #28]
  4030f2:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4030f4:	69bb      	ldr	r3, [r7, #24]
  4030f6:	095b      	lsrs	r3, r3, #5
  4030f8:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4030fa:	697b      	ldr	r3, [r7, #20]
  4030fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403100:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403104:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403106:	613b      	str	r3, [r7, #16]

	if (level) {
  403108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40310c:	2b00      	cmp	r3, #0
  40310e:	d009      	beq.n	403124 <ioport_set_pin_level+0x4e>
  403110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403112:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403114:	68fb      	ldr	r3, [r7, #12]
  403116:	f003 031f 	and.w	r3, r3, #31
  40311a:	2201      	movs	r2, #1
  40311c:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40311e:	693b      	ldr	r3, [r7, #16]
  403120:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  403122:	e008      	b.n	403136 <ioport_set_pin_level+0x60>
  403124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403126:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  403128:	68bb      	ldr	r3, [r7, #8]
  40312a:	f003 031f 	and.w	r3, r3, #31
  40312e:	2201      	movs	r2, #1
  403130:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403132:	693b      	ldr	r3, [r7, #16]
  403134:	635a      	str	r2, [r3, #52]	; 0x34
  403136:	bf00      	nop
  403138:	372c      	adds	r7, #44	; 0x2c
  40313a:	46bd      	mov	sp, r7
  40313c:	bc80      	pop	{r7}
  40313e:	4770      	bx	lr

00403140 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{	
  403140:	b580      	push	{r7, lr}
  403142:	af00      	add	r7, sp, #0
	ioport_init();
  403144:	4b0c      	ldr	r3, [pc, #48]	; (403178 <board_init+0x38>)
  403146:	447b      	add	r3, pc
  403148:	4798      	blx	r3
	
	ioport_set_pin_dir(RST_CAM_PIN, IOPORT_DIR_OUTPUT);
  40314a:	2101      	movs	r1, #1
  40314c:	2014      	movs	r0, #20
  40314e:	4b0b      	ldr	r3, [pc, #44]	; (40317c <board_init+0x3c>)
  403150:	447b      	add	r3, pc
  403152:	4798      	blx	r3
	ioport_set_pin_level(RST_CAM_PIN, false);
  403154:	2100      	movs	r1, #0
  403156:	2014      	movs	r0, #20
  403158:	4b09      	ldr	r3, [pc, #36]	; (403180 <board_init+0x40>)
  40315a:	447b      	add	r3, pc
  40315c:	4798      	blx	r3
	
// 	ioport_set_pin_dir(WIFI_CTS_PIN, IOPORT_DIR_OUTPUT);
// 	ioport_set_pin_level(WIFI_CTS_PIN, false);
	
	ioport_set_pin_dir(WIFI_RESET_PIN, IOPORT_DIR_OUTPUT);
  40315e:	2101      	movs	r1, #1
  403160:	2000      	movs	r0, #0
  403162:	4b08      	ldr	r3, [pc, #32]	; (403184 <board_init+0x44>)
  403164:	447b      	add	r3, pc
  403166:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  403168:	2101      	movs	r1, #1
  40316a:	2000      	movs	r0, #0
  40316c:	4b06      	ldr	r3, [pc, #24]	; (403188 <board_init+0x48>)
  40316e:	447b      	add	r3, pc
  403170:	4798      	blx	r3
	
}
  403172:	bf00      	nop
  403174:	bd80      	pop	{r7, pc}
  403176:	bf00      	nop
  403178:	fffffee7 	.word	0xfffffee7
  40317c:	fffffefd 	.word	0xfffffefd
  403180:	ffffff79 	.word	0xffffff79
  403184:	fffffee9 	.word	0xfffffee9
  403188:	ffffff65 	.word	0xffffff65

0040318c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40318c:	b590      	push	{r4, r7, lr}
  40318e:	b085      	sub	sp, #20
  403190:	af00      	add	r7, sp, #0
  403192:	4c2e      	ldr	r4, [pc, #184]	; (40324c <Reset_Handler+0xc0>)
  403194:	447c      	add	r4, pc
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  403196:	4b2e      	ldr	r3, [pc, #184]	; (403250 <Reset_Handler+0xc4>)
  403198:	58e3      	ldr	r3, [r4, r3]
  40319a:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  40319c:	4b2d      	ldr	r3, [pc, #180]	; (403254 <Reset_Handler+0xc8>)
  40319e:	58e3      	ldr	r3, [r4, r3]
  4031a0:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4031a2:	68fa      	ldr	r2, [r7, #12]
  4031a4:	68bb      	ldr	r3, [r7, #8]
  4031a6:	429a      	cmp	r2, r3
  4031a8:	d90e      	bls.n	4031c8 <Reset_Handler+0x3c>
		for (; pDest < &_erelocate;) {
  4031aa:	e007      	b.n	4031bc <Reset_Handler+0x30>
			*pDest++ = *pSrc++;
  4031ac:	68bb      	ldr	r3, [r7, #8]
  4031ae:	1d1a      	adds	r2, r3, #4
  4031b0:	60ba      	str	r2, [r7, #8]
  4031b2:	68fa      	ldr	r2, [r7, #12]
  4031b4:	1d11      	adds	r1, r2, #4
  4031b6:	60f9      	str	r1, [r7, #12]
  4031b8:	6812      	ldr	r2, [r2, #0]
  4031ba:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4031bc:	68bb      	ldr	r3, [r7, #8]
  4031be:	4a26      	ldr	r2, [pc, #152]	; (403258 <Reset_Handler+0xcc>)
  4031c0:	58a2      	ldr	r2, [r4, r2]
  4031c2:	4293      	cmp	r3, r2
  4031c4:	d3f2      	bcc.n	4031ac <Reset_Handler+0x20>
  4031c6:	e023      	b.n	403210 <Reset_Handler+0x84>
		}
	} else if (pSrc < pDest) {
  4031c8:	68fa      	ldr	r2, [r7, #12]
  4031ca:	68bb      	ldr	r3, [r7, #8]
  4031cc:	429a      	cmp	r2, r3
  4031ce:	d21f      	bcs.n	403210 <Reset_Handler+0x84>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4031d0:	4b21      	ldr	r3, [pc, #132]	; (403258 <Reset_Handler+0xcc>)
  4031d2:	58e3      	ldr	r3, [r4, r3]
  4031d4:	461a      	mov	r2, r3
  4031d6:	4b1f      	ldr	r3, [pc, #124]	; (403254 <Reset_Handler+0xc8>)
  4031d8:	58e3      	ldr	r3, [r4, r3]
  4031da:	1ad3      	subs	r3, r2, r3
  4031dc:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4031de:	68fa      	ldr	r2, [r7, #12]
  4031e0:	687b      	ldr	r3, [r7, #4]
  4031e2:	4413      	add	r3, r2
  4031e4:	3b04      	subs	r3, #4
  4031e6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4031e8:	68ba      	ldr	r2, [r7, #8]
  4031ea:	687b      	ldr	r3, [r7, #4]
  4031ec:	4413      	add	r3, r2
  4031ee:	3b04      	subs	r3, #4
  4031f0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  4031f2:	e00a      	b.n	40320a <Reset_Handler+0x7e>
			*pDest-- = *pSrc--;
  4031f4:	68bb      	ldr	r3, [r7, #8]
  4031f6:	1f1a      	subs	r2, r3, #4
  4031f8:	60ba      	str	r2, [r7, #8]
  4031fa:	68fa      	ldr	r2, [r7, #12]
  4031fc:	1f11      	subs	r1, r2, #4
  4031fe:	60f9      	str	r1, [r7, #12]
  403200:	6812      	ldr	r2, [r2, #0]
  403202:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  403204:	687b      	ldr	r3, [r7, #4]
  403206:	3b04      	subs	r3, #4
  403208:	607b      	str	r3, [r7, #4]
  40320a:	687b      	ldr	r3, [r7, #4]
  40320c:	2b00      	cmp	r3, #0
  40320e:	d1f1      	bne.n	4031f4 <Reset_Handler+0x68>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403210:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403212:	4b12      	ldr	r3, [pc, #72]	; (40325c <Reset_Handler+0xd0>)
  403214:	58e3      	ldr	r3, [r4, r3]
  403216:	60bb      	str	r3, [r7, #8]
  403218:	e004      	b.n	403224 <Reset_Handler+0x98>
		*pDest++ = 0;
  40321a:	68bb      	ldr	r3, [r7, #8]
  40321c:	1d1a      	adds	r2, r3, #4
  40321e:	60ba      	str	r2, [r7, #8]
  403220:	2200      	movs	r2, #0
  403222:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  403224:	68bb      	ldr	r3, [r7, #8]
  403226:	4a0e      	ldr	r2, [pc, #56]	; (403260 <Reset_Handler+0xd4>)
  403228:	58a2      	ldr	r2, [r4, r2]
  40322a:	4293      	cmp	r3, r2
  40322c:	d3f5      	bcc.n	40321a <Reset_Handler+0x8e>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40322e:	4b0d      	ldr	r3, [pc, #52]	; (403264 <Reset_Handler+0xd8>)
  403230:	58e3      	ldr	r3, [r4, r3]
  403232:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  403234:	4a04      	ldr	r2, [pc, #16]	; (403248 <Reset_Handler+0xbc>)
  403236:	68fb      	ldr	r3, [r7, #12]
  403238:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40323a:	4b0b      	ldr	r3, [pc, #44]	; (403268 <Reset_Handler+0xdc>)
  40323c:	58e3      	ldr	r3, [r4, r3]
  40323e:	4798      	blx	r3

	/* Branch to main function */
	main();
  403240:	4b0a      	ldr	r3, [pc, #40]	; (40326c <Reset_Handler+0xe0>)
  403242:	58e3      	ldr	r3, [r4, r3]
  403244:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  403246:	e7fe      	b.n	403246 <Reset_Handler+0xba>
  403248:	e000ed00 	.word	0xe000ed00
  40324c:	00006c04 	.word	0x00006c04
  403250:	00000060 	.word	0x00000060
  403254:	00000084 	.word	0x00000084
  403258:	000001e4 	.word	0x000001e4
  40325c:	00000078 	.word	0x00000078
  403260:	00000198 	.word	0x00000198
  403264:	00000054 	.word	0x00000054
  403268:	000000c0 	.word	0x000000c0
  40326c:	00000188 	.word	0x00000188

00403270 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403270:	b480      	push	{r7}
  403272:	af00      	add	r7, sp, #0
	while (1) {
  403274:	e7fe      	b.n	403274 <Dummy_Handler+0x4>
	...

00403278 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  403278:	b480      	push	{r7}
  40327a:	af00      	add	r7, sp, #0
  40327c:	4b77      	ldr	r3, [pc, #476]	; (40345c <SystemCoreClockUpdate+0x1e4>)
  40327e:	447b      	add	r3, pc
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403280:	4a70      	ldr	r2, [pc, #448]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403282:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403284:	f002 0203 	and.w	r2, r2, #3
  403288:	2a03      	cmp	r2, #3
  40328a:	f200 80b8 	bhi.w	4033fe <SystemCoreClockUpdate+0x186>
  40328e:	a102      	add	r1, pc, #8	; (adr r1, 403298 <SystemCoreClockUpdate+0x20>)
  403290:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  403294:	4411      	add	r1, r2
  403296:	4708      	bx	r1
  403298:	00000011 	.word	0x00000011
  40329c:	00000039 	.word	0x00000039
  4032a0:	00000097 	.word	0x00000097
  4032a4:	00000097 	.word	0x00000097
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4032a8:	4a67      	ldr	r2, [pc, #412]	; (403448 <SystemCoreClockUpdate+0x1d0>)
  4032aa:	6952      	ldr	r2, [r2, #20]
  4032ac:	f002 0280 	and.w	r2, r2, #128	; 0x80
  4032b0:	2a00      	cmp	r2, #0
  4032b2:	d006      	beq.n	4032c2 <SystemCoreClockUpdate+0x4a>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4032b4:	4a6a      	ldr	r2, [pc, #424]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4032b6:	589a      	ldr	r2, [r3, r2]
  4032b8:	4611      	mov	r1, r2
  4032ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4032be:	600a      	str	r2, [r1, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4032c0:	e09e      	b.n	403400 <SystemCoreClockUpdate+0x188>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4032c2:	4a67      	ldr	r2, [pc, #412]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4032c4:	589a      	ldr	r2, [r3, r2]
  4032c6:	4611      	mov	r1, r2
  4032c8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4032cc:	600a      	str	r2, [r1, #0]
		break;
  4032ce:	e097      	b.n	403400 <SystemCoreClockUpdate+0x188>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4032d0:	4a5c      	ldr	r2, [pc, #368]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  4032d2:	6a12      	ldr	r2, [r2, #32]
  4032d4:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
  4032d8:	2a00      	cmp	r2, #0
  4032da:	d005      	beq.n	4032e8 <SystemCoreClockUpdate+0x70>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4032dc:	4a60      	ldr	r2, [pc, #384]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4032de:	589a      	ldr	r2, [r3, r2]
  4032e0:	4611      	mov	r1, r2
  4032e2:	4a5a      	ldr	r2, [pc, #360]	; (40344c <SystemCoreClockUpdate+0x1d4>)
  4032e4:	600a      	str	r2, [r1, #0]
			
			default:
			break;
			}
		}
		break;
  4032e6:	e08b      	b.n	403400 <SystemCoreClockUpdate+0x188>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4032e8:	4a5d      	ldr	r2, [pc, #372]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4032ea:	589a      	ldr	r2, [r3, r2]
  4032ec:	4611      	mov	r1, r2
  4032ee:	4a58      	ldr	r2, [pc, #352]	; (403450 <SystemCoreClockUpdate+0x1d8>)
  4032f0:	600a      	str	r2, [r1, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4032f2:	4a54      	ldr	r2, [pc, #336]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  4032f4:	6a12      	ldr	r2, [r2, #32]
  4032f6:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4032fa:	2a10      	cmp	r2, #16
  4032fc:	d00a      	beq.n	403314 <SystemCoreClockUpdate+0x9c>
  4032fe:	2a20      	cmp	r2, #32
  403300:	d00e      	beq.n	403320 <SystemCoreClockUpdate+0xa8>
  403302:	2a00      	cmp	r2, #0
  403304:	d000      	beq.n	403308 <SystemCoreClockUpdate+0x90>
			break;
  403306:	e011      	b.n	40332c <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403308:	4a55      	ldr	r2, [pc, #340]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  40330a:	589a      	ldr	r2, [r3, r2]
  40330c:	4611      	mov	r1, r2
  40330e:	4a50      	ldr	r2, [pc, #320]	; (403450 <SystemCoreClockUpdate+0x1d8>)
  403310:	600a      	str	r2, [r1, #0]
			break;
  403312:	e00b      	b.n	40332c <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403314:	4a52      	ldr	r2, [pc, #328]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403316:	589a      	ldr	r2, [r3, r2]
  403318:	4611      	mov	r1, r2
  40331a:	4a4e      	ldr	r2, [pc, #312]	; (403454 <SystemCoreClockUpdate+0x1dc>)
  40331c:	600a      	str	r2, [r1, #0]
			break;
  40331e:	e005      	b.n	40332c <SystemCoreClockUpdate+0xb4>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403320:	4a4f      	ldr	r2, [pc, #316]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403322:	589a      	ldr	r2, [r3, r2]
  403324:	4611      	mov	r1, r2
  403326:	4a49      	ldr	r2, [pc, #292]	; (40344c <SystemCoreClockUpdate+0x1d4>)
  403328:	600a      	str	r2, [r1, #0]
			break;
  40332a:	bf00      	nop
		break;
  40332c:	e068      	b.n	403400 <SystemCoreClockUpdate+0x188>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40332e:	4a45      	ldr	r2, [pc, #276]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403330:	6a12      	ldr	r2, [r2, #32]
  403332:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
  403336:	2a00      	cmp	r2, #0
  403338:	d005      	beq.n	403346 <SystemCoreClockUpdate+0xce>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40333a:	4a49      	ldr	r2, [pc, #292]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  40333c:	589a      	ldr	r2, [r3, r2]
  40333e:	4611      	mov	r1, r2
  403340:	4a42      	ldr	r2, [pc, #264]	; (40344c <SystemCoreClockUpdate+0x1d4>)
  403342:	600a      	str	r2, [r1, #0]
  403344:	e021      	b.n	40338a <SystemCoreClockUpdate+0x112>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403346:	4a46      	ldr	r2, [pc, #280]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403348:	589a      	ldr	r2, [r3, r2]
  40334a:	4611      	mov	r1, r2
  40334c:	4a40      	ldr	r2, [pc, #256]	; (403450 <SystemCoreClockUpdate+0x1d8>)
  40334e:	600a      	str	r2, [r1, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403350:	4a3c      	ldr	r2, [pc, #240]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403352:	6a12      	ldr	r2, [r2, #32]
  403354:	f002 0270 	and.w	r2, r2, #112	; 0x70
  403358:	2a10      	cmp	r2, #16
  40335a:	d00a      	beq.n	403372 <SystemCoreClockUpdate+0xfa>
  40335c:	2a20      	cmp	r2, #32
  40335e:	d00e      	beq.n	40337e <SystemCoreClockUpdate+0x106>
  403360:	2a00      	cmp	r2, #0
  403362:	d000      	beq.n	403366 <SystemCoreClockUpdate+0xee>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  403364:	e011      	b.n	40338a <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403366:	4a3e      	ldr	r2, [pc, #248]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403368:	589a      	ldr	r2, [r3, r2]
  40336a:	4611      	mov	r1, r2
  40336c:	4a38      	ldr	r2, [pc, #224]	; (403450 <SystemCoreClockUpdate+0x1d8>)
  40336e:	600a      	str	r2, [r1, #0]
					break;
  403370:	e00b      	b.n	40338a <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403372:	4a3b      	ldr	r2, [pc, #236]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403374:	589a      	ldr	r2, [r3, r2]
  403376:	4611      	mov	r1, r2
  403378:	4a36      	ldr	r2, [pc, #216]	; (403454 <SystemCoreClockUpdate+0x1dc>)
  40337a:	600a      	str	r2, [r1, #0]
					break;
  40337c:	e005      	b.n	40338a <SystemCoreClockUpdate+0x112>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40337e:	4a38      	ldr	r2, [pc, #224]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403380:	589a      	ldr	r2, [r3, r2]
  403382:	4611      	mov	r1, r2
  403384:	4a31      	ldr	r2, [pc, #196]	; (40344c <SystemCoreClockUpdate+0x1d4>)
  403386:	600a      	str	r2, [r1, #0]
					break;
  403388:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40338a:	4a2e      	ldr	r2, [pc, #184]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  40338c:	6b12      	ldr	r2, [r2, #48]	; 0x30
  40338e:	f002 0203 	and.w	r2, r2, #3
  403392:	2a02      	cmp	r2, #2
  403394:	d119      	bne.n	4033ca <SystemCoreClockUpdate+0x152>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403396:	4a2b      	ldr	r2, [pc, #172]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403398:	6a92      	ldr	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40339a:	0c12      	lsrs	r2, r2, #16
  40339c:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4033a0:	3201      	adds	r2, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4033a2:	492f      	ldr	r1, [pc, #188]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033a4:	5859      	ldr	r1, [r3, r1]
  4033a6:	6809      	ldr	r1, [r1, #0]
  4033a8:	fb01 f202 	mul.w	r2, r1, r2
  4033ac:	492c      	ldr	r1, [pc, #176]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033ae:	5859      	ldr	r1, [r3, r1]
  4033b0:	600a      	str	r2, [r1, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4033b2:	4a24      	ldr	r2, [pc, #144]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  4033b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  4033b6:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4033b8:	4929      	ldr	r1, [pc, #164]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033ba:	5859      	ldr	r1, [r3, r1]
  4033bc:	6809      	ldr	r1, [r1, #0]
  4033be:	fbb1 f2f2 	udiv	r2, r1, r2
  4033c2:	4927      	ldr	r1, [pc, #156]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033c4:	5859      	ldr	r1, [r3, r1]
  4033c6:	600a      	str	r2, [r1, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  4033c8:	e01a      	b.n	403400 <SystemCoreClockUpdate+0x188>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4033ca:	4a1e      	ldr	r2, [pc, #120]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  4033cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4033ce:	0c12      	lsrs	r2, r2, #16
  4033d0:	f3c2 020a 	ubfx	r2, r2, #0, #11
  4033d4:	3201      	adds	r2, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4033d6:	4922      	ldr	r1, [pc, #136]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033d8:	5859      	ldr	r1, [r3, r1]
  4033da:	6809      	ldr	r1, [r1, #0]
  4033dc:	fb01 f202 	mul.w	r2, r1, r2
  4033e0:	491f      	ldr	r1, [pc, #124]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033e2:	5859      	ldr	r1, [r3, r1]
  4033e4:	600a      	str	r2, [r1, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4033e6:	4a17      	ldr	r2, [pc, #92]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  4033e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4033ea:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4033ec:	491c      	ldr	r1, [pc, #112]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033ee:	5859      	ldr	r1, [r3, r1]
  4033f0:	6809      	ldr	r1, [r1, #0]
  4033f2:	fbb1 f2f2 	udiv	r2, r1, r2
  4033f6:	491a      	ldr	r1, [pc, #104]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  4033f8:	5859      	ldr	r1, [r3, r1]
  4033fa:	600a      	str	r2, [r1, #0]
		break;
  4033fc:	e000      	b.n	403400 <SystemCoreClockUpdate+0x188>
		
	default:
		break;
  4033fe:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403400:	4a10      	ldr	r2, [pc, #64]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403402:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403404:	f002 0270 	and.w	r2, r2, #112	; 0x70
  403408:	2a70      	cmp	r2, #112	; 0x70
  40340a:	d10a      	bne.n	403422 <SystemCoreClockUpdate+0x1aa>
		SystemCoreClock /= 3U;
  40340c:	4a14      	ldr	r2, [pc, #80]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  40340e:	589a      	ldr	r2, [r3, r2]
  403410:	6812      	ldr	r2, [r2, #0]
  403412:	4911      	ldr	r1, [pc, #68]	; (403458 <SystemCoreClockUpdate+0x1e0>)
  403414:	fba1 1202 	umull	r1, r2, r1, r2
  403418:	0852      	lsrs	r2, r2, #1
  40341a:	4911      	ldr	r1, [pc, #68]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  40341c:	585b      	ldr	r3, [r3, r1]
  40341e:	601a      	str	r2, [r3, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  403420:	e00c      	b.n	40343c <SystemCoreClockUpdate+0x1c4>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403422:	4a08      	ldr	r2, [pc, #32]	; (403444 <SystemCoreClockUpdate+0x1cc>)
  403424:	6b12      	ldr	r2, [r2, #48]	; 0x30
  403426:	0912      	lsrs	r2, r2, #4
  403428:	f002 0207 	and.w	r2, r2, #7
		SystemCoreClock >>=
  40342c:	490c      	ldr	r1, [pc, #48]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  40342e:	5859      	ldr	r1, [r3, r1]
  403430:	6809      	ldr	r1, [r1, #0]
  403432:	fa21 f202 	lsr.w	r2, r1, r2
  403436:	490a      	ldr	r1, [pc, #40]	; (403460 <SystemCoreClockUpdate+0x1e8>)
  403438:	585b      	ldr	r3, [r3, r1]
  40343a:	601a      	str	r2, [r3, #0]
}
  40343c:	bf00      	nop
  40343e:	46bd      	mov	sp, r7
  403440:	bc80      	pop	{r7}
  403442:	4770      	bx	lr
  403444:	400e0400 	.word	0x400e0400
  403448:	400e1410 	.word	0x400e1410
  40344c:	00b71b00 	.word	0x00b71b00
  403450:	003d0900 	.word	0x003d0900
  403454:	007a1200 	.word	0x007a1200
  403458:	aaaaaaab 	.word	0xaaaaaaab
  40345c:	00006b1a 	.word	0x00006b1a
  403460:	00000090 	.word	0x00000090

00403464 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  403464:	b480      	push	{r7}
  403466:	b083      	sub	sp, #12
  403468:	af00      	add	r7, sp, #0
  40346a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40346c:	687b      	ldr	r3, [r7, #4]
  40346e:	4a18      	ldr	r2, [pc, #96]	; (4034d0 <system_init_flash+0x6c>)
  403470:	4293      	cmp	r3, r2
  403472:	d804      	bhi.n	40347e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403474:	4b17      	ldr	r3, [pc, #92]	; (4034d4 <system_init_flash+0x70>)
  403476:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40347a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40347c:	e023      	b.n	4034c6 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40347e:	687b      	ldr	r3, [r7, #4]
  403480:	4a15      	ldr	r2, [pc, #84]	; (4034d8 <system_init_flash+0x74>)
  403482:	4293      	cmp	r3, r2
  403484:	d803      	bhi.n	40348e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403486:	4b13      	ldr	r3, [pc, #76]	; (4034d4 <system_init_flash+0x70>)
  403488:	4a14      	ldr	r2, [pc, #80]	; (4034dc <system_init_flash+0x78>)
  40348a:	601a      	str	r2, [r3, #0]
}
  40348c:	e01b      	b.n	4034c6 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40348e:	687b      	ldr	r3, [r7, #4]
  403490:	4a13      	ldr	r2, [pc, #76]	; (4034e0 <system_init_flash+0x7c>)
  403492:	4293      	cmp	r3, r2
  403494:	d803      	bhi.n	40349e <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403496:	4b0f      	ldr	r3, [pc, #60]	; (4034d4 <system_init_flash+0x70>)
  403498:	4a12      	ldr	r2, [pc, #72]	; (4034e4 <system_init_flash+0x80>)
  40349a:	601a      	str	r2, [r3, #0]
}
  40349c:	e013      	b.n	4034c6 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40349e:	687b      	ldr	r3, [r7, #4]
  4034a0:	4a11      	ldr	r2, [pc, #68]	; (4034e8 <system_init_flash+0x84>)
  4034a2:	4293      	cmp	r3, r2
  4034a4:	d803      	bhi.n	4034ae <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4034a6:	4b0b      	ldr	r3, [pc, #44]	; (4034d4 <system_init_flash+0x70>)
  4034a8:	4a10      	ldr	r2, [pc, #64]	; (4034ec <system_init_flash+0x88>)
  4034aa:	601a      	str	r2, [r3, #0]
}
  4034ac:	e00b      	b.n	4034c6 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4034ae:	687b      	ldr	r3, [r7, #4]
  4034b0:	4a0f      	ldr	r2, [pc, #60]	; (4034f0 <system_init_flash+0x8c>)
  4034b2:	4293      	cmp	r3, r2
  4034b4:	d804      	bhi.n	4034c0 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4034b6:	4b07      	ldr	r3, [pc, #28]	; (4034d4 <system_init_flash+0x70>)
  4034b8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4034bc:	601a      	str	r2, [r3, #0]
}
  4034be:	e002      	b.n	4034c6 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4034c0:	4b04      	ldr	r3, [pc, #16]	; (4034d4 <system_init_flash+0x70>)
  4034c2:	4a0c      	ldr	r2, [pc, #48]	; (4034f4 <system_init_flash+0x90>)
  4034c4:	601a      	str	r2, [r3, #0]
}
  4034c6:	bf00      	nop
  4034c8:	370c      	adds	r7, #12
  4034ca:	46bd      	mov	sp, r7
  4034cc:	bc80      	pop	{r7}
  4034ce:	4770      	bx	lr
  4034d0:	01312cff 	.word	0x01312cff
  4034d4:	400e0a00 	.word	0x400e0a00
  4034d8:	026259ff 	.word	0x026259ff
  4034dc:	04000100 	.word	0x04000100
  4034e0:	039386ff 	.word	0x039386ff
  4034e4:	04000200 	.word	0x04000200
  4034e8:	04c4b3ff 	.word	0x04c4b3ff
  4034ec:	04000300 	.word	0x04000300
  4034f0:	05f5e0ff 	.word	0x05f5e0ff
  4034f4:	04000500 	.word	0x04000500

004034f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4034f8:	b480      	push	{r7}
  4034fa:	b085      	sub	sp, #20
  4034fc:	af00      	add	r7, sp, #0
  4034fe:	6078      	str	r0, [r7, #4]
  403500:	4b15      	ldr	r3, [pc, #84]	; (403558 <_sbrk+0x60>)
  403502:	447b      	add	r3, pc
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  403504:	4a15      	ldr	r2, [pc, #84]	; (40355c <_sbrk+0x64>)
  403506:	589a      	ldr	r2, [r3, r2]
  403508:	60fa      	str	r2, [r7, #12]

	if (heap == NULL) {
  40350a:	4a15      	ldr	r2, [pc, #84]	; (403560 <_sbrk+0x68>)
  40350c:	447a      	add	r2, pc
  40350e:	6812      	ldr	r2, [r2, #0]
  403510:	2a00      	cmp	r2, #0
  403512:	d105      	bne.n	403520 <_sbrk+0x28>
		heap = (unsigned char *)&_end;
  403514:	4a13      	ldr	r2, [pc, #76]	; (403564 <_sbrk+0x6c>)
  403516:	447a      	add	r2, pc
  403518:	4611      	mov	r1, r2
  40351a:	4a13      	ldr	r2, [pc, #76]	; (403568 <_sbrk+0x70>)
  40351c:	589b      	ldr	r3, [r3, r2]
  40351e:	600b      	str	r3, [r1, #0]
	}
	prev_heap = heap;
  403520:	4b12      	ldr	r3, [pc, #72]	; (40356c <_sbrk+0x74>)
  403522:	447b      	add	r3, pc
  403524:	681b      	ldr	r3, [r3, #0]
  403526:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  403528:	68ba      	ldr	r2, [r7, #8]
  40352a:	687b      	ldr	r3, [r7, #4]
  40352c:	441a      	add	r2, r3
  40352e:	68fb      	ldr	r3, [r7, #12]
  403530:	429a      	cmp	r2, r3
  403532:	dd02      	ble.n	40353a <_sbrk+0x42>
		return (caddr_t) -1;	
  403534:	f04f 33ff 	mov.w	r3, #4294967295
  403538:	e008      	b.n	40354c <_sbrk+0x54>
	}

	heap += incr;
  40353a:	4b0d      	ldr	r3, [pc, #52]	; (403570 <_sbrk+0x78>)
  40353c:	447b      	add	r3, pc
  40353e:	681a      	ldr	r2, [r3, #0]
  403540:	687b      	ldr	r3, [r7, #4]
  403542:	4413      	add	r3, r2
  403544:	4a0b      	ldr	r2, [pc, #44]	; (403574 <_sbrk+0x7c>)
  403546:	447a      	add	r2, pc
  403548:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40354a:	68bb      	ldr	r3, [r7, #8]
}
  40354c:	4618      	mov	r0, r3
  40354e:	3714      	adds	r7, #20
  403550:	46bd      	mov	sp, r7
  403552:	bc80      	pop	{r7}
  403554:	4770      	bx	lr
  403556:	bf00      	nop
  403558:	00006896 	.word	0x00006896
  40355c:	000001e8 	.word	0x000001e8
  403560:	1fbfd578 	.word	0x1fbfd578
  403564:	1fbfd56e 	.word	0x1fbfd56e
  403568:	000001f0 	.word	0x000001f0
  40356c:	1fbfd562 	.word	0x1fbfd562
  403570:	1fbfd548 	.word	0x1fbfd548
  403574:	1fbfd53e 	.word	0x1fbfd53e

00403578 <osc_get_rate>:
{
  403578:	b480      	push	{r7}
  40357a:	b083      	sub	sp, #12
  40357c:	af00      	add	r7, sp, #0
  40357e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403580:	687b      	ldr	r3, [r7, #4]
  403582:	2b07      	cmp	r3, #7
  403584:	d827      	bhi.n	4035d6 <osc_get_rate+0x5e>
  403586:	a202      	add	r2, pc, #8	; (adr r2, 403590 <osc_get_rate+0x18>)
  403588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40358c:	441a      	add	r2, r3
  40358e:	4710      	bx	r2
  403590:	00000021 	.word	0x00000021
  403594:	00000027 	.word	0x00000027
  403598:	0000002d 	.word	0x0000002d
  40359c:	00000033 	.word	0x00000033
  4035a0:	00000037 	.word	0x00000037
  4035a4:	0000003b 	.word	0x0000003b
  4035a8:	0000003f 	.word	0x0000003f
  4035ac:	00000043 	.word	0x00000043
		return OSC_SLCK_32K_RC_HZ;
  4035b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4035b4:	e010      	b.n	4035d8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_XTAL;
  4035b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4035ba:	e00d      	b.n	4035d8 <osc_get_rate+0x60>
		return BOARD_FREQ_SLCK_BYPASS;
  4035bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4035c0:	e00a      	b.n	4035d8 <osc_get_rate+0x60>
		return OSC_MAINCK_4M_RC_HZ;
  4035c2:	4b08      	ldr	r3, [pc, #32]	; (4035e4 <osc_get_rate+0x6c>)
  4035c4:	e008      	b.n	4035d8 <osc_get_rate+0x60>
		return OSC_MAINCK_8M_RC_HZ;
  4035c6:	4b08      	ldr	r3, [pc, #32]	; (4035e8 <osc_get_rate+0x70>)
  4035c8:	e006      	b.n	4035d8 <osc_get_rate+0x60>
		return OSC_MAINCK_12M_RC_HZ;
  4035ca:	4b08      	ldr	r3, [pc, #32]	; (4035ec <osc_get_rate+0x74>)
  4035cc:	e004      	b.n	4035d8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_XTAL;
  4035ce:	4b07      	ldr	r3, [pc, #28]	; (4035ec <osc_get_rate+0x74>)
  4035d0:	e002      	b.n	4035d8 <osc_get_rate+0x60>
		return BOARD_FREQ_MAINCK_BYPASS;
  4035d2:	4b06      	ldr	r3, [pc, #24]	; (4035ec <osc_get_rate+0x74>)
  4035d4:	e000      	b.n	4035d8 <osc_get_rate+0x60>
	return 0;
  4035d6:	2300      	movs	r3, #0
}
  4035d8:	4618      	mov	r0, r3
  4035da:	370c      	adds	r7, #12
  4035dc:	46bd      	mov	sp, r7
  4035de:	bc80      	pop	{r7}
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop
  4035e4:	003d0900 	.word	0x003d0900
  4035e8:	007a1200 	.word	0x007a1200
  4035ec:	00b71b00 	.word	0x00b71b00

004035f0 <sysclk_get_main_hz>:
{
  4035f0:	b580      	push	{r7, lr}
  4035f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4035f4:	2006      	movs	r0, #6
  4035f6:	4b05      	ldr	r3, [pc, #20]	; (40360c <sysclk_get_main_hz+0x1c>)
  4035f8:	447b      	add	r3, pc
  4035fa:	4798      	blx	r3
  4035fc:	4602      	mov	r2, r0
  4035fe:	4613      	mov	r3, r2
  403600:	009b      	lsls	r3, r3, #2
  403602:	4413      	add	r3, r2
  403604:	009b      	lsls	r3, r3, #2
}
  403606:	4618      	mov	r0, r3
  403608:	bd80      	pop	{r7, pc}
  40360a:	bf00      	nop
  40360c:	ffffff7d 	.word	0xffffff7d

00403610 <sysclk_get_cpu_hz>:
{
  403610:	b580      	push	{r7, lr}
  403612:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403614:	4b03      	ldr	r3, [pc, #12]	; (403624 <sysclk_get_cpu_hz+0x14>)
  403616:	447b      	add	r3, pc
  403618:	4798      	blx	r3
  40361a:	4603      	mov	r3, r0
  40361c:	085b      	lsrs	r3, r3, #1
}
  40361e:	4618      	mov	r0, r3
  403620:	bd80      	pop	{r7, pc}
  403622:	bf00      	nop
  403624:	ffffffd7 	.word	0xffffffd7

00403628 <ioport_set_pin_level>:
{
  403628:	b480      	push	{r7}
  40362a:	b08b      	sub	sp, #44	; 0x2c
  40362c:	af00      	add	r7, sp, #0
  40362e:	6078      	str	r0, [r7, #4]
  403630:	460b      	mov	r3, r1
  403632:	70fb      	strb	r3, [r7, #3]
  403634:	687b      	ldr	r3, [r7, #4]
  403636:	627b      	str	r3, [r7, #36]	; 0x24
  403638:	78fb      	ldrb	r3, [r7, #3]
  40363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403640:	61fb      	str	r3, [r7, #28]
  403642:	69fb      	ldr	r3, [r7, #28]
  403644:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403646:	69bb      	ldr	r3, [r7, #24]
  403648:	095b      	lsrs	r3, r3, #5
  40364a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40364c:	697b      	ldr	r3, [r7, #20]
  40364e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403652:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403656:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  403658:	613b      	str	r3, [r7, #16]
	if (level) {
  40365a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40365e:	2b00      	cmp	r3, #0
  403660:	d009      	beq.n	403676 <ioport_set_pin_level+0x4e>
  403662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403664:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403666:	68fb      	ldr	r3, [r7, #12]
  403668:	f003 031f 	and.w	r3, r3, #31
  40366c:	2201      	movs	r2, #1
  40366e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403670:	693b      	ldr	r3, [r7, #16]
  403672:	631a      	str	r2, [r3, #48]	; 0x30
}
  403674:	e008      	b.n	403688 <ioport_set_pin_level+0x60>
  403676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403678:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40367a:	68bb      	ldr	r3, [r7, #8]
  40367c:	f003 031f 	and.w	r3, r3, #31
  403680:	2201      	movs	r2, #1
  403682:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403684:	693b      	ldr	r3, [r7, #16]
  403686:	635a      	str	r2, [r3, #52]	; 0x34
  403688:	bf00      	nop
  40368a:	372c      	adds	r7, #44	; 0x2c
  40368c:	46bd      	mov	sp, r7
  40368e:	bc80      	pop	{r7}
  403690:	4770      	bx	lr

00403692 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
  403692:	b480      	push	{r7}
  403694:	b089      	sub	sp, #36	; 0x24
  403696:	af00      	add	r7, sp, #0
  403698:	6078      	str	r0, [r7, #4]
  40369a:	687b      	ldr	r3, [r7, #4]
  40369c:	61fb      	str	r3, [r7, #28]
  40369e:	69fb      	ldr	r3, [r7, #28]
  4036a0:	61bb      	str	r3, [r7, #24]
  4036a2:	69bb      	ldr	r3, [r7, #24]
  4036a4:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  4036a6:	697b      	ldr	r3, [r7, #20]
  4036a8:	095b      	lsrs	r3, r3, #5
  4036aa:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4036ac:	693b      	ldr	r3, [r7, #16]
  4036ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4036b2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4036b6:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4036b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4036ba:	69fb      	ldr	r3, [r7, #28]
  4036bc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4036be:	68fb      	ldr	r3, [r7, #12]
  4036c0:	f003 031f 	and.w	r3, r3, #31
  4036c4:	2101      	movs	r1, #1
  4036c6:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4036ca:	4013      	ands	r3, r2
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	bf14      	ite	ne
  4036d0:	2301      	movne	r3, #1
  4036d2:	2300      	moveq	r3, #0
  4036d4:	b2db      	uxtb	r3, r3
	return arch_ioport_get_pin_level(pin);
}
  4036d6:	4618      	mov	r0, r3
  4036d8:	3724      	adds	r7, #36	; 0x24
  4036da:	46bd      	mov	sp, r7
  4036dc:	bc80      	pop	{r7}
  4036de:	4770      	bx	lr

004036e0 <main>:
#include "conf_board.h"
#include "conf_clock.h"


int main (void)
{	
  4036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
  4036e4:	b096      	sub	sp, #88	; 0x58
  4036e6:	af00      	add	r7, sp, #0
  4036e8:	4db0      	ldr	r5, [pc, #704]	; (4039ac <main+0x2cc>)
  4036ea:	447d      	add	r5, pc
	int state_position = 1;
  4036ec:	2301      	movs	r3, #1
  4036ee:	657b      	str	r3, [r7, #84]	; 0x54
	
	sysclk_init();
  4036f0:	4baf      	ldr	r3, [pc, #700]	; (4039b0 <main+0x2d0>)
  4036f2:	58eb      	ldr	r3, [r5, r3]
  4036f4:	4798      	blx	r3
	wdt_disable(WDT);
  4036f6:	48ac      	ldr	r0, [pc, #688]	; (4039a8 <main+0x2c8>)
  4036f8:	4bae      	ldr	r3, [pc, #696]	; (4039b4 <main+0x2d4>)
  4036fa:	58eb      	ldr	r3, [r5, r3]
  4036fc:	4798      	blx	r3
	board_init();
  4036fe:	4bae      	ldr	r3, [pc, #696]	; (4039b8 <main+0x2d8>)
  403700:	58eb      	ldr	r3, [r5, r3]
  403702:	4798      	blx	r3
	
	configure_tc();
  403704:	4bad      	ldr	r3, [pc, #692]	; (4039bc <main+0x2dc>)
  403706:	58eb      	ldr	r3, [r5, r3]
  403708:	4798      	blx	r3
	
	configure_usart_wifi();
  40370a:	4bad      	ldr	r3, [pc, #692]	; (4039c0 <main+0x2e0>)
  40370c:	58eb      	ldr	r3, [r5, r3]
  40370e:	4798      	blx	r3
	configure_wifi_comm_pin();
  403710:	4bac      	ldr	r3, [pc, #688]	; (4039c4 <main+0x2e4>)
  403712:	58eb      	ldr	r3, [r5, r3]
  403714:	4798      	blx	r3
	configure_wifi_web_setup_pin();
  403716:	4bac      	ldr	r3, [pc, #688]	; (4039c8 <main+0x2e8>)
  403718:	58eb      	ldr	r3, [r5, r3]
  40371a:	4798      	blx	r3
		
	write_wifi_command("set uart.flow 0 on \r\n", 5);
  40371c:	2105      	movs	r1, #5
  40371e:	4bab      	ldr	r3, [pc, #684]	; (4039cc <main+0x2ec>)
  403720:	447b      	add	r3, pc
  403722:	4618      	mov	r0, r3
  403724:	4baa      	ldr	r3, [pc, #680]	; (4039d0 <main+0x2f0>)
  403726:	58eb      	ldr	r3, [r5, r3]
  403728:	4798      	blx	r3
	write_wifi_command("set bu c r 5000 \r\n", 5);
  40372a:	2105      	movs	r1, #5
  40372c:	4ba9      	ldr	r3, [pc, #676]	; (4039d4 <main+0x2f4>)
  40372e:	447b      	add	r3, pc
  403730:	4618      	mov	r0, r3
  403732:	4ba7      	ldr	r3, [pc, #668]	; (4039d0 <main+0x2f0>)
  403734:	58eb      	ldr	r3, [r5, r3]
  403736:	4798      	blx	r3
	write_wifi_command("set sy i g wlan 20 \r\n", 5);
  403738:	2105      	movs	r1, #5
  40373a:	4ba7      	ldr	r3, [pc, #668]	; (4039d8 <main+0x2f8>)
  40373c:	447b      	add	r3, pc
  40373e:	4618      	mov	r0, r3
  403740:	4ba3      	ldr	r3, [pc, #652]	; (4039d0 <main+0x2f0>)
  403742:	58eb      	ldr	r3, [r5, r3]
  403744:	4798      	blx	r3
	write_wifi_command("set sy i g network 18 \r\n", 5);
  403746:	2105      	movs	r1, #5
  403748:	4ba4      	ldr	r3, [pc, #656]	; (4039dc <main+0x2fc>)
  40374a:	447b      	add	r3, pc
  40374c:	4618      	mov	r0, r3
  40374e:	4ba0      	ldr	r3, [pc, #640]	; (4039d0 <main+0x2f0>)
  403750:	58eb      	ldr	r3, [r5, r3]
  403752:	4798      	blx	r3
	write_wifi_command("set sy i g softap 21 \r\n", 5);
  403754:	2105      	movs	r1, #5
  403756:	4ba2      	ldr	r3, [pc, #648]	; (4039e0 <main+0x300>)
  403758:	447b      	add	r3, pc
  40375a:	4618      	mov	r0, r3
  40375c:	4b9c      	ldr	r3, [pc, #624]	; (4039d0 <main+0x2f0>)
  40375e:	58eb      	ldr	r3, [r5, r3]
  403760:	4798      	blx	r3
	write_wifi_command("set sy c g 13 \r\n", 5);
  403762:	2105      	movs	r1, #5
  403764:	4b9f      	ldr	r3, [pc, #636]	; (4039e4 <main+0x304>)
  403766:	447b      	add	r3, pc
  403768:	4618      	mov	r0, r3
  40376a:	4b99      	ldr	r3, [pc, #612]	; (4039d0 <main+0x2f0>)
  40376c:	58eb      	ldr	r3, [r5, r3]
  40376e:	4798      	blx	r3
	write_wifi_command("set wl n o 14 \r\n", 5);
  403770:	2105      	movs	r1, #5
  403772:	4b9d      	ldr	r3, [pc, #628]	; (4039e8 <main+0x308>)
  403774:	447b      	add	r3, pc
  403776:	4618      	mov	r0, r3
  403778:	4b95      	ldr	r3, [pc, #596]	; (4039d0 <main+0x2f0>)
  40377a:	58eb      	ldr	r3, [r5, r3]
  40377c:	4798      	blx	r3
	write_wifi_command("set http.server.root_filename webcam/index.html \r\n", 5);
  40377e:	2105      	movs	r1, #5
  403780:	4b9a      	ldr	r3, [pc, #616]	; (4039ec <main+0x30c>)
  403782:	447b      	add	r3, pc
  403784:	4618      	mov	r0, r3
  403786:	4b92      	ldr	r3, [pc, #584]	; (4039d0 <main+0x2f0>)
  403788:	58eb      	ldr	r3, [r5, r3]
  40378a:	4798      	blx	r3
	write_wifi_command("save \r\n", 5);
  40378c:	2105      	movs	r1, #5
  40378e:	4b98      	ldr	r3, [pc, #608]	; (4039f0 <main+0x310>)
  403790:	447b      	add	r3, pc
  403792:	4618      	mov	r0, r3
  403794:	4b8e      	ldr	r3, [pc, #568]	; (4039d0 <main+0x2f0>)
  403796:	58eb      	ldr	r3, [r5, r3]
  403798:	4798      	blx	r3
	
	command_received_flag = false;
  40379a:	4b96      	ldr	r3, [pc, #600]	; (4039f4 <main+0x314>)
  40379c:	58eb      	ldr	r3, [r5, r3]
  40379e:	461a      	mov	r2, r3
  4037a0:	2300      	movs	r3, #0
  4037a2:	7013      	strb	r3, [r2, #0]
	
	ioport_set_pin_level(WIFI_RESET_PIN, false);
  4037a4:	2100      	movs	r1, #0
  4037a6:	2000      	movs	r0, #0
  4037a8:	4b93      	ldr	r3, [pc, #588]	; (4039f8 <main+0x318>)
  4037aa:	447b      	add	r3, pc
  4037ac:	4798      	blx	r3
	delay_ms(100);
  4037ae:	4b93      	ldr	r3, [pc, #588]	; (4039fc <main+0x31c>)
  4037b0:	447b      	add	r3, pc
  4037b2:	4798      	blx	r3
  4037b4:	4603      	mov	r3, r0
  4037b6:	4619      	mov	r1, r3
  4037b8:	f04f 0200 	mov.w	r2, #0
  4037bc:	460b      	mov	r3, r1
  4037be:	4614      	mov	r4, r2
  4037c0:	18db      	adds	r3, r3, r3
  4037c2:	eb44 0404 	adc.w	r4, r4, r4
  4037c6:	185b      	adds	r3, r3, r1
  4037c8:	eb44 0402 	adc.w	r4, r4, r2
  4037cc:	ea4f 1944 	mov.w	r9, r4, lsl #5
  4037d0:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
  4037d4:	ea4f 1843 	mov.w	r8, r3, lsl #5
  4037d8:	eb13 0308 	adds.w	r3, r3, r8
  4037dc:	eb44 0409 	adc.w	r4, r4, r9
  4037e0:	185b      	adds	r3, r3, r1
  4037e2:	eb44 0402 	adc.w	r4, r4, r2
  4037e6:	f243 61af 	movw	r1, #13999	; 0x36af
  4037ea:	f04f 0200 	mov.w	r2, #0
  4037ee:	eb13 0801 	adds.w	r8, r3, r1
  4037f2:	eb44 0902 	adc.w	r9, r4, r2
  4037f6:	4640      	mov	r0, r8
  4037f8:	4649      	mov	r1, r9
  4037fa:	4b81      	ldr	r3, [pc, #516]	; (403a00 <main+0x320>)
  4037fc:	58eb      	ldr	r3, [r5, r3]
  4037fe:	461c      	mov	r4, r3
  403800:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403804:	f04f 0300 	mov.w	r3, #0
  403808:	47a0      	blx	r4
  40380a:	4603      	mov	r3, r0
  40380c:	460c      	mov	r4, r1
  40380e:	4618      	mov	r0, r3
  403810:	4b7c      	ldr	r3, [pc, #496]	; (403a04 <main+0x324>)
  403812:	58eb      	ldr	r3, [r5, r3]
  403814:	4798      	blx	r3
	ioport_set_pin_level(WIFI_RESET_PIN, true);
  403816:	2101      	movs	r1, #1
  403818:	2000      	movs	r0, #0
  40381a:	4b7b      	ldr	r3, [pc, #492]	; (403a08 <main+0x328>)
  40381c:	447b      	add	r3, pc
  40381e:	4798      	blx	r3
	
	delay_ms(10000);
  403820:	4b7a      	ldr	r3, [pc, #488]	; (403a0c <main+0x32c>)
  403822:	447b      	add	r3, pc
  403824:	4798      	blx	r3
  403826:	4603      	mov	r3, r0
  403828:	4619      	mov	r1, r3
  40382a:	f04f 0200 	mov.w	r2, #0
  40382e:	460b      	mov	r3, r1
  403830:	4614      	mov	r4, r2
  403832:	ea4f 0b84 	mov.w	fp, r4, lsl #2
  403836:	ea4b 7b93 	orr.w	fp, fp, r3, lsr #30
  40383a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
  40383e:	4653      	mov	r3, sl
  403840:	465c      	mov	r4, fp
  403842:	185b      	adds	r3, r3, r1
  403844:	eb44 0402 	adc.w	r4, r4, r2
  403848:	00e0      	lsls	r0, r4, #3
  40384a:	64f8      	str	r0, [r7, #76]	; 0x4c
  40384c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  40384e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  403852:	64f8      	str	r0, [r7, #76]	; 0x4c
  403854:	00db      	lsls	r3, r3, #3
  403856:	64bb      	str	r3, [r7, #72]	; 0x48
  403858:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
  40385c:	1a5b      	subs	r3, r3, r1
  40385e:	eb64 0402 	sbc.w	r4, r4, r2
  403862:	0120      	lsls	r0, r4, #4
  403864:	6478      	str	r0, [r7, #68]	; 0x44
  403866:	6c78      	ldr	r0, [r7, #68]	; 0x44
  403868:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  40386c:	6478      	str	r0, [r7, #68]	; 0x44
  40386e:	011b      	lsls	r3, r3, #4
  403870:	643b      	str	r3, [r7, #64]	; 0x40
  403872:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
  403876:	185b      	adds	r3, r3, r1
  403878:	eb44 0402 	adc.w	r4, r4, r2
  40387c:	0122      	lsls	r2, r4, #4
  40387e:	63fa      	str	r2, [r7, #60]	; 0x3c
  403880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403882:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
  403886:	63fa      	str	r2, [r7, #60]	; 0x3c
  403888:	011b      	lsls	r3, r3, #4
  40388a:	63bb      	str	r3, [r7, #56]	; 0x38
  40388c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
  403890:	4619      	mov	r1, r3
  403892:	4622      	mov	r2, r4
  403894:	f243 63af 	movw	r3, #13999	; 0x36af
  403898:	f04f 0400 	mov.w	r4, #0
  40389c:	eb11 0803 	adds.w	r8, r1, r3
  4038a0:	eb42 0904 	adc.w	r9, r2, r4
  4038a4:	4640      	mov	r0, r8
  4038a6:	4649      	mov	r1, r9
  4038a8:	4b55      	ldr	r3, [pc, #340]	; (403a00 <main+0x320>)
  4038aa:	58eb      	ldr	r3, [r5, r3]
  4038ac:	461c      	mov	r4, r3
  4038ae:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4038b2:	f04f 0300 	mov.w	r3, #0
  4038b6:	47a0      	blx	r4
  4038b8:	4603      	mov	r3, r0
  4038ba:	460c      	mov	r4, r1
  4038bc:	4618      	mov	r0, r3
  4038be:	4b51      	ldr	r3, [pc, #324]	; (403a04 <main+0x324>)
  4038c0:	58eb      	ldr	r3, [r5, r3]
  4038c2:	4798      	blx	r3
	
	web_setup_flag = false; 
  4038c4:	4b52      	ldr	r3, [pc, #328]	; (403a10 <main+0x330>)
  4038c6:	58eb      	ldr	r3, [r5, r3]
  4038c8:	461a      	mov	r2, r3
  4038ca:	2300      	movs	r3, #0
  4038cc:	7013      	strb	r3, [r2, #0]
	
	while (ioport_get_pin_level(NETWORK_STATUS_PIN) == false)
  4038ce:	e011      	b.n	4038f4 <main+0x214>
	{
		if (web_setup_flag == true)
  4038d0:	4b4f      	ldr	r3, [pc, #316]	; (403a10 <main+0x330>)
  4038d2:	58eb      	ldr	r3, [r5, r3]
  4038d4:	781b      	ldrb	r3, [r3, #0]
  4038d6:	b2db      	uxtb	r3, r3
  4038d8:	2b00      	cmp	r3, #0
  4038da:	d00b      	beq.n	4038f4 <main+0x214>
		{
			write_wifi_command("setup web \r\n", 100);
  4038dc:	2164      	movs	r1, #100	; 0x64
  4038de:	4b4d      	ldr	r3, [pc, #308]	; (403a14 <main+0x334>)
  4038e0:	447b      	add	r3, pc
  4038e2:	4618      	mov	r0, r3
  4038e4:	4b3a      	ldr	r3, [pc, #232]	; (4039d0 <main+0x2f0>)
  4038e6:	58eb      	ldr	r3, [r5, r3]
  4038e8:	4798      	blx	r3
			
			web_setup_flag = false;
  4038ea:	4b49      	ldr	r3, [pc, #292]	; (403a10 <main+0x330>)
  4038ec:	58eb      	ldr	r3, [r5, r3]
  4038ee:	461a      	mov	r2, r3
  4038f0:	2300      	movs	r3, #0
  4038f2:	7013      	strb	r3, [r2, #0]
	while (ioport_get_pin_level(NETWORK_STATUS_PIN) == false)
  4038f4:	2020      	movs	r0, #32
  4038f6:	4b48      	ldr	r3, [pc, #288]	; (403a18 <main+0x338>)
  4038f8:	447b      	add	r3, pc
  4038fa:	4798      	blx	r3
  4038fc:	4603      	mov	r3, r0
  4038fe:	f083 0301 	eor.w	r3, r3, #1
  403902:	b2db      	uxtb	r3, r3
  403904:	2b00      	cmp	r3, #0
  403906:	d1e3      	bne.n	4038d0 <main+0x1f0>
		}
	}
		
	init_camera();
  403908:	4b44      	ldr	r3, [pc, #272]	; (403a1c <main+0x33c>)
  40390a:	58eb      	ldr	r3, [r5, r3]
  40390c:	4798      	blx	r3
	
	configure_camera();
  40390e:	4b44      	ldr	r3, [pc, #272]	; (403a20 <main+0x340>)
  403910:	58eb      	ldr	r3, [r5, r3]
  403912:	4798      	blx	r3
	
 	write_wifi_command("set sy c p off \r\n", 5);
  403914:	2105      	movs	r1, #5
  403916:	4b43      	ldr	r3, [pc, #268]	; (403a24 <main+0x344>)
  403918:	447b      	add	r3, pc
  40391a:	4618      	mov	r0, r3
  40391c:	4b2c      	ldr	r3, [pc, #176]	; (4039d0 <main+0x2f0>)
  40391e:	58eb      	ldr	r3, [r5, r3]
  403920:	4798      	blx	r3
 	write_wifi_command("set sy c e off \r\n", 5);
  403922:	2105      	movs	r1, #5
  403924:	4b40      	ldr	r3, [pc, #256]	; (403a28 <main+0x348>)
  403926:	447b      	add	r3, pc
  403928:	4618      	mov	r0, r3
  40392a:	4b29      	ldr	r3, [pc, #164]	; (4039d0 <main+0x2f0>)
  40392c:	58eb      	ldr	r3, [r5, r3]
  40392e:	4798      	blx	r3
	
	write_wifi_command("tcpc 18.191.102.247 8000 \r\n", 10);
  403930:	210a      	movs	r1, #10
  403932:	4b3e      	ldr	r3, [pc, #248]	; (403a2c <main+0x34c>)
  403934:	447b      	add	r3, pc
  403936:	4618      	mov	r0, r3
  403938:	4b25      	ldr	r3, [pc, #148]	; (4039d0 <main+0x2f0>)
  40393a:	58eb      	ldr	r3, [r5, r3]
  40393c:	4798      	blx	r3
	
	while(1)
	{
		switch(state_position)
  40393e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
  403940:	3b01      	subs	r3, #1
  403942:	2b03      	cmp	r3, #3
  403944:	f200 8181 	bhi.w	403c4a <main+0x56a>
  403948:	a202      	add	r2, pc, #8	; (adr r2, 403954 <main+0x274>)
  40394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40394e:	441a      	add	r2, r3
  403950:	4710      	bx	r2
  403952:	bf00      	nop
  403954:	00000011 	.word	0x00000011
  403958:	000000e5 	.word	0x000000e5
  40395c:	00000187 	.word	0x00000187
  403960:	00000245 	.word	0x00000245
		{
			case 1:
				if (web_setup_flag == true)
  403964:	4b2a      	ldr	r3, [pc, #168]	; (403a10 <main+0x330>)
  403966:	58eb      	ldr	r3, [r5, r3]
  403968:	781b      	ldrb	r3, [r3, #0]
  40396a:	b2db      	uxtb	r3, r3
  40396c:	2b00      	cmp	r3, #0
  40396e:	d017      	beq.n	4039a0 <main+0x2c0>
				{
					write_wifi_command("setup web \r\n", 100);
  403970:	2164      	movs	r1, #100	; 0x64
  403972:	4b2f      	ldr	r3, [pc, #188]	; (403a30 <main+0x350>)
  403974:	447b      	add	r3, pc
  403976:	4618      	mov	r0, r3
  403978:	4b15      	ldr	r3, [pc, #84]	; (4039d0 <main+0x2f0>)
  40397a:	58eb      	ldr	r3, [r5, r3]
  40397c:	4798      	blx	r3
					web_setup_flag = false;
  40397e:	4b24      	ldr	r3, [pc, #144]	; (403a10 <main+0x330>)
  403980:	58eb      	ldr	r3, [r5, r3]
  403982:	461a      	mov	r2, r3
  403984:	2300      	movs	r3, #0
  403986:	7013      	strb	r3, [r2, #0]
					
					while (ioport_get_pin_level(NETWORK_STATUS_PIN) == false)
  403988:	bf00      	nop
  40398a:	2020      	movs	r0, #32
  40398c:	4b29      	ldr	r3, [pc, #164]	; (403a34 <main+0x354>)
  40398e:	447b      	add	r3, pc
  403990:	4798      	blx	r3
  403992:	4603      	mov	r3, r0
  403994:	f083 0301 	eor.w	r3, r3, #1
  403998:	b2db      	uxtb	r3, r3
  40399a:	2b00      	cmp	r3, #0
  40399c:	d1f5      	bne.n	40398a <main+0x2aa>
				
				else
				{
					state_position = 2;
				}
				break;
  40399e:	e156      	b.n	403c4e <main+0x56e>
					state_position = 2;
  4039a0:	2302      	movs	r3, #2
  4039a2:	657b      	str	r3, [r7, #84]	; 0x54
				break;
  4039a4:	e153      	b.n	403c4e <main+0x56e>
  4039a6:	bf00      	nop
  4039a8:	400e1450 	.word	0x400e1450
  4039ac:	000066ae 	.word	0x000066ae
  4039b0:	00000218 	.word	0x00000218
  4039b4:	00000214 	.word	0x00000214
  4039b8:	00000150 	.word	0x00000150
  4039bc:	000000d0 	.word	0x000000d0
  4039c0:	000000bc 	.word	0x000000bc
  4039c4:	000001c4 	.word	0x000001c4
  4039c8:	000001ac 	.word	0x000001ac
  4039cc:	0000625c 	.word	0x0000625c
  4039d0:	00000174 	.word	0x00000174
  4039d4:	00006266 	.word	0x00006266
  4039d8:	0000626c 	.word	0x0000626c
  4039dc:	00006276 	.word	0x00006276
  4039e0:	00006284 	.word	0x00006284
  4039e4:	0000628e 	.word	0x0000628e
  4039e8:	00006294 	.word	0x00006294
  4039ec:	0000629a 	.word	0x0000629a
  4039f0:	000062c0 	.word	0x000062c0
  4039f4:	00000058 	.word	0x00000058
  4039f8:	fffffe7b 	.word	0xfffffe7b
  4039fc:	fffffe5d 	.word	0xfffffe5d
  403a00:	0000008c 	.word	0x0000008c
  403a04:	000001b8 	.word	0x000001b8
  403a08:	fffffe09 	.word	0xfffffe09
  403a0c:	fffffdeb 	.word	0xfffffdeb
  403a10:	00000020 	.word	0x00000020
  403a14:	00006178 	.word	0x00006178
  403a18:	fffffd97 	.word	0xfffffd97
  403a1c:	00000098 	.word	0x00000098
  403a20:	00000038 	.word	0x00000038
  403a24:	00006150 	.word	0x00006150
  403a28:	00006156 	.word	0x00006156
  403a2c:	0000615c 	.word	0x0000615c
  403a30:	000060e4 	.word	0x000060e4
  403a34:	fffffd01 	.word	0xfffffd01
			
			case 2:
				if (ioport_get_pin_level(NETWORK_STATUS_PIN) == true)
  403a38:	2020      	movs	r0, #32
  403a3a:	4b85      	ldr	r3, [pc, #532]	; (403c50 <main+0x570>)
  403a3c:	447b      	add	r3, pc
  403a3e:	4798      	blx	r3
  403a40:	4603      	mov	r3, r0
  403a42:	2b00      	cmp	r3, #0
  403a44:	d002      	beq.n	403a4c <main+0x36c>
				{
					state_position = 3;
  403a46:	2303      	movs	r3, #3
  403a48:	657b      	str	r3, [r7, #84]	; 0x54
					delay_ms(100);
					ioport_set_pin_level(WIFI_RESET_PIN, true);
					
					state_position = 1;
				}
				break;
  403a4a:	e100      	b.n	403c4e <main+0x56e>
					ioport_set_pin_level(WIFI_RESET_PIN, false);
  403a4c:	2100      	movs	r1, #0
  403a4e:	2000      	movs	r0, #0
  403a50:	4b80      	ldr	r3, [pc, #512]	; (403c54 <main+0x574>)
  403a52:	447b      	add	r3, pc
  403a54:	4798      	blx	r3
					delay_ms(100);
  403a56:	4b80      	ldr	r3, [pc, #512]	; (403c58 <main+0x578>)
  403a58:	447b      	add	r3, pc
  403a5a:	4798      	blx	r3
  403a5c:	4603      	mov	r3, r0
  403a5e:	4619      	mov	r1, r3
  403a60:	f04f 0200 	mov.w	r2, #0
  403a64:	460b      	mov	r3, r1
  403a66:	4614      	mov	r4, r2
  403a68:	18db      	adds	r3, r3, r3
  403a6a:	eb44 0404 	adc.w	r4, r4, r4
  403a6e:	185b      	adds	r3, r3, r1
  403a70:	eb44 0402 	adc.w	r4, r4, r2
  403a74:	0160      	lsls	r0, r4, #5
  403a76:	6378      	str	r0, [r7, #52]	; 0x34
  403a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
  403a7a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403a7e:	6378      	str	r0, [r7, #52]	; 0x34
  403a80:	0158      	lsls	r0, r3, #5
  403a82:	6338      	str	r0, [r7, #48]	; 0x30
  403a84:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
  403a88:	eb18 0803 	adds.w	r8, r8, r3
  403a8c:	eb49 0904 	adc.w	r9, r9, r4
  403a90:	4643      	mov	r3, r8
  403a92:	464c      	mov	r4, r9
  403a94:	185b      	adds	r3, r3, r1
  403a96:	eb44 0402 	adc.w	r4, r4, r2
  403a9a:	f243 61af 	movw	r1, #13999	; 0x36af
  403a9e:	f04f 0200 	mov.w	r2, #0
  403aa2:	eb13 0801 	adds.w	r8, r3, r1
  403aa6:	eb44 0902 	adc.w	r9, r4, r2
  403aaa:	4640      	mov	r0, r8
  403aac:	4649      	mov	r1, r9
  403aae:	4b6b      	ldr	r3, [pc, #428]	; (403c5c <main+0x57c>)
  403ab0:	58eb      	ldr	r3, [r5, r3]
  403ab2:	461c      	mov	r4, r3
  403ab4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403ab8:	f04f 0300 	mov.w	r3, #0
  403abc:	47a0      	blx	r4
  403abe:	4603      	mov	r3, r0
  403ac0:	460c      	mov	r4, r1
  403ac2:	4618      	mov	r0, r3
  403ac4:	4b66      	ldr	r3, [pc, #408]	; (403c60 <main+0x580>)
  403ac6:	58eb      	ldr	r3, [r5, r3]
  403ac8:	4798      	blx	r3
					ioport_set_pin_level(WIFI_RESET_PIN, true);
  403aca:	2101      	movs	r1, #1
  403acc:	2000      	movs	r0, #0
  403ace:	4b65      	ldr	r3, [pc, #404]	; (403c64 <main+0x584>)
  403ad0:	447b      	add	r3, pc
  403ad2:	4798      	blx	r3
					state_position = 1;
  403ad4:	2301      	movs	r3, #1
  403ad6:	657b      	str	r3, [r7, #84]	; 0x54
				break;
  403ad8:	e0b9      	b.n	403c4e <main+0x56e>
			
			case 3:
				write_wifi_command("poll all \r\n", 5);
  403ada:	2105      	movs	r1, #5
  403adc:	4b62      	ldr	r3, [pc, #392]	; (403c68 <main+0x588>)
  403ade:	447b      	add	r3, pc
  403ae0:	4618      	mov	r0, r3
  403ae2:	4b62      	ldr	r3, [pc, #392]	; (403c6c <main+0x58c>)
  403ae4:	58eb      	ldr	r3, [r5, r3]
  403ae6:	4798      	blx	r3
				
				if (none_flag == true)
  403ae8:	4b61      	ldr	r3, [pc, #388]	; (403c70 <main+0x590>)
  403aea:	58eb      	ldr	r3, [r5, r3]
  403aec:	781b      	ldrb	r3, [r3, #0]
  403aee:	b2db      	uxtb	r3, r3
  403af0:	2b00      	cmp	r3, #0
  403af2:	d04e      	beq.n	403b92 <main+0x4b2>
				{
					delay_ms(1000);
  403af4:	4b5f      	ldr	r3, [pc, #380]	; (403c74 <main+0x594>)
  403af6:	447b      	add	r3, pc
  403af8:	4798      	blx	r3
  403afa:	4603      	mov	r3, r0
  403afc:	4619      	mov	r1, r3
  403afe:	f04f 0200 	mov.w	r2, #0
  403b02:	460b      	mov	r3, r1
  403b04:	4614      	mov	r4, r2
  403b06:	0160      	lsls	r0, r4, #5
  403b08:	62f8      	str	r0, [r7, #44]	; 0x2c
  403b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  403b0c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  403b10:	62f8      	str	r0, [r7, #44]	; 0x2c
  403b12:	015b      	lsls	r3, r3, #5
  403b14:	62bb      	str	r3, [r7, #40]	; 0x28
  403b16:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
  403b1a:	1a5b      	subs	r3, r3, r1
  403b1c:	eb64 0402 	sbc.w	r4, r4, r2
  403b20:	00a0      	lsls	r0, r4, #2
  403b22:	6278      	str	r0, [r7, #36]	; 0x24
  403b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
  403b26:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  403b2a:	6278      	str	r0, [r7, #36]	; 0x24
  403b2c:	009b      	lsls	r3, r3, #2
  403b2e:	623b      	str	r3, [r7, #32]
  403b30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
  403b34:	185b      	adds	r3, r3, r1
  403b36:	eb44 0402 	adc.w	r4, r4, r2
  403b3a:	00e2      	lsls	r2, r4, #3
  403b3c:	61fa      	str	r2, [r7, #28]
  403b3e:	69fa      	ldr	r2, [r7, #28]
  403b40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  403b44:	61fa      	str	r2, [r7, #28]
  403b46:	00db      	lsls	r3, r3, #3
  403b48:	61bb      	str	r3, [r7, #24]
  403b4a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  403b4e:	4619      	mov	r1, r3
  403b50:	4622      	mov	r2, r4
  403b52:	f243 63af 	movw	r3, #13999	; 0x36af
  403b56:	f04f 0400 	mov.w	r4, #0
  403b5a:	eb11 0803 	adds.w	r8, r1, r3
  403b5e:	eb42 0904 	adc.w	r9, r2, r4
  403b62:	4640      	mov	r0, r8
  403b64:	4649      	mov	r1, r9
  403b66:	4b3d      	ldr	r3, [pc, #244]	; (403c5c <main+0x57c>)
  403b68:	58eb      	ldr	r3, [r5, r3]
  403b6a:	461c      	mov	r4, r3
  403b6c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403b70:	f04f 0300 	mov.w	r3, #0
  403b74:	47a0      	blx	r4
  403b76:	4603      	mov	r3, r0
  403b78:	460c      	mov	r4, r1
  403b7a:	4618      	mov	r0, r3
  403b7c:	4b38      	ldr	r3, [pc, #224]	; (403c60 <main+0x580>)
  403b7e:	58eb      	ldr	r3, [r5, r3]
  403b80:	4798      	blx	r3
					none_flag = false;
  403b82:	4b3b      	ldr	r3, [pc, #236]	; (403c70 <main+0x590>)
  403b84:	58eb      	ldr	r3, [r5, r3]
  403b86:	461a      	mov	r2, r3
  403b88:	2300      	movs	r3, #0
  403b8a:	7013      	strb	r3, [r2, #0]
					state_position = 1;
  403b8c:	2301      	movs	r3, #1
  403b8e:	657b      	str	r3, [r7, #84]	; 0x54
				}
				else
				{
					state_position = 4;
				}
				break;
  403b90:	e05d      	b.n	403c4e <main+0x56e>
					state_position = 4;
  403b92:	2304      	movs	r3, #4
  403b94:	657b      	str	r3, [r7, #84]	; 0x54
				break;
  403b96:	e05a      	b.n	403c4e <main+0x56e>
			
			case 4:
				if (start_capture() == 1)
  403b98:	4b37      	ldr	r3, [pc, #220]	; (403c78 <main+0x598>)
  403b9a:	58eb      	ldr	r3, [r5, r3]
  403b9c:	4798      	blx	r3
  403b9e:	4603      	mov	r3, r0
  403ba0:	2b01      	cmp	r3, #1
  403ba2:	d14f      	bne.n	403c44 <main+0x564>
				{
					write_image_to_file();
  403ba4:	4b35      	ldr	r3, [pc, #212]	; (403c7c <main+0x59c>)
  403ba6:	58eb      	ldr	r3, [r5, r3]
  403ba8:	4798      	blx	r3
					delay_ms(1500);
  403baa:	4b35      	ldr	r3, [pc, #212]	; (403c80 <main+0x5a0>)
  403bac:	447b      	add	r3, pc
  403bae:	4798      	blx	r3
  403bb0:	4603      	mov	r3, r0
  403bb2:	4619      	mov	r1, r3
  403bb4:	f04f 0200 	mov.w	r2, #0
  403bb8:	460b      	mov	r3, r1
  403bba:	4614      	mov	r4, r2
  403bbc:	18db      	adds	r3, r3, r3
  403bbe:	eb44 0404 	adc.w	r4, r4, r4
  403bc2:	185b      	adds	r3, r3, r1
  403bc4:	eb44 0402 	adc.w	r4, r4, r2
  403bc8:	0120      	lsls	r0, r4, #4
  403bca:	6178      	str	r0, [r7, #20]
  403bcc:	6978      	ldr	r0, [r7, #20]
  403bce:	ea40 7013 	orr.w	r0, r0, r3, lsr #28
  403bd2:	6178      	str	r0, [r7, #20]
  403bd4:	011b      	lsls	r3, r3, #4
  403bd6:	613b      	str	r3, [r7, #16]
  403bd8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  403bdc:	1a5b      	subs	r3, r3, r1
  403bde:	eb64 0402 	sbc.w	r4, r4, r2
  403be2:	00e0      	lsls	r0, r4, #3
  403be4:	60f8      	str	r0, [r7, #12]
  403be6:	68f8      	ldr	r0, [r7, #12]
  403be8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
  403bec:	60f8      	str	r0, [r7, #12]
  403bee:	00db      	lsls	r3, r3, #3
  403bf0:	60bb      	str	r3, [r7, #8]
  403bf2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  403bf6:	1a5b      	subs	r3, r3, r1
  403bf8:	eb64 0402 	sbc.w	r4, r4, r2
  403bfc:	00a2      	lsls	r2, r4, #2
  403bfe:	607a      	str	r2, [r7, #4]
  403c00:	687a      	ldr	r2, [r7, #4]
  403c02:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  403c06:	607a      	str	r2, [r7, #4]
  403c08:	009b      	lsls	r3, r3, #2
  403c0a:	603b      	str	r3, [r7, #0]
  403c0c:	e9d7 3400 	ldrd	r3, r4, [r7]
  403c10:	4619      	mov	r1, r3
  403c12:	4622      	mov	r2, r4
  403c14:	f243 63af 	movw	r3, #13999	; 0x36af
  403c18:	f04f 0400 	mov.w	r4, #0
  403c1c:	eb11 0803 	adds.w	r8, r1, r3
  403c20:	eb42 0904 	adc.w	r9, r2, r4
  403c24:	4640      	mov	r0, r8
  403c26:	4649      	mov	r1, r9
  403c28:	4b0c      	ldr	r3, [pc, #48]	; (403c5c <main+0x57c>)
  403c2a:	58eb      	ldr	r3, [r5, r3]
  403c2c:	461c      	mov	r4, r3
  403c2e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  403c32:	f04f 0300 	mov.w	r3, #0
  403c36:	47a0      	blx	r4
  403c38:	4603      	mov	r3, r0
  403c3a:	460c      	mov	r4, r1
  403c3c:	4618      	mov	r0, r3
  403c3e:	4b08      	ldr	r3, [pc, #32]	; (403c60 <main+0x580>)
  403c40:	58eb      	ldr	r3, [r5, r3]
  403c42:	4798      	blx	r3
				}
				
				state_position = 1;
  403c44:	2301      	movs	r3, #1
  403c46:	657b      	str	r3, [r7, #84]	; 0x54
				break;
  403c48:	e001      	b.n	403c4e <main+0x56e>
			
			default:
				state_position = 1;
  403c4a:	2301      	movs	r3, #1
  403c4c:	657b      	str	r3, [r7, #84]	; 0x54
		switch(state_position)
  403c4e:	e676      	b.n	40393e <main+0x25e>
  403c50:	fffffc53 	.word	0xfffffc53
  403c54:	fffffbd3 	.word	0xfffffbd3
  403c58:	fffffbb5 	.word	0xfffffbb5
  403c5c:	0000008c 	.word	0x0000008c
  403c60:	000001b8 	.word	0x000001b8
  403c64:	fffffb55 	.word	0xfffffb55
  403c68:	00005fce 	.word	0x00005fce
  403c6c:	00000174 	.word	0x00000174
  403c70:	000001c8 	.word	0x000001c8
  403c74:	fffffb17 	.word	0xfffffb17
  403c78:	000001bc 	.word	0x000001bc
  403c7c:	0000019c 	.word	0x0000019c
  403c80:	fffffa61 	.word	0xfffffa61

00403c84 <__aeabi_uldivmod>:
  403c84:	b953      	cbnz	r3, 403c9c <__aeabi_uldivmod+0x18>
  403c86:	b94a      	cbnz	r2, 403c9c <__aeabi_uldivmod+0x18>
  403c88:	2900      	cmp	r1, #0
  403c8a:	bf08      	it	eq
  403c8c:	2800      	cmpeq	r0, #0
  403c8e:	bf1c      	itt	ne
  403c90:	f04f 31ff 	movne.w	r1, #4294967295
  403c94:	f04f 30ff 	movne.w	r0, #4294967295
  403c98:	f000 b97a 	b.w	403f90 <__aeabi_idiv0>
  403c9c:	f1ad 0c08 	sub.w	ip, sp, #8
  403ca0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403ca4:	f000 f806 	bl	403cb4 <__udivmoddi4>
  403ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
  403cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403cb0:	b004      	add	sp, #16
  403cb2:	4770      	bx	lr

00403cb4 <__udivmoddi4>:
  403cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403cb8:	468c      	mov	ip, r1
  403cba:	460d      	mov	r5, r1
  403cbc:	4604      	mov	r4, r0
  403cbe:	9e08      	ldr	r6, [sp, #32]
  403cc0:	2b00      	cmp	r3, #0
  403cc2:	d151      	bne.n	403d68 <__udivmoddi4+0xb4>
  403cc4:	428a      	cmp	r2, r1
  403cc6:	4617      	mov	r7, r2
  403cc8:	d96d      	bls.n	403da6 <__udivmoddi4+0xf2>
  403cca:	fab2 fe82 	clz	lr, r2
  403cce:	f1be 0f00 	cmp.w	lr, #0
  403cd2:	d00b      	beq.n	403cec <__udivmoddi4+0x38>
  403cd4:	f1ce 0c20 	rsb	ip, lr, #32
  403cd8:	fa01 f50e 	lsl.w	r5, r1, lr
  403cdc:	fa20 fc0c 	lsr.w	ip, r0, ip
  403ce0:	fa02 f70e 	lsl.w	r7, r2, lr
  403ce4:	ea4c 0c05 	orr.w	ip, ip, r5
  403ce8:	fa00 f40e 	lsl.w	r4, r0, lr
  403cec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403cf0:	0c25      	lsrs	r5, r4, #16
  403cf2:	fbbc f8fa 	udiv	r8, ip, sl
  403cf6:	fa1f f987 	uxth.w	r9, r7
  403cfa:	fb0a cc18 	mls	ip, sl, r8, ip
  403cfe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403d02:	fb08 f309 	mul.w	r3, r8, r9
  403d06:	42ab      	cmp	r3, r5
  403d08:	d90a      	bls.n	403d20 <__udivmoddi4+0x6c>
  403d0a:	19ed      	adds	r5, r5, r7
  403d0c:	f108 32ff 	add.w	r2, r8, #4294967295
  403d10:	f080 8123 	bcs.w	403f5a <__udivmoddi4+0x2a6>
  403d14:	42ab      	cmp	r3, r5
  403d16:	f240 8120 	bls.w	403f5a <__udivmoddi4+0x2a6>
  403d1a:	f1a8 0802 	sub.w	r8, r8, #2
  403d1e:	443d      	add	r5, r7
  403d20:	1aed      	subs	r5, r5, r3
  403d22:	b2a4      	uxth	r4, r4
  403d24:	fbb5 f0fa 	udiv	r0, r5, sl
  403d28:	fb0a 5510 	mls	r5, sl, r0, r5
  403d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403d30:	fb00 f909 	mul.w	r9, r0, r9
  403d34:	45a1      	cmp	r9, r4
  403d36:	d909      	bls.n	403d4c <__udivmoddi4+0x98>
  403d38:	19e4      	adds	r4, r4, r7
  403d3a:	f100 33ff 	add.w	r3, r0, #4294967295
  403d3e:	f080 810a 	bcs.w	403f56 <__udivmoddi4+0x2a2>
  403d42:	45a1      	cmp	r9, r4
  403d44:	f240 8107 	bls.w	403f56 <__udivmoddi4+0x2a2>
  403d48:	3802      	subs	r0, #2
  403d4a:	443c      	add	r4, r7
  403d4c:	eba4 0409 	sub.w	r4, r4, r9
  403d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403d54:	2100      	movs	r1, #0
  403d56:	2e00      	cmp	r6, #0
  403d58:	d061      	beq.n	403e1e <__udivmoddi4+0x16a>
  403d5a:	fa24 f40e 	lsr.w	r4, r4, lr
  403d5e:	2300      	movs	r3, #0
  403d60:	6034      	str	r4, [r6, #0]
  403d62:	6073      	str	r3, [r6, #4]
  403d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d68:	428b      	cmp	r3, r1
  403d6a:	d907      	bls.n	403d7c <__udivmoddi4+0xc8>
  403d6c:	2e00      	cmp	r6, #0
  403d6e:	d054      	beq.n	403e1a <__udivmoddi4+0x166>
  403d70:	2100      	movs	r1, #0
  403d72:	e886 0021 	stmia.w	r6, {r0, r5}
  403d76:	4608      	mov	r0, r1
  403d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d7c:	fab3 f183 	clz	r1, r3
  403d80:	2900      	cmp	r1, #0
  403d82:	f040 808e 	bne.w	403ea2 <__udivmoddi4+0x1ee>
  403d86:	42ab      	cmp	r3, r5
  403d88:	d302      	bcc.n	403d90 <__udivmoddi4+0xdc>
  403d8a:	4282      	cmp	r2, r0
  403d8c:	f200 80fa 	bhi.w	403f84 <__udivmoddi4+0x2d0>
  403d90:	1a84      	subs	r4, r0, r2
  403d92:	eb65 0503 	sbc.w	r5, r5, r3
  403d96:	2001      	movs	r0, #1
  403d98:	46ac      	mov	ip, r5
  403d9a:	2e00      	cmp	r6, #0
  403d9c:	d03f      	beq.n	403e1e <__udivmoddi4+0x16a>
  403d9e:	e886 1010 	stmia.w	r6, {r4, ip}
  403da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403da6:	b912      	cbnz	r2, 403dae <__udivmoddi4+0xfa>
  403da8:	2701      	movs	r7, #1
  403daa:	fbb7 f7f2 	udiv	r7, r7, r2
  403dae:	fab7 fe87 	clz	lr, r7
  403db2:	f1be 0f00 	cmp.w	lr, #0
  403db6:	d134      	bne.n	403e22 <__udivmoddi4+0x16e>
  403db8:	1beb      	subs	r3, r5, r7
  403dba:	0c3a      	lsrs	r2, r7, #16
  403dbc:	fa1f fc87 	uxth.w	ip, r7
  403dc0:	2101      	movs	r1, #1
  403dc2:	fbb3 f8f2 	udiv	r8, r3, r2
  403dc6:	0c25      	lsrs	r5, r4, #16
  403dc8:	fb02 3318 	mls	r3, r2, r8, r3
  403dcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403dd0:	fb0c f308 	mul.w	r3, ip, r8
  403dd4:	42ab      	cmp	r3, r5
  403dd6:	d907      	bls.n	403de8 <__udivmoddi4+0x134>
  403dd8:	19ed      	adds	r5, r5, r7
  403dda:	f108 30ff 	add.w	r0, r8, #4294967295
  403dde:	d202      	bcs.n	403de6 <__udivmoddi4+0x132>
  403de0:	42ab      	cmp	r3, r5
  403de2:	f200 80d1 	bhi.w	403f88 <__udivmoddi4+0x2d4>
  403de6:	4680      	mov	r8, r0
  403de8:	1aed      	subs	r5, r5, r3
  403dea:	b2a3      	uxth	r3, r4
  403dec:	fbb5 f0f2 	udiv	r0, r5, r2
  403df0:	fb02 5510 	mls	r5, r2, r0, r5
  403df4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403df8:	fb0c fc00 	mul.w	ip, ip, r0
  403dfc:	45a4      	cmp	ip, r4
  403dfe:	d907      	bls.n	403e10 <__udivmoddi4+0x15c>
  403e00:	19e4      	adds	r4, r4, r7
  403e02:	f100 33ff 	add.w	r3, r0, #4294967295
  403e06:	d202      	bcs.n	403e0e <__udivmoddi4+0x15a>
  403e08:	45a4      	cmp	ip, r4
  403e0a:	f200 80b8 	bhi.w	403f7e <__udivmoddi4+0x2ca>
  403e0e:	4618      	mov	r0, r3
  403e10:	eba4 040c 	sub.w	r4, r4, ip
  403e14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403e18:	e79d      	b.n	403d56 <__udivmoddi4+0xa2>
  403e1a:	4631      	mov	r1, r6
  403e1c:	4630      	mov	r0, r6
  403e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e22:	f1ce 0420 	rsb	r4, lr, #32
  403e26:	fa05 f30e 	lsl.w	r3, r5, lr
  403e2a:	fa07 f70e 	lsl.w	r7, r7, lr
  403e2e:	fa20 f804 	lsr.w	r8, r0, r4
  403e32:	0c3a      	lsrs	r2, r7, #16
  403e34:	fa25 f404 	lsr.w	r4, r5, r4
  403e38:	ea48 0803 	orr.w	r8, r8, r3
  403e3c:	fbb4 f1f2 	udiv	r1, r4, r2
  403e40:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403e44:	fb02 4411 	mls	r4, r2, r1, r4
  403e48:	fa1f fc87 	uxth.w	ip, r7
  403e4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403e50:	fb01 f30c 	mul.w	r3, r1, ip
  403e54:	42ab      	cmp	r3, r5
  403e56:	fa00 f40e 	lsl.w	r4, r0, lr
  403e5a:	d909      	bls.n	403e70 <__udivmoddi4+0x1bc>
  403e5c:	19ed      	adds	r5, r5, r7
  403e5e:	f101 30ff 	add.w	r0, r1, #4294967295
  403e62:	f080 808a 	bcs.w	403f7a <__udivmoddi4+0x2c6>
  403e66:	42ab      	cmp	r3, r5
  403e68:	f240 8087 	bls.w	403f7a <__udivmoddi4+0x2c6>
  403e6c:	3902      	subs	r1, #2
  403e6e:	443d      	add	r5, r7
  403e70:	1aeb      	subs	r3, r5, r3
  403e72:	fa1f f588 	uxth.w	r5, r8
  403e76:	fbb3 f0f2 	udiv	r0, r3, r2
  403e7a:	fb02 3310 	mls	r3, r2, r0, r3
  403e7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e82:	fb00 f30c 	mul.w	r3, r0, ip
  403e86:	42ab      	cmp	r3, r5
  403e88:	d907      	bls.n	403e9a <__udivmoddi4+0x1e6>
  403e8a:	19ed      	adds	r5, r5, r7
  403e8c:	f100 38ff 	add.w	r8, r0, #4294967295
  403e90:	d26f      	bcs.n	403f72 <__udivmoddi4+0x2be>
  403e92:	42ab      	cmp	r3, r5
  403e94:	d96d      	bls.n	403f72 <__udivmoddi4+0x2be>
  403e96:	3802      	subs	r0, #2
  403e98:	443d      	add	r5, r7
  403e9a:	1aeb      	subs	r3, r5, r3
  403e9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403ea0:	e78f      	b.n	403dc2 <__udivmoddi4+0x10e>
  403ea2:	f1c1 0720 	rsb	r7, r1, #32
  403ea6:	fa22 f807 	lsr.w	r8, r2, r7
  403eaa:	408b      	lsls	r3, r1
  403eac:	fa05 f401 	lsl.w	r4, r5, r1
  403eb0:	ea48 0303 	orr.w	r3, r8, r3
  403eb4:	fa20 fe07 	lsr.w	lr, r0, r7
  403eb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403ebc:	40fd      	lsrs	r5, r7
  403ebe:	ea4e 0e04 	orr.w	lr, lr, r4
  403ec2:	fbb5 f9fc 	udiv	r9, r5, ip
  403ec6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403eca:	fb0c 5519 	mls	r5, ip, r9, r5
  403ece:	fa1f f883 	uxth.w	r8, r3
  403ed2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403ed6:	fb09 f408 	mul.w	r4, r9, r8
  403eda:	42ac      	cmp	r4, r5
  403edc:	fa02 f201 	lsl.w	r2, r2, r1
  403ee0:	fa00 fa01 	lsl.w	sl, r0, r1
  403ee4:	d908      	bls.n	403ef8 <__udivmoddi4+0x244>
  403ee6:	18ed      	adds	r5, r5, r3
  403ee8:	f109 30ff 	add.w	r0, r9, #4294967295
  403eec:	d243      	bcs.n	403f76 <__udivmoddi4+0x2c2>
  403eee:	42ac      	cmp	r4, r5
  403ef0:	d941      	bls.n	403f76 <__udivmoddi4+0x2c2>
  403ef2:	f1a9 0902 	sub.w	r9, r9, #2
  403ef6:	441d      	add	r5, r3
  403ef8:	1b2d      	subs	r5, r5, r4
  403efa:	fa1f fe8e 	uxth.w	lr, lr
  403efe:	fbb5 f0fc 	udiv	r0, r5, ip
  403f02:	fb0c 5510 	mls	r5, ip, r0, r5
  403f06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403f0a:	fb00 f808 	mul.w	r8, r0, r8
  403f0e:	45a0      	cmp	r8, r4
  403f10:	d907      	bls.n	403f22 <__udivmoddi4+0x26e>
  403f12:	18e4      	adds	r4, r4, r3
  403f14:	f100 35ff 	add.w	r5, r0, #4294967295
  403f18:	d229      	bcs.n	403f6e <__udivmoddi4+0x2ba>
  403f1a:	45a0      	cmp	r8, r4
  403f1c:	d927      	bls.n	403f6e <__udivmoddi4+0x2ba>
  403f1e:	3802      	subs	r0, #2
  403f20:	441c      	add	r4, r3
  403f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403f26:	eba4 0408 	sub.w	r4, r4, r8
  403f2a:	fba0 8902 	umull	r8, r9, r0, r2
  403f2e:	454c      	cmp	r4, r9
  403f30:	46c6      	mov	lr, r8
  403f32:	464d      	mov	r5, r9
  403f34:	d315      	bcc.n	403f62 <__udivmoddi4+0x2ae>
  403f36:	d012      	beq.n	403f5e <__udivmoddi4+0x2aa>
  403f38:	b156      	cbz	r6, 403f50 <__udivmoddi4+0x29c>
  403f3a:	ebba 030e 	subs.w	r3, sl, lr
  403f3e:	eb64 0405 	sbc.w	r4, r4, r5
  403f42:	fa04 f707 	lsl.w	r7, r4, r7
  403f46:	40cb      	lsrs	r3, r1
  403f48:	431f      	orrs	r7, r3
  403f4a:	40cc      	lsrs	r4, r1
  403f4c:	6037      	str	r7, [r6, #0]
  403f4e:	6074      	str	r4, [r6, #4]
  403f50:	2100      	movs	r1, #0
  403f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f56:	4618      	mov	r0, r3
  403f58:	e6f8      	b.n	403d4c <__udivmoddi4+0x98>
  403f5a:	4690      	mov	r8, r2
  403f5c:	e6e0      	b.n	403d20 <__udivmoddi4+0x6c>
  403f5e:	45c2      	cmp	sl, r8
  403f60:	d2ea      	bcs.n	403f38 <__udivmoddi4+0x284>
  403f62:	ebb8 0e02 	subs.w	lr, r8, r2
  403f66:	eb69 0503 	sbc.w	r5, r9, r3
  403f6a:	3801      	subs	r0, #1
  403f6c:	e7e4      	b.n	403f38 <__udivmoddi4+0x284>
  403f6e:	4628      	mov	r0, r5
  403f70:	e7d7      	b.n	403f22 <__udivmoddi4+0x26e>
  403f72:	4640      	mov	r0, r8
  403f74:	e791      	b.n	403e9a <__udivmoddi4+0x1e6>
  403f76:	4681      	mov	r9, r0
  403f78:	e7be      	b.n	403ef8 <__udivmoddi4+0x244>
  403f7a:	4601      	mov	r1, r0
  403f7c:	e778      	b.n	403e70 <__udivmoddi4+0x1bc>
  403f7e:	3802      	subs	r0, #2
  403f80:	443c      	add	r4, r7
  403f82:	e745      	b.n	403e10 <__udivmoddi4+0x15c>
  403f84:	4608      	mov	r0, r1
  403f86:	e708      	b.n	403d9a <__udivmoddi4+0xe6>
  403f88:	f1a8 0802 	sub.w	r8, r8, #2
  403f8c:	443d      	add	r5, r7
  403f8e:	e72b      	b.n	403de8 <__udivmoddi4+0x134>

00403f90 <__aeabi_idiv0>:
  403f90:	4770      	bx	lr
  403f92:	bf00      	nop

00403f94 <__libc_init_array>:
  403f94:	b570      	push	{r4, r5, r6, lr}
  403f96:	4e0f      	ldr	r6, [pc, #60]	; (403fd4 <__libc_init_array+0x40>)
  403f98:	4d0f      	ldr	r5, [pc, #60]	; (403fd8 <__libc_init_array+0x44>)
  403f9a:	1b76      	subs	r6, r6, r5
  403f9c:	10b6      	asrs	r6, r6, #2
  403f9e:	bf18      	it	ne
  403fa0:	2400      	movne	r4, #0
  403fa2:	d005      	beq.n	403fb0 <__libc_init_array+0x1c>
  403fa4:	3401      	adds	r4, #1
  403fa6:	f855 3b04 	ldr.w	r3, [r5], #4
  403faa:	4798      	blx	r3
  403fac:	42a6      	cmp	r6, r4
  403fae:	d1f9      	bne.n	403fa4 <__libc_init_array+0x10>
  403fb0:	4e0a      	ldr	r6, [pc, #40]	; (403fdc <__libc_init_array+0x48>)
  403fb2:	4d0b      	ldr	r5, [pc, #44]	; (403fe0 <__libc_init_array+0x4c>)
  403fb4:	1b76      	subs	r6, r6, r5
  403fb6:	f005 fedb 	bl	409d70 <_init>
  403fba:	10b6      	asrs	r6, r6, #2
  403fbc:	bf18      	it	ne
  403fbe:	2400      	movne	r4, #0
  403fc0:	d006      	beq.n	403fd0 <__libc_init_array+0x3c>
  403fc2:	3401      	adds	r4, #1
  403fc4:	f855 3b04 	ldr.w	r3, [r5], #4
  403fc8:	4798      	blx	r3
  403fca:	42a6      	cmp	r6, r4
  403fcc:	d1f9      	bne.n	403fc2 <__libc_init_array+0x2e>
  403fce:	bd70      	pop	{r4, r5, r6, pc}
  403fd0:	bd70      	pop	{r4, r5, r6, pc}
  403fd2:	bf00      	nop
  403fd4:	00409d7c 	.word	0x00409d7c
  403fd8:	00409d7c 	.word	0x00409d7c
  403fdc:	00409d84 	.word	0x00409d84
  403fe0:	00409d7c 	.word	0x00409d7c

00403fe4 <__itoa>:
  403fe4:	1e93      	subs	r3, r2, #2
  403fe6:	2b22      	cmp	r3, #34	; 0x22
  403fe8:	d810      	bhi.n	40400c <__itoa+0x28>
  403fea:	2a0a      	cmp	r2, #10
  403fec:	b510      	push	{r4, lr}
  403fee:	d006      	beq.n	403ffe <__itoa+0x1a>
  403ff0:	2300      	movs	r3, #0
  403ff2:	460c      	mov	r4, r1
  403ff4:	4419      	add	r1, r3
  403ff6:	f001 fe23 	bl	405c40 <__utoa>
  403ffa:	4620      	mov	r0, r4
  403ffc:	bd10      	pop	{r4, pc}
  403ffe:	2800      	cmp	r0, #0
  404000:	daf6      	bge.n	403ff0 <__itoa+0xc>
  404002:	232d      	movs	r3, #45	; 0x2d
  404004:	700b      	strb	r3, [r1, #0]
  404006:	4240      	negs	r0, r0
  404008:	2301      	movs	r3, #1
  40400a:	e7f2      	b.n	403ff2 <__itoa+0xe>
  40400c:	2000      	movs	r0, #0
  40400e:	7008      	strb	r0, [r1, #0]
  404010:	4770      	bx	lr
  404012:	bf00      	nop

00404014 <itoa>:
  404014:	f7ff bfe6 	b.w	403fe4 <__itoa>

00404018 <memcpy>:
  404018:	4684      	mov	ip, r0
  40401a:	ea41 0300 	orr.w	r3, r1, r0
  40401e:	f013 0303 	ands.w	r3, r3, #3
  404022:	d16d      	bne.n	404100 <memcpy+0xe8>
  404024:	3a40      	subs	r2, #64	; 0x40
  404026:	d341      	bcc.n	4040ac <memcpy+0x94>
  404028:	f851 3b04 	ldr.w	r3, [r1], #4
  40402c:	f840 3b04 	str.w	r3, [r0], #4
  404030:	f851 3b04 	ldr.w	r3, [r1], #4
  404034:	f840 3b04 	str.w	r3, [r0], #4
  404038:	f851 3b04 	ldr.w	r3, [r1], #4
  40403c:	f840 3b04 	str.w	r3, [r0], #4
  404040:	f851 3b04 	ldr.w	r3, [r1], #4
  404044:	f840 3b04 	str.w	r3, [r0], #4
  404048:	f851 3b04 	ldr.w	r3, [r1], #4
  40404c:	f840 3b04 	str.w	r3, [r0], #4
  404050:	f851 3b04 	ldr.w	r3, [r1], #4
  404054:	f840 3b04 	str.w	r3, [r0], #4
  404058:	f851 3b04 	ldr.w	r3, [r1], #4
  40405c:	f840 3b04 	str.w	r3, [r0], #4
  404060:	f851 3b04 	ldr.w	r3, [r1], #4
  404064:	f840 3b04 	str.w	r3, [r0], #4
  404068:	f851 3b04 	ldr.w	r3, [r1], #4
  40406c:	f840 3b04 	str.w	r3, [r0], #4
  404070:	f851 3b04 	ldr.w	r3, [r1], #4
  404074:	f840 3b04 	str.w	r3, [r0], #4
  404078:	f851 3b04 	ldr.w	r3, [r1], #4
  40407c:	f840 3b04 	str.w	r3, [r0], #4
  404080:	f851 3b04 	ldr.w	r3, [r1], #4
  404084:	f840 3b04 	str.w	r3, [r0], #4
  404088:	f851 3b04 	ldr.w	r3, [r1], #4
  40408c:	f840 3b04 	str.w	r3, [r0], #4
  404090:	f851 3b04 	ldr.w	r3, [r1], #4
  404094:	f840 3b04 	str.w	r3, [r0], #4
  404098:	f851 3b04 	ldr.w	r3, [r1], #4
  40409c:	f840 3b04 	str.w	r3, [r0], #4
  4040a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040a4:	f840 3b04 	str.w	r3, [r0], #4
  4040a8:	3a40      	subs	r2, #64	; 0x40
  4040aa:	d2bd      	bcs.n	404028 <memcpy+0x10>
  4040ac:	3230      	adds	r2, #48	; 0x30
  4040ae:	d311      	bcc.n	4040d4 <memcpy+0xbc>
  4040b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040b4:	f840 3b04 	str.w	r3, [r0], #4
  4040b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040bc:	f840 3b04 	str.w	r3, [r0], #4
  4040c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4040c4:	f840 3b04 	str.w	r3, [r0], #4
  4040c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040cc:	f840 3b04 	str.w	r3, [r0], #4
  4040d0:	3a10      	subs	r2, #16
  4040d2:	d2ed      	bcs.n	4040b0 <memcpy+0x98>
  4040d4:	320c      	adds	r2, #12
  4040d6:	d305      	bcc.n	4040e4 <memcpy+0xcc>
  4040d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4040dc:	f840 3b04 	str.w	r3, [r0], #4
  4040e0:	3a04      	subs	r2, #4
  4040e2:	d2f9      	bcs.n	4040d8 <memcpy+0xc0>
  4040e4:	3204      	adds	r2, #4
  4040e6:	d008      	beq.n	4040fa <memcpy+0xe2>
  4040e8:	07d2      	lsls	r2, r2, #31
  4040ea:	bf1c      	itt	ne
  4040ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4040f0:	f800 3b01 	strbne.w	r3, [r0], #1
  4040f4:	d301      	bcc.n	4040fa <memcpy+0xe2>
  4040f6:	880b      	ldrh	r3, [r1, #0]
  4040f8:	8003      	strh	r3, [r0, #0]
  4040fa:	4660      	mov	r0, ip
  4040fc:	4770      	bx	lr
  4040fe:	bf00      	nop
  404100:	2a08      	cmp	r2, #8
  404102:	d313      	bcc.n	40412c <memcpy+0x114>
  404104:	078b      	lsls	r3, r1, #30
  404106:	d08d      	beq.n	404024 <memcpy+0xc>
  404108:	f010 0303 	ands.w	r3, r0, #3
  40410c:	d08a      	beq.n	404024 <memcpy+0xc>
  40410e:	f1c3 0304 	rsb	r3, r3, #4
  404112:	1ad2      	subs	r2, r2, r3
  404114:	07db      	lsls	r3, r3, #31
  404116:	bf1c      	itt	ne
  404118:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40411c:	f800 3b01 	strbne.w	r3, [r0], #1
  404120:	d380      	bcc.n	404024 <memcpy+0xc>
  404122:	f831 3b02 	ldrh.w	r3, [r1], #2
  404126:	f820 3b02 	strh.w	r3, [r0], #2
  40412a:	e77b      	b.n	404024 <memcpy+0xc>
  40412c:	3a04      	subs	r2, #4
  40412e:	d3d9      	bcc.n	4040e4 <memcpy+0xcc>
  404130:	3a01      	subs	r2, #1
  404132:	f811 3b01 	ldrb.w	r3, [r1], #1
  404136:	f800 3b01 	strb.w	r3, [r0], #1
  40413a:	d2f9      	bcs.n	404130 <memcpy+0x118>
  40413c:	780b      	ldrb	r3, [r1, #0]
  40413e:	7003      	strb	r3, [r0, #0]
  404140:	784b      	ldrb	r3, [r1, #1]
  404142:	7043      	strb	r3, [r0, #1]
  404144:	788b      	ldrb	r3, [r1, #2]
  404146:	7083      	strb	r3, [r0, #2]
  404148:	4660      	mov	r0, ip
  40414a:	4770      	bx	lr

0040414c <memset>:
  40414c:	b470      	push	{r4, r5, r6}
  40414e:	0786      	lsls	r6, r0, #30
  404150:	d046      	beq.n	4041e0 <memset+0x94>
  404152:	1e54      	subs	r4, r2, #1
  404154:	2a00      	cmp	r2, #0
  404156:	d041      	beq.n	4041dc <memset+0x90>
  404158:	b2ca      	uxtb	r2, r1
  40415a:	4603      	mov	r3, r0
  40415c:	e002      	b.n	404164 <memset+0x18>
  40415e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404162:	d33b      	bcc.n	4041dc <memset+0x90>
  404164:	f803 2b01 	strb.w	r2, [r3], #1
  404168:	079d      	lsls	r5, r3, #30
  40416a:	d1f8      	bne.n	40415e <memset+0x12>
  40416c:	2c03      	cmp	r4, #3
  40416e:	d92e      	bls.n	4041ce <memset+0x82>
  404170:	b2cd      	uxtb	r5, r1
  404172:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404176:	2c0f      	cmp	r4, #15
  404178:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40417c:	d919      	bls.n	4041b2 <memset+0x66>
  40417e:	f103 0210 	add.w	r2, r3, #16
  404182:	4626      	mov	r6, r4
  404184:	3e10      	subs	r6, #16
  404186:	2e0f      	cmp	r6, #15
  404188:	f842 5c10 	str.w	r5, [r2, #-16]
  40418c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404190:	f842 5c08 	str.w	r5, [r2, #-8]
  404194:	f842 5c04 	str.w	r5, [r2, #-4]
  404198:	f102 0210 	add.w	r2, r2, #16
  40419c:	d8f2      	bhi.n	404184 <memset+0x38>
  40419e:	f1a4 0210 	sub.w	r2, r4, #16
  4041a2:	f022 020f 	bic.w	r2, r2, #15
  4041a6:	f004 040f 	and.w	r4, r4, #15
  4041aa:	3210      	adds	r2, #16
  4041ac:	2c03      	cmp	r4, #3
  4041ae:	4413      	add	r3, r2
  4041b0:	d90d      	bls.n	4041ce <memset+0x82>
  4041b2:	461e      	mov	r6, r3
  4041b4:	4622      	mov	r2, r4
  4041b6:	3a04      	subs	r2, #4
  4041b8:	2a03      	cmp	r2, #3
  4041ba:	f846 5b04 	str.w	r5, [r6], #4
  4041be:	d8fa      	bhi.n	4041b6 <memset+0x6a>
  4041c0:	1f22      	subs	r2, r4, #4
  4041c2:	f022 0203 	bic.w	r2, r2, #3
  4041c6:	3204      	adds	r2, #4
  4041c8:	4413      	add	r3, r2
  4041ca:	f004 0403 	and.w	r4, r4, #3
  4041ce:	b12c      	cbz	r4, 4041dc <memset+0x90>
  4041d0:	b2c9      	uxtb	r1, r1
  4041d2:	441c      	add	r4, r3
  4041d4:	f803 1b01 	strb.w	r1, [r3], #1
  4041d8:	429c      	cmp	r4, r3
  4041da:	d1fb      	bne.n	4041d4 <memset+0x88>
  4041dc:	bc70      	pop	{r4, r5, r6}
  4041de:	4770      	bx	lr
  4041e0:	4614      	mov	r4, r2
  4041e2:	4603      	mov	r3, r0
  4041e4:	e7c2      	b.n	40416c <memset+0x20>
  4041e6:	bf00      	nop

004041e8 <sprintf>:
  4041e8:	b40e      	push	{r1, r2, r3}
  4041ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041ec:	b09c      	sub	sp, #112	; 0x70
  4041ee:	ab21      	add	r3, sp, #132	; 0x84
  4041f0:	490f      	ldr	r1, [pc, #60]	; (404230 <sprintf+0x48>)
  4041f2:	f853 2b04 	ldr.w	r2, [r3], #4
  4041f6:	9301      	str	r3, [sp, #4]
  4041f8:	4605      	mov	r5, r0
  4041fa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4041fe:	6808      	ldr	r0, [r1, #0]
  404200:	9502      	str	r5, [sp, #8]
  404202:	f44f 7702 	mov.w	r7, #520	; 0x208
  404206:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40420a:	a902      	add	r1, sp, #8
  40420c:	9506      	str	r5, [sp, #24]
  40420e:	f8ad 7014 	strh.w	r7, [sp, #20]
  404212:	9404      	str	r4, [sp, #16]
  404214:	9407      	str	r4, [sp, #28]
  404216:	f8ad 6016 	strh.w	r6, [sp, #22]
  40421a:	f000 fae3 	bl	4047e4 <_svfprintf_r>
  40421e:	9b02      	ldr	r3, [sp, #8]
  404220:	2200      	movs	r2, #0
  404222:	701a      	strb	r2, [r3, #0]
  404224:	b01c      	add	sp, #112	; 0x70
  404226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40422a:	b003      	add	sp, #12
  40422c:	4770      	bx	lr
  40422e:	bf00      	nop
  404230:	20000010 	.word	0x20000010
	...

00404240 <strlen>:
  404240:	f890 f000 	pld	[r0]
  404244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404248:	f020 0107 	bic.w	r1, r0, #7
  40424c:	f06f 0c00 	mvn.w	ip, #0
  404250:	f010 0407 	ands.w	r4, r0, #7
  404254:	f891 f020 	pld	[r1, #32]
  404258:	f040 8049 	bne.w	4042ee <strlen+0xae>
  40425c:	f04f 0400 	mov.w	r4, #0
  404260:	f06f 0007 	mvn.w	r0, #7
  404264:	e9d1 2300 	ldrd	r2, r3, [r1]
  404268:	f891 f040 	pld	[r1, #64]	; 0x40
  40426c:	f100 0008 	add.w	r0, r0, #8
  404270:	fa82 f24c 	uadd8	r2, r2, ip
  404274:	faa4 f28c 	sel	r2, r4, ip
  404278:	fa83 f34c 	uadd8	r3, r3, ip
  40427c:	faa2 f38c 	sel	r3, r2, ip
  404280:	bb4b      	cbnz	r3, 4042d6 <strlen+0x96>
  404282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404286:	fa82 f24c 	uadd8	r2, r2, ip
  40428a:	f100 0008 	add.w	r0, r0, #8
  40428e:	faa4 f28c 	sel	r2, r4, ip
  404292:	fa83 f34c 	uadd8	r3, r3, ip
  404296:	faa2 f38c 	sel	r3, r2, ip
  40429a:	b9e3      	cbnz	r3, 4042d6 <strlen+0x96>
  40429c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4042a0:	fa82 f24c 	uadd8	r2, r2, ip
  4042a4:	f100 0008 	add.w	r0, r0, #8
  4042a8:	faa4 f28c 	sel	r2, r4, ip
  4042ac:	fa83 f34c 	uadd8	r3, r3, ip
  4042b0:	faa2 f38c 	sel	r3, r2, ip
  4042b4:	b97b      	cbnz	r3, 4042d6 <strlen+0x96>
  4042b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4042ba:	f101 0120 	add.w	r1, r1, #32
  4042be:	fa82 f24c 	uadd8	r2, r2, ip
  4042c2:	f100 0008 	add.w	r0, r0, #8
  4042c6:	faa4 f28c 	sel	r2, r4, ip
  4042ca:	fa83 f34c 	uadd8	r3, r3, ip
  4042ce:	faa2 f38c 	sel	r3, r2, ip
  4042d2:	2b00      	cmp	r3, #0
  4042d4:	d0c6      	beq.n	404264 <strlen+0x24>
  4042d6:	2a00      	cmp	r2, #0
  4042d8:	bf04      	itt	eq
  4042da:	3004      	addeq	r0, #4
  4042dc:	461a      	moveq	r2, r3
  4042de:	ba12      	rev	r2, r2
  4042e0:	fab2 f282 	clz	r2, r2
  4042e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4042e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4042ec:	4770      	bx	lr
  4042ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042f2:	f004 0503 	and.w	r5, r4, #3
  4042f6:	f1c4 0000 	rsb	r0, r4, #0
  4042fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4042fe:	f014 0f04 	tst.w	r4, #4
  404302:	f891 f040 	pld	[r1, #64]	; 0x40
  404306:	fa0c f505 	lsl.w	r5, ip, r5
  40430a:	ea62 0205 	orn	r2, r2, r5
  40430e:	bf1c      	itt	ne
  404310:	ea63 0305 	ornne	r3, r3, r5
  404314:	4662      	movne	r2, ip
  404316:	f04f 0400 	mov.w	r4, #0
  40431a:	e7a9      	b.n	404270 <strlen+0x30>

0040431c <critical_factorization>:
  40431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404320:	f04f 0e01 	mov.w	lr, #1
  404324:	4674      	mov	r4, lr
  404326:	2500      	movs	r5, #0
  404328:	f04f 36ff 	mov.w	r6, #4294967295
  40432c:	192b      	adds	r3, r5, r4
  40432e:	428b      	cmp	r3, r1
  404330:	eb00 0706 	add.w	r7, r0, r6
  404334:	d20d      	bcs.n	404352 <critical_factorization+0x36>
  404336:	5d3f      	ldrb	r7, [r7, r4]
  404338:	f810 c003 	ldrb.w	ip, [r0, r3]
  40433c:	45bc      	cmp	ip, r7
  40433e:	d22d      	bcs.n	40439c <critical_factorization+0x80>
  404340:	461d      	mov	r5, r3
  404342:	2401      	movs	r4, #1
  404344:	eba3 0e06 	sub.w	lr, r3, r6
  404348:	192b      	adds	r3, r5, r4
  40434a:	428b      	cmp	r3, r1
  40434c:	eb00 0706 	add.w	r7, r0, r6
  404350:	d3f1      	bcc.n	404336 <critical_factorization+0x1a>
  404352:	f04f 0801 	mov.w	r8, #1
  404356:	f8c2 e000 	str.w	lr, [r2]
  40435a:	4644      	mov	r4, r8
  40435c:	2500      	movs	r5, #0
  40435e:	f04f 37ff 	mov.w	r7, #4294967295
  404362:	192b      	adds	r3, r5, r4
  404364:	4299      	cmp	r1, r3
  404366:	eb00 0e07 	add.w	lr, r0, r7
  40436a:	d90e      	bls.n	40438a <critical_factorization+0x6e>
  40436c:	f81e e004 	ldrb.w	lr, [lr, r4]
  404370:	f810 c003 	ldrb.w	ip, [r0, r3]
  404374:	45f4      	cmp	ip, lr
  404376:	d918      	bls.n	4043aa <critical_factorization+0x8e>
  404378:	461d      	mov	r5, r3
  40437a:	2401      	movs	r4, #1
  40437c:	eba3 0807 	sub.w	r8, r3, r7
  404380:	192b      	adds	r3, r5, r4
  404382:	4299      	cmp	r1, r3
  404384:	eb00 0e07 	add.w	lr, r0, r7
  404388:	d8f0      	bhi.n	40436c <critical_factorization+0x50>
  40438a:	3701      	adds	r7, #1
  40438c:	1c70      	adds	r0, r6, #1
  40438e:	4287      	cmp	r7, r0
  404390:	bf24      	itt	cs
  404392:	f8c2 8000 	strcs.w	r8, [r2]
  404396:	4638      	movcs	r0, r7
  404398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40439c:	d00c      	beq.n	4043b8 <critical_factorization+0x9c>
  40439e:	f04f 0e01 	mov.w	lr, #1
  4043a2:	462e      	mov	r6, r5
  4043a4:	4674      	mov	r4, lr
  4043a6:	4475      	add	r5, lr
  4043a8:	e7c0      	b.n	40432c <critical_factorization+0x10>
  4043aa:	d00b      	beq.n	4043c4 <critical_factorization+0xa8>
  4043ac:	f04f 0801 	mov.w	r8, #1
  4043b0:	462f      	mov	r7, r5
  4043b2:	4644      	mov	r4, r8
  4043b4:	4445      	add	r5, r8
  4043b6:	e7d4      	b.n	404362 <critical_factorization+0x46>
  4043b8:	4574      	cmp	r4, lr
  4043ba:	bf12      	itee	ne
  4043bc:	3401      	addne	r4, #1
  4043be:	461d      	moveq	r5, r3
  4043c0:	2401      	moveq	r4, #1
  4043c2:	e7b3      	b.n	40432c <critical_factorization+0x10>
  4043c4:	4544      	cmp	r4, r8
  4043c6:	bf12      	itee	ne
  4043c8:	3401      	addne	r4, #1
  4043ca:	461d      	moveq	r5, r3
  4043cc:	2401      	moveq	r4, #1
  4043ce:	e7c8      	b.n	404362 <critical_factorization+0x46>

004043d0 <two_way_long_needle>:
  4043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043d4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4043d8:	4616      	mov	r6, r2
  4043da:	4605      	mov	r5, r0
  4043dc:	468b      	mov	fp, r1
  4043de:	4610      	mov	r0, r2
  4043e0:	4619      	mov	r1, r3
  4043e2:	aa03      	add	r2, sp, #12
  4043e4:	461c      	mov	r4, r3
  4043e6:	f7ff ff99 	bl	40431c <critical_factorization>
  4043ea:	ab03      	add	r3, sp, #12
  4043ec:	4681      	mov	r9, r0
  4043ee:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4043f2:	f843 4f04 	str.w	r4, [r3, #4]!
  4043f6:	4293      	cmp	r3, r2
  4043f8:	d1fb      	bne.n	4043f2 <two_way_long_needle+0x22>
  4043fa:	b14c      	cbz	r4, 404410 <two_way_long_needle+0x40>
  4043fc:	1e63      	subs	r3, r4, #1
  4043fe:	1e72      	subs	r2, r6, #1
  404400:	a804      	add	r0, sp, #16
  404402:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  404406:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  40440a:	f113 33ff 	adds.w	r3, r3, #4294967295
  40440e:	d2f8      	bcs.n	404402 <two_way_long_needle+0x32>
  404410:	9903      	ldr	r1, [sp, #12]
  404412:	464a      	mov	r2, r9
  404414:	4431      	add	r1, r6
  404416:	4630      	mov	r0, r6
  404418:	f002 ff52 	bl	4072c0 <memcmp>
  40441c:	2800      	cmp	r0, #0
  40441e:	d16f      	bne.n	404500 <two_way_long_needle+0x130>
  404420:	f109 33ff 	add.w	r3, r9, #4294967295
  404424:	9300      	str	r3, [sp, #0]
  404426:	18f3      	adds	r3, r6, r3
  404428:	4682      	mov	sl, r0
  40442a:	9301      	str	r3, [sp, #4]
  40442c:	4623      	mov	r3, r4
  40442e:	4680      	mov	r8, r0
  404430:	4654      	mov	r4, sl
  404432:	4658      	mov	r0, fp
  404434:	469a      	mov	sl, r3
  404436:	eb08 070a 	add.w	r7, r8, sl
  40443a:	1a3a      	subs	r2, r7, r0
  40443c:	2100      	movs	r1, #0
  40443e:	4428      	add	r0, r5
  404440:	f002 feee 	bl	407220 <memchr>
  404444:	2800      	cmp	r0, #0
  404446:	d156      	bne.n	4044f6 <two_way_long_needle+0x126>
  404448:	2f00      	cmp	r7, #0
  40444a:	d054      	beq.n	4044f6 <two_way_long_needle+0x126>
  40444c:	19eb      	adds	r3, r5, r7
  40444e:	aa04      	add	r2, sp, #16
  404450:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404458:	b14b      	cbz	r3, 40446e <two_way_long_needle+0x9e>
  40445a:	b124      	cbz	r4, 404466 <two_way_long_needle+0x96>
  40445c:	9a03      	ldr	r2, [sp, #12]
  40445e:	4293      	cmp	r3, r2
  404460:	d201      	bcs.n	404466 <two_way_long_needle+0x96>
  404462:	ebaa 0302 	sub.w	r3, sl, r2
  404466:	4498      	add	r8, r3
  404468:	2400      	movs	r4, #0
  40446a:	4638      	mov	r0, r7
  40446c:	e7e3      	b.n	404436 <two_way_long_needle+0x66>
  40446e:	454c      	cmp	r4, r9
  404470:	4623      	mov	r3, r4
  404472:	f10a 3eff 	add.w	lr, sl, #4294967295
  404476:	bf38      	it	cc
  404478:	464b      	movcc	r3, r9
  40447a:	4573      	cmp	r3, lr
  40447c:	d213      	bcs.n	4044a6 <two_way_long_needle+0xd6>
  40447e:	eb08 0203 	add.w	r2, r8, r3
  404482:	f816 c003 	ldrb.w	ip, [r6, r3]
  404486:	5ca8      	ldrb	r0, [r5, r2]
  404488:	4584      	cmp	ip, r0
  40448a:	442a      	add	r2, r5
  40448c:	eb06 0103 	add.w	r1, r6, r3
  404490:	d006      	beq.n	4044a0 <two_way_long_needle+0xd0>
  404492:	e02c      	b.n	4044ee <two_way_long_needle+0x11e>
  404494:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  404498:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40449c:	4584      	cmp	ip, r0
  40449e:	d126      	bne.n	4044ee <two_way_long_needle+0x11e>
  4044a0:	3301      	adds	r3, #1
  4044a2:	4573      	cmp	r3, lr
  4044a4:	d3f6      	bcc.n	404494 <two_way_long_needle+0xc4>
  4044a6:	454c      	cmp	r4, r9
  4044a8:	9900      	ldr	r1, [sp, #0]
  4044aa:	f080 8089 	bcs.w	4045c0 <two_way_long_needle+0x1f0>
  4044ae:	9b00      	ldr	r3, [sp, #0]
  4044b0:	eb08 0203 	add.w	r2, r8, r3
  4044b4:	9b01      	ldr	r3, [sp, #4]
  4044b6:	5ca8      	ldrb	r0, [r5, r2]
  4044b8:	781b      	ldrb	r3, [r3, #0]
  4044ba:	4298      	cmp	r0, r3
  4044bc:	442a      	add	r2, r5
  4044be:	d17f      	bne.n	4045c0 <two_way_long_needle+0x1f0>
  4044c0:	9801      	ldr	r0, [sp, #4]
  4044c2:	f104 3bff 	add.w	fp, r4, #4294967295
  4044c6:	e006      	b.n	4044d6 <two_way_long_needle+0x106>
  4044c8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4044cc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4044d0:	45f4      	cmp	ip, lr
  4044d2:	d103      	bne.n	4044dc <two_way_long_needle+0x10c>
  4044d4:	4619      	mov	r1, r3
  4044d6:	1e4b      	subs	r3, r1, #1
  4044d8:	459b      	cmp	fp, r3
  4044da:	d1f5      	bne.n	4044c8 <two_way_long_needle+0xf8>
  4044dc:	3401      	adds	r4, #1
  4044de:	428c      	cmp	r4, r1
  4044e0:	d870      	bhi.n	4045c4 <two_way_long_needle+0x1f4>
  4044e2:	9c03      	ldr	r4, [sp, #12]
  4044e4:	4638      	mov	r0, r7
  4044e6:	44a0      	add	r8, r4
  4044e8:	ebaa 0404 	sub.w	r4, sl, r4
  4044ec:	e7a3      	b.n	404436 <two_way_long_needle+0x66>
  4044ee:	f1c9 0201 	rsb	r2, r9, #1
  4044f2:	4490      	add	r8, r2
  4044f4:	e7b7      	b.n	404466 <two_way_long_needle+0x96>
  4044f6:	2000      	movs	r0, #0
  4044f8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4044fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404500:	eba4 0309 	sub.w	r3, r4, r9
  404504:	454b      	cmp	r3, r9
  404506:	bf38      	it	cc
  404508:	464b      	movcc	r3, r9
  40450a:	3301      	adds	r3, #1
  40450c:	f109 38ff 	add.w	r8, r9, #4294967295
  404510:	9303      	str	r3, [sp, #12]
  404512:	eb06 0308 	add.w	r3, r6, r8
  404516:	4658      	mov	r0, fp
  404518:	f04f 0a00 	mov.w	sl, #0
  40451c:	46cb      	mov	fp, r9
  40451e:	4699      	mov	r9, r3
  404520:	eb0a 0704 	add.w	r7, sl, r4
  404524:	1a3a      	subs	r2, r7, r0
  404526:	2100      	movs	r1, #0
  404528:	4428      	add	r0, r5
  40452a:	f002 fe79 	bl	407220 <memchr>
  40452e:	2800      	cmp	r0, #0
  404530:	d1e1      	bne.n	4044f6 <two_way_long_needle+0x126>
  404532:	2f00      	cmp	r7, #0
  404534:	d0df      	beq.n	4044f6 <two_way_long_needle+0x126>
  404536:	19eb      	adds	r3, r5, r7
  404538:	aa04      	add	r2, sp, #16
  40453a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40453e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404542:	bba3      	cbnz	r3, 4045ae <two_way_long_needle+0x1de>
  404544:	1e61      	subs	r1, r4, #1
  404546:	458b      	cmp	fp, r1
  404548:	d215      	bcs.n	404576 <two_way_long_needle+0x1a6>
  40454a:	eb0a 020b 	add.w	r2, sl, fp
  40454e:	f816 300b 	ldrb.w	r3, [r6, fp]
  404552:	f815 e002 	ldrb.w	lr, [r5, r2]
  404556:	459e      	cmp	lr, r3
  404558:	442a      	add	r2, r5
  40455a:	eb06 000b 	add.w	r0, r6, fp
  40455e:	465b      	mov	r3, fp
  404560:	d006      	beq.n	404570 <two_way_long_needle+0x1a0>
  404562:	e027      	b.n	4045b4 <two_way_long_needle+0x1e4>
  404564:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  404568:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40456c:	45f4      	cmp	ip, lr
  40456e:	d121      	bne.n	4045b4 <two_way_long_needle+0x1e4>
  404570:	3301      	adds	r3, #1
  404572:	428b      	cmp	r3, r1
  404574:	d3f6      	bcc.n	404564 <two_way_long_needle+0x194>
  404576:	f1b8 3fff 	cmp.w	r8, #4294967295
  40457a:	d011      	beq.n	4045a0 <two_way_long_needle+0x1d0>
  40457c:	eb0a 0208 	add.w	r2, sl, r8
  404580:	f899 1000 	ldrb.w	r1, [r9]
  404584:	5cab      	ldrb	r3, [r5, r2]
  404586:	4299      	cmp	r1, r3
  404588:	442a      	add	r2, r5
  40458a:	d10f      	bne.n	4045ac <two_way_long_needle+0x1dc>
  40458c:	464b      	mov	r3, r9
  40458e:	e005      	b.n	40459c <two_way_long_needle+0x1cc>
  404590:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  404594:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  404598:	4288      	cmp	r0, r1
  40459a:	d107      	bne.n	4045ac <two_way_long_needle+0x1dc>
  40459c:	42b3      	cmp	r3, r6
  40459e:	d1f7      	bne.n	404590 <two_way_long_needle+0x1c0>
  4045a0:	eb05 000a 	add.w	r0, r5, sl
  4045a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4045a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ac:	9b03      	ldr	r3, [sp, #12]
  4045ae:	449a      	add	sl, r3
  4045b0:	4638      	mov	r0, r7
  4045b2:	e7b5      	b.n	404520 <two_way_long_needle+0x150>
  4045b4:	f1cb 0201 	rsb	r2, fp, #1
  4045b8:	4492      	add	sl, r2
  4045ba:	449a      	add	sl, r3
  4045bc:	4638      	mov	r0, r7
  4045be:	e7af      	b.n	404520 <two_way_long_needle+0x150>
  4045c0:	4649      	mov	r1, r9
  4045c2:	e78b      	b.n	4044dc <two_way_long_needle+0x10c>
  4045c4:	eb05 0008 	add.w	r0, r5, r8
  4045c8:	e796      	b.n	4044f8 <two_way_long_needle+0x128>
  4045ca:	bf00      	nop

004045cc <strstr>:
  4045cc:	7802      	ldrb	r2, [r0, #0]
  4045ce:	2a00      	cmp	r2, #0
  4045d0:	f000 8101 	beq.w	4047d6 <strstr+0x20a>
  4045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045d8:	f891 8000 	ldrb.w	r8, [r1]
  4045dc:	b085      	sub	sp, #20
  4045de:	4644      	mov	r4, r8
  4045e0:	f1b8 0f00 	cmp.w	r8, #0
  4045e4:	d016      	beq.n	404614 <strstr+0x48>
  4045e6:	4686      	mov	lr, r0
  4045e8:	f101 0c01 	add.w	ip, r1, #1
  4045ec:	2701      	movs	r7, #1
  4045ee:	e003      	b.n	4045f8 <strstr+0x2c>
  4045f0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4045f4:	b16c      	cbz	r4, 404612 <strstr+0x46>
  4045f6:	469c      	mov	ip, r3
  4045f8:	42a2      	cmp	r2, r4
  4045fa:	bf14      	ite	ne
  4045fc:	2700      	movne	r7, #0
  4045fe:	f007 0701 	andeq.w	r7, r7, #1
  404602:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  404606:	4663      	mov	r3, ip
  404608:	2a00      	cmp	r2, #0
  40460a:	d1f1      	bne.n	4045f0 <strstr+0x24>
  40460c:	f89c 3000 	ldrb.w	r3, [ip]
  404610:	b9fb      	cbnz	r3, 404652 <strstr+0x86>
  404612:	b117      	cbz	r7, 40461a <strstr+0x4e>
  404614:	b005      	add	sp, #20
  404616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40461a:	460e      	mov	r6, r1
  40461c:	4605      	mov	r5, r0
  40461e:	4641      	mov	r1, r8
  404620:	3001      	adds	r0, #1
  404622:	ebac 0406 	sub.w	r4, ip, r6
  404626:	f003 f993 	bl	407950 <strchr>
  40462a:	4607      	mov	r7, r0
  40462c:	b188      	cbz	r0, 404652 <strstr+0x86>
  40462e:	2c01      	cmp	r4, #1
  404630:	d0f0      	beq.n	404614 <strstr+0x48>
  404632:	1928      	adds	r0, r5, r4
  404634:	4287      	cmp	r7, r0
  404636:	bf94      	ite	ls
  404638:	1bc1      	subls	r1, r0, r7
  40463a:	2101      	movhi	r1, #1
  40463c:	2c1f      	cmp	r4, #31
  40463e:	468b      	mov	fp, r1
  404640:	d90b      	bls.n	40465a <strstr+0x8e>
  404642:	4623      	mov	r3, r4
  404644:	4632      	mov	r2, r6
  404646:	4638      	mov	r0, r7
  404648:	f7ff fec2 	bl	4043d0 <two_way_long_needle>
  40464c:	b005      	add	sp, #20
  40464e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404652:	2000      	movs	r0, #0
  404654:	b005      	add	sp, #20
  404656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40465a:	aa03      	add	r2, sp, #12
  40465c:	4621      	mov	r1, r4
  40465e:	4630      	mov	r0, r6
  404660:	f7ff fe5c 	bl	40431c <critical_factorization>
  404664:	9903      	ldr	r1, [sp, #12]
  404666:	4680      	mov	r8, r0
  404668:	4602      	mov	r2, r0
  40466a:	4431      	add	r1, r6
  40466c:	4630      	mov	r0, r6
  40466e:	f002 fe27 	bl	4072c0 <memcmp>
  404672:	2800      	cmp	r0, #0
  404674:	d157      	bne.n	404726 <strstr+0x15a>
  404676:	f108 33ff 	add.w	r3, r8, #4294967295
  40467a:	9300      	str	r3, [sp, #0]
  40467c:	18f3      	adds	r3, r6, r3
  40467e:	4681      	mov	r9, r0
  404680:	4605      	mov	r5, r0
  404682:	9301      	str	r3, [sp, #4]
  404684:	4658      	mov	r0, fp
  404686:	46b2      	mov	sl, r6
  404688:	1966      	adds	r6, r4, r5
  40468a:	1a32      	subs	r2, r6, r0
  40468c:	2100      	movs	r1, #0
  40468e:	4438      	add	r0, r7
  404690:	f002 fdc6 	bl	407220 <memchr>
  404694:	2800      	cmp	r0, #0
  404696:	d1dc      	bne.n	404652 <strstr+0x86>
  404698:	2e00      	cmp	r6, #0
  40469a:	d0da      	beq.n	404652 <strstr+0x86>
  40469c:	45c8      	cmp	r8, r9
  40469e:	4643      	mov	r3, r8
  4046a0:	bf38      	it	cc
  4046a2:	464b      	movcc	r3, r9
  4046a4:	429c      	cmp	r4, r3
  4046a6:	d912      	bls.n	4046ce <strstr+0x102>
  4046a8:	195a      	adds	r2, r3, r5
  4046aa:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4046ae:	5cb8      	ldrb	r0, [r7, r2]
  4046b0:	4281      	cmp	r1, r0
  4046b2:	443a      	add	r2, r7
  4046b4:	eb0a 0e03 	add.w	lr, sl, r3
  4046b8:	d006      	beq.n	4046c8 <strstr+0xfc>
  4046ba:	e02c      	b.n	404716 <strstr+0x14a>
  4046bc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4046c0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4046c4:	4288      	cmp	r0, r1
  4046c6:	d126      	bne.n	404716 <strstr+0x14a>
  4046c8:	3301      	adds	r3, #1
  4046ca:	429c      	cmp	r4, r3
  4046cc:	d1f6      	bne.n	4046bc <strstr+0xf0>
  4046ce:	45c8      	cmp	r8, r9
  4046d0:	9900      	ldr	r1, [sp, #0]
  4046d2:	f240 8083 	bls.w	4047dc <strstr+0x210>
  4046d6:	9b00      	ldr	r3, [sp, #0]
  4046d8:	18ea      	adds	r2, r5, r3
  4046da:	9b01      	ldr	r3, [sp, #4]
  4046dc:	5cb8      	ldrb	r0, [r7, r2]
  4046de:	781b      	ldrb	r3, [r3, #0]
  4046e0:	4298      	cmp	r0, r3
  4046e2:	443a      	add	r2, r7
  4046e4:	d17a      	bne.n	4047dc <strstr+0x210>
  4046e6:	9801      	ldr	r0, [sp, #4]
  4046e8:	f109 3bff 	add.w	fp, r9, #4294967295
  4046ec:	e006      	b.n	4046fc <strstr+0x130>
  4046ee:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  4046f2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4046f6:	45f4      	cmp	ip, lr
  4046f8:	d103      	bne.n	404702 <strstr+0x136>
  4046fa:	4619      	mov	r1, r3
  4046fc:	1e4b      	subs	r3, r1, #1
  4046fe:	455b      	cmp	r3, fp
  404700:	d1f5      	bne.n	4046ee <strstr+0x122>
  404702:	f109 0901 	add.w	r9, r9, #1
  404706:	4589      	cmp	r9, r1
  404708:	d857      	bhi.n	4047ba <strstr+0x1ee>
  40470a:	9b03      	ldr	r3, [sp, #12]
  40470c:	4630      	mov	r0, r6
  40470e:	441d      	add	r5, r3
  404710:	eba4 0903 	sub.w	r9, r4, r3
  404714:	e7b8      	b.n	404688 <strstr+0xbc>
  404716:	f1c8 0201 	rsb	r2, r8, #1
  40471a:	4415      	add	r5, r2
  40471c:	441d      	add	r5, r3
  40471e:	f04f 0900 	mov.w	r9, #0
  404722:	4630      	mov	r0, r6
  404724:	e7b0      	b.n	404688 <strstr+0xbc>
  404726:	eba4 0308 	sub.w	r3, r4, r8
  40472a:	4543      	cmp	r3, r8
  40472c:	bf38      	it	cc
  40472e:	4643      	movcc	r3, r8
  404730:	3301      	adds	r3, #1
  404732:	f108 39ff 	add.w	r9, r8, #4294967295
  404736:	9303      	str	r3, [sp, #12]
  404738:	eb06 0309 	add.w	r3, r6, r9
  40473c:	4658      	mov	r0, fp
  40473e:	2500      	movs	r5, #0
  404740:	46bb      	mov	fp, r7
  404742:	469a      	mov	sl, r3
  404744:	1967      	adds	r7, r4, r5
  404746:	1a3a      	subs	r2, r7, r0
  404748:	2100      	movs	r1, #0
  40474a:	4458      	add	r0, fp
  40474c:	f002 fd68 	bl	407220 <memchr>
  404750:	2800      	cmp	r0, #0
  404752:	f47f af7e 	bne.w	404652 <strstr+0x86>
  404756:	2f00      	cmp	r7, #0
  404758:	f43f af7b 	beq.w	404652 <strstr+0x86>
  40475c:	4544      	cmp	r4, r8
  40475e:	d915      	bls.n	40478c <strstr+0x1c0>
  404760:	eb08 0205 	add.w	r2, r8, r5
  404764:	f816 3008 	ldrb.w	r3, [r6, r8]
  404768:	f81b 0002 	ldrb.w	r0, [fp, r2]
  40476c:	4298      	cmp	r0, r3
  40476e:	445a      	add	r2, fp
  404770:	eb06 0108 	add.w	r1, r6, r8
  404774:	4643      	mov	r3, r8
  404776:	d006      	beq.n	404786 <strstr+0x1ba>
  404778:	e023      	b.n	4047c2 <strstr+0x1f6>
  40477a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  40477e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  404782:	4586      	cmp	lr, r0
  404784:	d11d      	bne.n	4047c2 <strstr+0x1f6>
  404786:	3301      	adds	r3, #1
  404788:	429c      	cmp	r4, r3
  40478a:	d1f6      	bne.n	40477a <strstr+0x1ae>
  40478c:	f1b9 3fff 	cmp.w	r9, #4294967295
  404790:	d012      	beq.n	4047b8 <strstr+0x1ec>
  404792:	eb05 0209 	add.w	r2, r5, r9
  404796:	f89a 3000 	ldrb.w	r3, [sl]
  40479a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  40479e:	4299      	cmp	r1, r3
  4047a0:	445a      	add	r2, fp
  4047a2:	d114      	bne.n	4047ce <strstr+0x202>
  4047a4:	4653      	mov	r3, sl
  4047a6:	e005      	b.n	4047b4 <strstr+0x1e8>
  4047a8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4047ac:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4047b0:	4288      	cmp	r0, r1
  4047b2:	d10c      	bne.n	4047ce <strstr+0x202>
  4047b4:	42b3      	cmp	r3, r6
  4047b6:	d1f7      	bne.n	4047a8 <strstr+0x1dc>
  4047b8:	465f      	mov	r7, fp
  4047ba:	1978      	adds	r0, r7, r5
  4047bc:	b005      	add	sp, #20
  4047be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047c2:	f1c8 0201 	rsb	r2, r8, #1
  4047c6:	4415      	add	r5, r2
  4047c8:	441d      	add	r5, r3
  4047ca:	4638      	mov	r0, r7
  4047cc:	e7ba      	b.n	404744 <strstr+0x178>
  4047ce:	9b03      	ldr	r3, [sp, #12]
  4047d0:	4638      	mov	r0, r7
  4047d2:	441d      	add	r5, r3
  4047d4:	e7b6      	b.n	404744 <strstr+0x178>
  4047d6:	780b      	ldrb	r3, [r1, #0]
  4047d8:	b913      	cbnz	r3, 4047e0 <strstr+0x214>
  4047da:	4770      	bx	lr
  4047dc:	4641      	mov	r1, r8
  4047de:	e790      	b.n	404702 <strstr+0x136>
  4047e0:	2000      	movs	r0, #0
  4047e2:	4770      	bx	lr

004047e4 <_svfprintf_r>:
  4047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047e8:	b0c3      	sub	sp, #268	; 0x10c
  4047ea:	460c      	mov	r4, r1
  4047ec:	910b      	str	r1, [sp, #44]	; 0x2c
  4047ee:	4692      	mov	sl, r2
  4047f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4047f2:	900c      	str	r0, [sp, #48]	; 0x30
  4047f4:	f002 fa4c 	bl	406c90 <_localeconv_r>
  4047f8:	6803      	ldr	r3, [r0, #0]
  4047fa:	931a      	str	r3, [sp, #104]	; 0x68
  4047fc:	4618      	mov	r0, r3
  4047fe:	f7ff fd1f 	bl	404240 <strlen>
  404802:	89a3      	ldrh	r3, [r4, #12]
  404804:	9019      	str	r0, [sp, #100]	; 0x64
  404806:	0619      	lsls	r1, r3, #24
  404808:	d503      	bpl.n	404812 <_svfprintf_r+0x2e>
  40480a:	6923      	ldr	r3, [r4, #16]
  40480c:	2b00      	cmp	r3, #0
  40480e:	f001 8003 	beq.w	405818 <_svfprintf_r+0x1034>
  404812:	2300      	movs	r3, #0
  404814:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404818:	9313      	str	r3, [sp, #76]	; 0x4c
  40481a:	9315      	str	r3, [sp, #84]	; 0x54
  40481c:	9314      	str	r3, [sp, #80]	; 0x50
  40481e:	9327      	str	r3, [sp, #156]	; 0x9c
  404820:	9326      	str	r3, [sp, #152]	; 0x98
  404822:	9318      	str	r3, [sp, #96]	; 0x60
  404824:	931b      	str	r3, [sp, #108]	; 0x6c
  404826:	9309      	str	r3, [sp, #36]	; 0x24
  404828:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40482c:	46c8      	mov	r8, r9
  40482e:	9316      	str	r3, [sp, #88]	; 0x58
  404830:	9317      	str	r3, [sp, #92]	; 0x5c
  404832:	f89a 3000 	ldrb.w	r3, [sl]
  404836:	4654      	mov	r4, sl
  404838:	b1e3      	cbz	r3, 404874 <_svfprintf_r+0x90>
  40483a:	2b25      	cmp	r3, #37	; 0x25
  40483c:	d102      	bne.n	404844 <_svfprintf_r+0x60>
  40483e:	e019      	b.n	404874 <_svfprintf_r+0x90>
  404840:	2b25      	cmp	r3, #37	; 0x25
  404842:	d003      	beq.n	40484c <_svfprintf_r+0x68>
  404844:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404848:	2b00      	cmp	r3, #0
  40484a:	d1f9      	bne.n	404840 <_svfprintf_r+0x5c>
  40484c:	eba4 050a 	sub.w	r5, r4, sl
  404850:	b185      	cbz	r5, 404874 <_svfprintf_r+0x90>
  404852:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404854:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404856:	f8c8 a000 	str.w	sl, [r8]
  40485a:	3301      	adds	r3, #1
  40485c:	442a      	add	r2, r5
  40485e:	2b07      	cmp	r3, #7
  404860:	f8c8 5004 	str.w	r5, [r8, #4]
  404864:	9227      	str	r2, [sp, #156]	; 0x9c
  404866:	9326      	str	r3, [sp, #152]	; 0x98
  404868:	dc7f      	bgt.n	40496a <_svfprintf_r+0x186>
  40486a:	f108 0808 	add.w	r8, r8, #8
  40486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404870:	442b      	add	r3, r5
  404872:	9309      	str	r3, [sp, #36]	; 0x24
  404874:	7823      	ldrb	r3, [r4, #0]
  404876:	2b00      	cmp	r3, #0
  404878:	d07f      	beq.n	40497a <_svfprintf_r+0x196>
  40487a:	2300      	movs	r3, #0
  40487c:	461a      	mov	r2, r3
  40487e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404882:	4619      	mov	r1, r3
  404884:	930d      	str	r3, [sp, #52]	; 0x34
  404886:	469b      	mov	fp, r3
  404888:	f04f 30ff 	mov.w	r0, #4294967295
  40488c:	7863      	ldrb	r3, [r4, #1]
  40488e:	900a      	str	r0, [sp, #40]	; 0x28
  404890:	f104 0a01 	add.w	sl, r4, #1
  404894:	f10a 0a01 	add.w	sl, sl, #1
  404898:	f1a3 0020 	sub.w	r0, r3, #32
  40489c:	2858      	cmp	r0, #88	; 0x58
  40489e:	f200 83c1 	bhi.w	405024 <_svfprintf_r+0x840>
  4048a2:	e8df f010 	tbh	[pc, r0, lsl #1]
  4048a6:	0238      	.short	0x0238
  4048a8:	03bf03bf 	.word	0x03bf03bf
  4048ac:	03bf0240 	.word	0x03bf0240
  4048b0:	03bf03bf 	.word	0x03bf03bf
  4048b4:	03bf03bf 	.word	0x03bf03bf
  4048b8:	024503bf 	.word	0x024503bf
  4048bc:	03bf0203 	.word	0x03bf0203
  4048c0:	026b005d 	.word	0x026b005d
  4048c4:	028603bf 	.word	0x028603bf
  4048c8:	039d039d 	.word	0x039d039d
  4048cc:	039d039d 	.word	0x039d039d
  4048d0:	039d039d 	.word	0x039d039d
  4048d4:	039d039d 	.word	0x039d039d
  4048d8:	03bf039d 	.word	0x03bf039d
  4048dc:	03bf03bf 	.word	0x03bf03bf
  4048e0:	03bf03bf 	.word	0x03bf03bf
  4048e4:	03bf03bf 	.word	0x03bf03bf
  4048e8:	03bf03bf 	.word	0x03bf03bf
  4048ec:	033703bf 	.word	0x033703bf
  4048f0:	03bf0357 	.word	0x03bf0357
  4048f4:	03bf0357 	.word	0x03bf0357
  4048f8:	03bf03bf 	.word	0x03bf03bf
  4048fc:	039803bf 	.word	0x039803bf
  404900:	03bf03bf 	.word	0x03bf03bf
  404904:	03bf03ad 	.word	0x03bf03ad
  404908:	03bf03bf 	.word	0x03bf03bf
  40490c:	03bf03bf 	.word	0x03bf03bf
  404910:	03bf0259 	.word	0x03bf0259
  404914:	031e03bf 	.word	0x031e03bf
  404918:	03bf03bf 	.word	0x03bf03bf
  40491c:	03bf03bf 	.word	0x03bf03bf
  404920:	03bf03bf 	.word	0x03bf03bf
  404924:	03bf03bf 	.word	0x03bf03bf
  404928:	03bf03bf 	.word	0x03bf03bf
  40492c:	02db02c6 	.word	0x02db02c6
  404930:	03570357 	.word	0x03570357
  404934:	028b0357 	.word	0x028b0357
  404938:	03bf02db 	.word	0x03bf02db
  40493c:	029003bf 	.word	0x029003bf
  404940:	029d03bf 	.word	0x029d03bf
  404944:	02b401cc 	.word	0x02b401cc
  404948:	03bf0208 	.word	0x03bf0208
  40494c:	03bf01e1 	.word	0x03bf01e1
  404950:	03bf007e 	.word	0x03bf007e
  404954:	020d03bf 	.word	0x020d03bf
  404958:	980d      	ldr	r0, [sp, #52]	; 0x34
  40495a:	930f      	str	r3, [sp, #60]	; 0x3c
  40495c:	4240      	negs	r0, r0
  40495e:	900d      	str	r0, [sp, #52]	; 0x34
  404960:	f04b 0b04 	orr.w	fp, fp, #4
  404964:	f89a 3000 	ldrb.w	r3, [sl]
  404968:	e794      	b.n	404894 <_svfprintf_r+0xb0>
  40496a:	aa25      	add	r2, sp, #148	; 0x94
  40496c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40496e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404970:	f003 f862 	bl	407a38 <__ssprint_r>
  404974:	b940      	cbnz	r0, 404988 <_svfprintf_r+0x1a4>
  404976:	46c8      	mov	r8, r9
  404978:	e779      	b.n	40486e <_svfprintf_r+0x8a>
  40497a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40497c:	b123      	cbz	r3, 404988 <_svfprintf_r+0x1a4>
  40497e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404980:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404982:	aa25      	add	r2, sp, #148	; 0x94
  404984:	f003 f858 	bl	407a38 <__ssprint_r>
  404988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40498a:	899b      	ldrh	r3, [r3, #12]
  40498c:	f013 0f40 	tst.w	r3, #64	; 0x40
  404990:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404992:	bf18      	it	ne
  404994:	f04f 33ff 	movne.w	r3, #4294967295
  404998:	9309      	str	r3, [sp, #36]	; 0x24
  40499a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40499c:	b043      	add	sp, #268	; 0x10c
  40499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049a2:	f01b 0f20 	tst.w	fp, #32
  4049a6:	9311      	str	r3, [sp, #68]	; 0x44
  4049a8:	f040 81dd 	bne.w	404d66 <_svfprintf_r+0x582>
  4049ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049ae:	f01b 0f10 	tst.w	fp, #16
  4049b2:	4613      	mov	r3, r2
  4049b4:	f040 856e 	bne.w	405494 <_svfprintf_r+0xcb0>
  4049b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4049bc:	f000 856a 	beq.w	405494 <_svfprintf_r+0xcb0>
  4049c0:	8814      	ldrh	r4, [r2, #0]
  4049c2:	3204      	adds	r2, #4
  4049c4:	2500      	movs	r5, #0
  4049c6:	2301      	movs	r3, #1
  4049c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4049ca:	2700      	movs	r7, #0
  4049cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4049d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4049d2:	1c4a      	adds	r2, r1, #1
  4049d4:	f000 8265 	beq.w	404ea2 <_svfprintf_r+0x6be>
  4049d8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4049dc:	9207      	str	r2, [sp, #28]
  4049de:	ea54 0205 	orrs.w	r2, r4, r5
  4049e2:	f040 8264 	bne.w	404eae <_svfprintf_r+0x6ca>
  4049e6:	2900      	cmp	r1, #0
  4049e8:	f040 843c 	bne.w	405264 <_svfprintf_r+0xa80>
  4049ec:	2b00      	cmp	r3, #0
  4049ee:	f040 84d7 	bne.w	4053a0 <_svfprintf_r+0xbbc>
  4049f2:	f01b 0301 	ands.w	r3, fp, #1
  4049f6:	930e      	str	r3, [sp, #56]	; 0x38
  4049f8:	f000 8604 	beq.w	405604 <_svfprintf_r+0xe20>
  4049fc:	ae42      	add	r6, sp, #264	; 0x108
  4049fe:	2330      	movs	r3, #48	; 0x30
  404a00:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a08:	4293      	cmp	r3, r2
  404a0a:	bfb8      	it	lt
  404a0c:	4613      	movlt	r3, r2
  404a0e:	9308      	str	r3, [sp, #32]
  404a10:	2300      	movs	r3, #0
  404a12:	9312      	str	r3, [sp, #72]	; 0x48
  404a14:	b117      	cbz	r7, 404a1c <_svfprintf_r+0x238>
  404a16:	9b08      	ldr	r3, [sp, #32]
  404a18:	3301      	adds	r3, #1
  404a1a:	9308      	str	r3, [sp, #32]
  404a1c:	9b07      	ldr	r3, [sp, #28]
  404a1e:	f013 0302 	ands.w	r3, r3, #2
  404a22:	9310      	str	r3, [sp, #64]	; 0x40
  404a24:	d002      	beq.n	404a2c <_svfprintf_r+0x248>
  404a26:	9b08      	ldr	r3, [sp, #32]
  404a28:	3302      	adds	r3, #2
  404a2a:	9308      	str	r3, [sp, #32]
  404a2c:	9b07      	ldr	r3, [sp, #28]
  404a2e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404a32:	f040 830e 	bne.w	405052 <_svfprintf_r+0x86e>
  404a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404a38:	9a08      	ldr	r2, [sp, #32]
  404a3a:	eba3 0b02 	sub.w	fp, r3, r2
  404a3e:	f1bb 0f00 	cmp.w	fp, #0
  404a42:	f340 8306 	ble.w	405052 <_svfprintf_r+0x86e>
  404a46:	f1bb 0f10 	cmp.w	fp, #16
  404a4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404a4e:	dd29      	ble.n	404aa4 <_svfprintf_r+0x2c0>
  404a50:	4643      	mov	r3, r8
  404a52:	4621      	mov	r1, r4
  404a54:	46a8      	mov	r8, r5
  404a56:	2710      	movs	r7, #16
  404a58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404a5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404a5c:	e006      	b.n	404a6c <_svfprintf_r+0x288>
  404a5e:	f1ab 0b10 	sub.w	fp, fp, #16
  404a62:	f1bb 0f10 	cmp.w	fp, #16
  404a66:	f103 0308 	add.w	r3, r3, #8
  404a6a:	dd18      	ble.n	404a9e <_svfprintf_r+0x2ba>
  404a6c:	3201      	adds	r2, #1
  404a6e:	48b7      	ldr	r0, [pc, #732]	; (404d4c <_svfprintf_r+0x568>)
  404a70:	9226      	str	r2, [sp, #152]	; 0x98
  404a72:	3110      	adds	r1, #16
  404a74:	2a07      	cmp	r2, #7
  404a76:	9127      	str	r1, [sp, #156]	; 0x9c
  404a78:	e883 0081 	stmia.w	r3, {r0, r7}
  404a7c:	ddef      	ble.n	404a5e <_svfprintf_r+0x27a>
  404a7e:	aa25      	add	r2, sp, #148	; 0x94
  404a80:	4629      	mov	r1, r5
  404a82:	4620      	mov	r0, r4
  404a84:	f002 ffd8 	bl	407a38 <__ssprint_r>
  404a88:	2800      	cmp	r0, #0
  404a8a:	f47f af7d 	bne.w	404988 <_svfprintf_r+0x1a4>
  404a8e:	f1ab 0b10 	sub.w	fp, fp, #16
  404a92:	f1bb 0f10 	cmp.w	fp, #16
  404a96:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404a9a:	464b      	mov	r3, r9
  404a9c:	dce6      	bgt.n	404a6c <_svfprintf_r+0x288>
  404a9e:	4645      	mov	r5, r8
  404aa0:	460c      	mov	r4, r1
  404aa2:	4698      	mov	r8, r3
  404aa4:	3201      	adds	r2, #1
  404aa6:	4ba9      	ldr	r3, [pc, #676]	; (404d4c <_svfprintf_r+0x568>)
  404aa8:	9226      	str	r2, [sp, #152]	; 0x98
  404aaa:	445c      	add	r4, fp
  404aac:	2a07      	cmp	r2, #7
  404aae:	9427      	str	r4, [sp, #156]	; 0x9c
  404ab0:	e888 0808 	stmia.w	r8, {r3, fp}
  404ab4:	f300 8498 	bgt.w	4053e8 <_svfprintf_r+0xc04>
  404ab8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404abc:	f108 0808 	add.w	r8, r8, #8
  404ac0:	b177      	cbz	r7, 404ae0 <_svfprintf_r+0x2fc>
  404ac2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ac4:	3301      	adds	r3, #1
  404ac6:	3401      	adds	r4, #1
  404ac8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404acc:	2201      	movs	r2, #1
  404ace:	2b07      	cmp	r3, #7
  404ad0:	9427      	str	r4, [sp, #156]	; 0x9c
  404ad2:	9326      	str	r3, [sp, #152]	; 0x98
  404ad4:	e888 0006 	stmia.w	r8, {r1, r2}
  404ad8:	f300 83db 	bgt.w	405292 <_svfprintf_r+0xaae>
  404adc:	f108 0808 	add.w	r8, r8, #8
  404ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ae2:	b16b      	cbz	r3, 404b00 <_svfprintf_r+0x31c>
  404ae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ae6:	3301      	adds	r3, #1
  404ae8:	3402      	adds	r4, #2
  404aea:	a91e      	add	r1, sp, #120	; 0x78
  404aec:	2202      	movs	r2, #2
  404aee:	2b07      	cmp	r3, #7
  404af0:	9427      	str	r4, [sp, #156]	; 0x9c
  404af2:	9326      	str	r3, [sp, #152]	; 0x98
  404af4:	e888 0006 	stmia.w	r8, {r1, r2}
  404af8:	f300 83d6 	bgt.w	4052a8 <_svfprintf_r+0xac4>
  404afc:	f108 0808 	add.w	r8, r8, #8
  404b00:	2d80      	cmp	r5, #128	; 0x80
  404b02:	f000 8315 	beq.w	405130 <_svfprintf_r+0x94c>
  404b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b0a:	1a9f      	subs	r7, r3, r2
  404b0c:	2f00      	cmp	r7, #0
  404b0e:	dd36      	ble.n	404b7e <_svfprintf_r+0x39a>
  404b10:	2f10      	cmp	r7, #16
  404b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b14:	4d8e      	ldr	r5, [pc, #568]	; (404d50 <_svfprintf_r+0x56c>)
  404b16:	dd27      	ble.n	404b68 <_svfprintf_r+0x384>
  404b18:	4642      	mov	r2, r8
  404b1a:	4621      	mov	r1, r4
  404b1c:	46b0      	mov	r8, r6
  404b1e:	f04f 0b10 	mov.w	fp, #16
  404b22:	462e      	mov	r6, r5
  404b24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404b26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404b28:	e004      	b.n	404b34 <_svfprintf_r+0x350>
  404b2a:	3f10      	subs	r7, #16
  404b2c:	2f10      	cmp	r7, #16
  404b2e:	f102 0208 	add.w	r2, r2, #8
  404b32:	dd15      	ble.n	404b60 <_svfprintf_r+0x37c>
  404b34:	3301      	adds	r3, #1
  404b36:	3110      	adds	r1, #16
  404b38:	2b07      	cmp	r3, #7
  404b3a:	9127      	str	r1, [sp, #156]	; 0x9c
  404b3c:	9326      	str	r3, [sp, #152]	; 0x98
  404b3e:	e882 0840 	stmia.w	r2, {r6, fp}
  404b42:	ddf2      	ble.n	404b2a <_svfprintf_r+0x346>
  404b44:	aa25      	add	r2, sp, #148	; 0x94
  404b46:	4629      	mov	r1, r5
  404b48:	4620      	mov	r0, r4
  404b4a:	f002 ff75 	bl	407a38 <__ssprint_r>
  404b4e:	2800      	cmp	r0, #0
  404b50:	f47f af1a 	bne.w	404988 <_svfprintf_r+0x1a4>
  404b54:	3f10      	subs	r7, #16
  404b56:	2f10      	cmp	r7, #16
  404b58:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b5c:	464a      	mov	r2, r9
  404b5e:	dce9      	bgt.n	404b34 <_svfprintf_r+0x350>
  404b60:	4635      	mov	r5, r6
  404b62:	460c      	mov	r4, r1
  404b64:	4646      	mov	r6, r8
  404b66:	4690      	mov	r8, r2
  404b68:	3301      	adds	r3, #1
  404b6a:	443c      	add	r4, r7
  404b6c:	2b07      	cmp	r3, #7
  404b6e:	9427      	str	r4, [sp, #156]	; 0x9c
  404b70:	9326      	str	r3, [sp, #152]	; 0x98
  404b72:	e888 00a0 	stmia.w	r8, {r5, r7}
  404b76:	f300 8381 	bgt.w	40527c <_svfprintf_r+0xa98>
  404b7a:	f108 0808 	add.w	r8, r8, #8
  404b7e:	9b07      	ldr	r3, [sp, #28]
  404b80:	05df      	lsls	r7, r3, #23
  404b82:	f100 8268 	bmi.w	405056 <_svfprintf_r+0x872>
  404b86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404b88:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b8a:	f8c8 6000 	str.w	r6, [r8]
  404b8e:	3301      	adds	r3, #1
  404b90:	440c      	add	r4, r1
  404b92:	2b07      	cmp	r3, #7
  404b94:	9427      	str	r4, [sp, #156]	; 0x9c
  404b96:	f8c8 1004 	str.w	r1, [r8, #4]
  404b9a:	9326      	str	r3, [sp, #152]	; 0x98
  404b9c:	f300 834d 	bgt.w	40523a <_svfprintf_r+0xa56>
  404ba0:	f108 0808 	add.w	r8, r8, #8
  404ba4:	9b07      	ldr	r3, [sp, #28]
  404ba6:	075b      	lsls	r3, r3, #29
  404ba8:	d53a      	bpl.n	404c20 <_svfprintf_r+0x43c>
  404baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404bac:	9a08      	ldr	r2, [sp, #32]
  404bae:	1a9d      	subs	r5, r3, r2
  404bb0:	2d00      	cmp	r5, #0
  404bb2:	dd35      	ble.n	404c20 <_svfprintf_r+0x43c>
  404bb4:	2d10      	cmp	r5, #16
  404bb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bb8:	dd20      	ble.n	404bfc <_svfprintf_r+0x418>
  404bba:	2610      	movs	r6, #16
  404bbc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404bbe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404bc2:	e004      	b.n	404bce <_svfprintf_r+0x3ea>
  404bc4:	3d10      	subs	r5, #16
  404bc6:	2d10      	cmp	r5, #16
  404bc8:	f108 0808 	add.w	r8, r8, #8
  404bcc:	dd16      	ble.n	404bfc <_svfprintf_r+0x418>
  404bce:	3301      	adds	r3, #1
  404bd0:	4a5e      	ldr	r2, [pc, #376]	; (404d4c <_svfprintf_r+0x568>)
  404bd2:	9326      	str	r3, [sp, #152]	; 0x98
  404bd4:	3410      	adds	r4, #16
  404bd6:	2b07      	cmp	r3, #7
  404bd8:	9427      	str	r4, [sp, #156]	; 0x9c
  404bda:	e888 0044 	stmia.w	r8, {r2, r6}
  404bde:	ddf1      	ble.n	404bc4 <_svfprintf_r+0x3e0>
  404be0:	aa25      	add	r2, sp, #148	; 0x94
  404be2:	4659      	mov	r1, fp
  404be4:	4638      	mov	r0, r7
  404be6:	f002 ff27 	bl	407a38 <__ssprint_r>
  404bea:	2800      	cmp	r0, #0
  404bec:	f47f aecc 	bne.w	404988 <_svfprintf_r+0x1a4>
  404bf0:	3d10      	subs	r5, #16
  404bf2:	2d10      	cmp	r5, #16
  404bf4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bf8:	46c8      	mov	r8, r9
  404bfa:	dce8      	bgt.n	404bce <_svfprintf_r+0x3ea>
  404bfc:	3301      	adds	r3, #1
  404bfe:	4a53      	ldr	r2, [pc, #332]	; (404d4c <_svfprintf_r+0x568>)
  404c00:	9326      	str	r3, [sp, #152]	; 0x98
  404c02:	442c      	add	r4, r5
  404c04:	2b07      	cmp	r3, #7
  404c06:	9427      	str	r4, [sp, #156]	; 0x9c
  404c08:	e888 0024 	stmia.w	r8, {r2, r5}
  404c0c:	dd08      	ble.n	404c20 <_svfprintf_r+0x43c>
  404c0e:	aa25      	add	r2, sp, #148	; 0x94
  404c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c14:	f002 ff10 	bl	407a38 <__ssprint_r>
  404c18:	2800      	cmp	r0, #0
  404c1a:	f47f aeb5 	bne.w	404988 <_svfprintf_r+0x1a4>
  404c1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404c24:	9908      	ldr	r1, [sp, #32]
  404c26:	428a      	cmp	r2, r1
  404c28:	bfac      	ite	ge
  404c2a:	189b      	addge	r3, r3, r2
  404c2c:	185b      	addlt	r3, r3, r1
  404c2e:	9309      	str	r3, [sp, #36]	; 0x24
  404c30:	2c00      	cmp	r4, #0
  404c32:	f040 830d 	bne.w	405250 <_svfprintf_r+0xa6c>
  404c36:	2300      	movs	r3, #0
  404c38:	9326      	str	r3, [sp, #152]	; 0x98
  404c3a:	46c8      	mov	r8, r9
  404c3c:	e5f9      	b.n	404832 <_svfprintf_r+0x4e>
  404c3e:	9311      	str	r3, [sp, #68]	; 0x44
  404c40:	f01b 0320 	ands.w	r3, fp, #32
  404c44:	f040 81e3 	bne.w	40500e <_svfprintf_r+0x82a>
  404c48:	f01b 0210 	ands.w	r2, fp, #16
  404c4c:	f040 842e 	bne.w	4054ac <_svfprintf_r+0xcc8>
  404c50:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404c54:	f000 842a 	beq.w	4054ac <_svfprintf_r+0xcc8>
  404c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404c5a:	4613      	mov	r3, r2
  404c5c:	460a      	mov	r2, r1
  404c5e:	3204      	adds	r2, #4
  404c60:	880c      	ldrh	r4, [r1, #0]
  404c62:	920f      	str	r2, [sp, #60]	; 0x3c
  404c64:	2500      	movs	r5, #0
  404c66:	e6b0      	b.n	4049ca <_svfprintf_r+0x1e6>
  404c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404c6a:	9311      	str	r3, [sp, #68]	; 0x44
  404c6c:	6816      	ldr	r6, [r2, #0]
  404c6e:	2400      	movs	r4, #0
  404c70:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404c74:	1d15      	adds	r5, r2, #4
  404c76:	2e00      	cmp	r6, #0
  404c78:	f000 86a7 	beq.w	4059ca <_svfprintf_r+0x11e6>
  404c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c7e:	1c53      	adds	r3, r2, #1
  404c80:	f000 8609 	beq.w	405896 <_svfprintf_r+0x10b2>
  404c84:	4621      	mov	r1, r4
  404c86:	4630      	mov	r0, r6
  404c88:	f002 faca 	bl	407220 <memchr>
  404c8c:	2800      	cmp	r0, #0
  404c8e:	f000 86e1 	beq.w	405a54 <_svfprintf_r+0x1270>
  404c92:	1b83      	subs	r3, r0, r6
  404c94:	930e      	str	r3, [sp, #56]	; 0x38
  404c96:	940a      	str	r4, [sp, #40]	; 0x28
  404c98:	950f      	str	r5, [sp, #60]	; 0x3c
  404c9a:	f8cd b01c 	str.w	fp, [sp, #28]
  404c9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ca2:	9308      	str	r3, [sp, #32]
  404ca4:	9412      	str	r4, [sp, #72]	; 0x48
  404ca6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404caa:	e6b3      	b.n	404a14 <_svfprintf_r+0x230>
  404cac:	f89a 3000 	ldrb.w	r3, [sl]
  404cb0:	2201      	movs	r2, #1
  404cb2:	212b      	movs	r1, #43	; 0x2b
  404cb4:	e5ee      	b.n	404894 <_svfprintf_r+0xb0>
  404cb6:	f04b 0b20 	orr.w	fp, fp, #32
  404cba:	f89a 3000 	ldrb.w	r3, [sl]
  404cbe:	e5e9      	b.n	404894 <_svfprintf_r+0xb0>
  404cc0:	9311      	str	r3, [sp, #68]	; 0x44
  404cc2:	2a00      	cmp	r2, #0
  404cc4:	f040 8795 	bne.w	405bf2 <_svfprintf_r+0x140e>
  404cc8:	4b22      	ldr	r3, [pc, #136]	; (404d54 <_svfprintf_r+0x570>)
  404cca:	9318      	str	r3, [sp, #96]	; 0x60
  404ccc:	f01b 0f20 	tst.w	fp, #32
  404cd0:	f040 8111 	bne.w	404ef6 <_svfprintf_r+0x712>
  404cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404cd6:	f01b 0f10 	tst.w	fp, #16
  404cda:	4613      	mov	r3, r2
  404cdc:	f040 83e1 	bne.w	4054a2 <_svfprintf_r+0xcbe>
  404ce0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404ce4:	f000 83dd 	beq.w	4054a2 <_svfprintf_r+0xcbe>
  404ce8:	3304      	adds	r3, #4
  404cea:	8814      	ldrh	r4, [r2, #0]
  404cec:	930f      	str	r3, [sp, #60]	; 0x3c
  404cee:	2500      	movs	r5, #0
  404cf0:	f01b 0f01 	tst.w	fp, #1
  404cf4:	f000 810c 	beq.w	404f10 <_svfprintf_r+0x72c>
  404cf8:	ea54 0305 	orrs.w	r3, r4, r5
  404cfc:	f000 8108 	beq.w	404f10 <_svfprintf_r+0x72c>
  404d00:	2330      	movs	r3, #48	; 0x30
  404d02:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404d06:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404d0a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404d0e:	f04b 0b02 	orr.w	fp, fp, #2
  404d12:	2302      	movs	r3, #2
  404d14:	e659      	b.n	4049ca <_svfprintf_r+0x1e6>
  404d16:	f89a 3000 	ldrb.w	r3, [sl]
  404d1a:	2900      	cmp	r1, #0
  404d1c:	f47f adba 	bne.w	404894 <_svfprintf_r+0xb0>
  404d20:	2201      	movs	r2, #1
  404d22:	2120      	movs	r1, #32
  404d24:	e5b6      	b.n	404894 <_svfprintf_r+0xb0>
  404d26:	f04b 0b01 	orr.w	fp, fp, #1
  404d2a:	f89a 3000 	ldrb.w	r3, [sl]
  404d2e:	e5b1      	b.n	404894 <_svfprintf_r+0xb0>
  404d30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404d32:	6823      	ldr	r3, [r4, #0]
  404d34:	930d      	str	r3, [sp, #52]	; 0x34
  404d36:	4618      	mov	r0, r3
  404d38:	2800      	cmp	r0, #0
  404d3a:	4623      	mov	r3, r4
  404d3c:	f103 0304 	add.w	r3, r3, #4
  404d40:	f6ff ae0a 	blt.w	404958 <_svfprintf_r+0x174>
  404d44:	930f      	str	r3, [sp, #60]	; 0x3c
  404d46:	f89a 3000 	ldrb.w	r3, [sl]
  404d4a:	e5a3      	b.n	404894 <_svfprintf_r+0xb0>
  404d4c:	00409b04 	.word	0x00409b04
  404d50:	00409b14 	.word	0x00409b14
  404d54:	00409ae4 	.word	0x00409ae4
  404d58:	f04b 0b10 	orr.w	fp, fp, #16
  404d5c:	f01b 0f20 	tst.w	fp, #32
  404d60:	9311      	str	r3, [sp, #68]	; 0x44
  404d62:	f43f ae23 	beq.w	4049ac <_svfprintf_r+0x1c8>
  404d66:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404d68:	3507      	adds	r5, #7
  404d6a:	f025 0307 	bic.w	r3, r5, #7
  404d6e:	f103 0208 	add.w	r2, r3, #8
  404d72:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d76:	920f      	str	r2, [sp, #60]	; 0x3c
  404d78:	2301      	movs	r3, #1
  404d7a:	e626      	b.n	4049ca <_svfprintf_r+0x1e6>
  404d7c:	f89a 3000 	ldrb.w	r3, [sl]
  404d80:	2b2a      	cmp	r3, #42	; 0x2a
  404d82:	f10a 0401 	add.w	r4, sl, #1
  404d86:	f000 8727 	beq.w	405bd8 <_svfprintf_r+0x13f4>
  404d8a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d8e:	2809      	cmp	r0, #9
  404d90:	46a2      	mov	sl, r4
  404d92:	f200 86ad 	bhi.w	405af0 <_svfprintf_r+0x130c>
  404d96:	2300      	movs	r3, #0
  404d98:	461c      	mov	r4, r3
  404d9a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404d9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404da2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404da6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404daa:	2809      	cmp	r0, #9
  404dac:	d9f5      	bls.n	404d9a <_svfprintf_r+0x5b6>
  404dae:	940a      	str	r4, [sp, #40]	; 0x28
  404db0:	e572      	b.n	404898 <_svfprintf_r+0xb4>
  404db2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404db6:	f89a 3000 	ldrb.w	r3, [sl]
  404dba:	e56b      	b.n	404894 <_svfprintf_r+0xb0>
  404dbc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404dc0:	f89a 3000 	ldrb.w	r3, [sl]
  404dc4:	e566      	b.n	404894 <_svfprintf_r+0xb0>
  404dc6:	f89a 3000 	ldrb.w	r3, [sl]
  404dca:	2b6c      	cmp	r3, #108	; 0x6c
  404dcc:	bf03      	ittte	eq
  404dce:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404dd2:	f04b 0b20 	orreq.w	fp, fp, #32
  404dd6:	f10a 0a01 	addeq.w	sl, sl, #1
  404dda:	f04b 0b10 	orrne.w	fp, fp, #16
  404dde:	e559      	b.n	404894 <_svfprintf_r+0xb0>
  404de0:	2a00      	cmp	r2, #0
  404de2:	f040 8711 	bne.w	405c08 <_svfprintf_r+0x1424>
  404de6:	f01b 0f20 	tst.w	fp, #32
  404dea:	f040 84f9 	bne.w	4057e0 <_svfprintf_r+0xffc>
  404dee:	f01b 0f10 	tst.w	fp, #16
  404df2:	f040 84ac 	bne.w	40574e <_svfprintf_r+0xf6a>
  404df6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404dfa:	f000 84a8 	beq.w	40574e <_svfprintf_r+0xf6a>
  404dfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e00:	6813      	ldr	r3, [r2, #0]
  404e02:	3204      	adds	r2, #4
  404e04:	920f      	str	r2, [sp, #60]	; 0x3c
  404e06:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404e0a:	801a      	strh	r2, [r3, #0]
  404e0c:	e511      	b.n	404832 <_svfprintf_r+0x4e>
  404e0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404e10:	4bb3      	ldr	r3, [pc, #716]	; (4050e0 <_svfprintf_r+0x8fc>)
  404e12:	680c      	ldr	r4, [r1, #0]
  404e14:	9318      	str	r3, [sp, #96]	; 0x60
  404e16:	2230      	movs	r2, #48	; 0x30
  404e18:	2378      	movs	r3, #120	; 0x78
  404e1a:	3104      	adds	r1, #4
  404e1c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404e20:	9311      	str	r3, [sp, #68]	; 0x44
  404e22:	f04b 0b02 	orr.w	fp, fp, #2
  404e26:	910f      	str	r1, [sp, #60]	; 0x3c
  404e28:	2500      	movs	r5, #0
  404e2a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404e2e:	2302      	movs	r3, #2
  404e30:	e5cb      	b.n	4049ca <_svfprintf_r+0x1e6>
  404e32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404e34:	9311      	str	r3, [sp, #68]	; 0x44
  404e36:	680a      	ldr	r2, [r1, #0]
  404e38:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404e3c:	2300      	movs	r3, #0
  404e3e:	460a      	mov	r2, r1
  404e40:	461f      	mov	r7, r3
  404e42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404e46:	3204      	adds	r2, #4
  404e48:	2301      	movs	r3, #1
  404e4a:	9308      	str	r3, [sp, #32]
  404e4c:	f8cd b01c 	str.w	fp, [sp, #28]
  404e50:	970a      	str	r7, [sp, #40]	; 0x28
  404e52:	9712      	str	r7, [sp, #72]	; 0x48
  404e54:	920f      	str	r2, [sp, #60]	; 0x3c
  404e56:	930e      	str	r3, [sp, #56]	; 0x38
  404e58:	ae28      	add	r6, sp, #160	; 0xa0
  404e5a:	e5df      	b.n	404a1c <_svfprintf_r+0x238>
  404e5c:	9311      	str	r3, [sp, #68]	; 0x44
  404e5e:	2a00      	cmp	r2, #0
  404e60:	f040 86ea 	bne.w	405c38 <_svfprintf_r+0x1454>
  404e64:	f01b 0f20 	tst.w	fp, #32
  404e68:	d15d      	bne.n	404f26 <_svfprintf_r+0x742>
  404e6a:	f01b 0f10 	tst.w	fp, #16
  404e6e:	f040 8308 	bne.w	405482 <_svfprintf_r+0xc9e>
  404e72:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404e76:	f000 8304 	beq.w	405482 <_svfprintf_r+0xc9e>
  404e7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404e7c:	f9b1 4000 	ldrsh.w	r4, [r1]
  404e80:	3104      	adds	r1, #4
  404e82:	17e5      	asrs	r5, r4, #31
  404e84:	4622      	mov	r2, r4
  404e86:	462b      	mov	r3, r5
  404e88:	910f      	str	r1, [sp, #60]	; 0x3c
  404e8a:	2a00      	cmp	r2, #0
  404e8c:	f173 0300 	sbcs.w	r3, r3, #0
  404e90:	db58      	blt.n	404f44 <_svfprintf_r+0x760>
  404e92:	990a      	ldr	r1, [sp, #40]	; 0x28
  404e94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404e98:	1c4a      	adds	r2, r1, #1
  404e9a:	f04f 0301 	mov.w	r3, #1
  404e9e:	f47f ad9b 	bne.w	4049d8 <_svfprintf_r+0x1f4>
  404ea2:	ea54 0205 	orrs.w	r2, r4, r5
  404ea6:	f000 81df 	beq.w	405268 <_svfprintf_r+0xa84>
  404eaa:	f8cd b01c 	str.w	fp, [sp, #28]
  404eae:	2b01      	cmp	r3, #1
  404eb0:	f000 827b 	beq.w	4053aa <_svfprintf_r+0xbc6>
  404eb4:	2b02      	cmp	r3, #2
  404eb6:	f040 8206 	bne.w	4052c6 <_svfprintf_r+0xae2>
  404eba:	9818      	ldr	r0, [sp, #96]	; 0x60
  404ebc:	464e      	mov	r6, r9
  404ebe:	0923      	lsrs	r3, r4, #4
  404ec0:	f004 010f 	and.w	r1, r4, #15
  404ec4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404ec8:	092a      	lsrs	r2, r5, #4
  404eca:	461c      	mov	r4, r3
  404ecc:	4615      	mov	r5, r2
  404ece:	5c43      	ldrb	r3, [r0, r1]
  404ed0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404ed4:	ea54 0305 	orrs.w	r3, r4, r5
  404ed8:	d1f1      	bne.n	404ebe <_svfprintf_r+0x6da>
  404eda:	eba9 0306 	sub.w	r3, r9, r6
  404ede:	930e      	str	r3, [sp, #56]	; 0x38
  404ee0:	e590      	b.n	404a04 <_svfprintf_r+0x220>
  404ee2:	9311      	str	r3, [sp, #68]	; 0x44
  404ee4:	2a00      	cmp	r2, #0
  404ee6:	f040 86a3 	bne.w	405c30 <_svfprintf_r+0x144c>
  404eea:	4b7e      	ldr	r3, [pc, #504]	; (4050e4 <_svfprintf_r+0x900>)
  404eec:	9318      	str	r3, [sp, #96]	; 0x60
  404eee:	f01b 0f20 	tst.w	fp, #32
  404ef2:	f43f aeef 	beq.w	404cd4 <_svfprintf_r+0x4f0>
  404ef6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404ef8:	3507      	adds	r5, #7
  404efa:	f025 0307 	bic.w	r3, r5, #7
  404efe:	f103 0208 	add.w	r2, r3, #8
  404f02:	f01b 0f01 	tst.w	fp, #1
  404f06:	920f      	str	r2, [sp, #60]	; 0x3c
  404f08:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f0c:	f47f aef4 	bne.w	404cf8 <_svfprintf_r+0x514>
  404f10:	2302      	movs	r3, #2
  404f12:	e55a      	b.n	4049ca <_svfprintf_r+0x1e6>
  404f14:	9311      	str	r3, [sp, #68]	; 0x44
  404f16:	2a00      	cmp	r2, #0
  404f18:	f040 8686 	bne.w	405c28 <_svfprintf_r+0x1444>
  404f1c:	f04b 0b10 	orr.w	fp, fp, #16
  404f20:	f01b 0f20 	tst.w	fp, #32
  404f24:	d0a1      	beq.n	404e6a <_svfprintf_r+0x686>
  404f26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f28:	3507      	adds	r5, #7
  404f2a:	f025 0507 	bic.w	r5, r5, #7
  404f2e:	e9d5 2300 	ldrd	r2, r3, [r5]
  404f32:	2a00      	cmp	r2, #0
  404f34:	f105 0108 	add.w	r1, r5, #8
  404f38:	461d      	mov	r5, r3
  404f3a:	f173 0300 	sbcs.w	r3, r3, #0
  404f3e:	910f      	str	r1, [sp, #60]	; 0x3c
  404f40:	4614      	mov	r4, r2
  404f42:	daa6      	bge.n	404e92 <_svfprintf_r+0x6ae>
  404f44:	272d      	movs	r7, #45	; 0x2d
  404f46:	4264      	negs	r4, r4
  404f48:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404f4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404f50:	2301      	movs	r3, #1
  404f52:	e53d      	b.n	4049d0 <_svfprintf_r+0x1ec>
  404f54:	9311      	str	r3, [sp, #68]	; 0x44
  404f56:	2a00      	cmp	r2, #0
  404f58:	f040 8662 	bne.w	405c20 <_svfprintf_r+0x143c>
  404f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f5e:	3507      	adds	r5, #7
  404f60:	f025 0307 	bic.w	r3, r5, #7
  404f64:	f103 0208 	add.w	r2, r3, #8
  404f68:	920f      	str	r2, [sp, #60]	; 0x3c
  404f6a:	681a      	ldr	r2, [r3, #0]
  404f6c:	9215      	str	r2, [sp, #84]	; 0x54
  404f6e:	685b      	ldr	r3, [r3, #4]
  404f70:	9314      	str	r3, [sp, #80]	; 0x50
  404f72:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404f74:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404f76:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404f7a:	4628      	mov	r0, r5
  404f7c:	4621      	mov	r1, r4
  404f7e:	f04f 32ff 	mov.w	r2, #4294967295
  404f82:	4b59      	ldr	r3, [pc, #356]	; (4050e8 <_svfprintf_r+0x904>)
  404f84:	f003 fe1e 	bl	408bc4 <__aeabi_dcmpun>
  404f88:	2800      	cmp	r0, #0
  404f8a:	f040 834a 	bne.w	405622 <_svfprintf_r+0xe3e>
  404f8e:	4628      	mov	r0, r5
  404f90:	4621      	mov	r1, r4
  404f92:	f04f 32ff 	mov.w	r2, #4294967295
  404f96:	4b54      	ldr	r3, [pc, #336]	; (4050e8 <_svfprintf_r+0x904>)
  404f98:	f003 fdf6 	bl	408b88 <__aeabi_dcmple>
  404f9c:	2800      	cmp	r0, #0
  404f9e:	f040 8340 	bne.w	405622 <_svfprintf_r+0xe3e>
  404fa2:	a815      	add	r0, sp, #84	; 0x54
  404fa4:	c80d      	ldmia	r0, {r0, r2, r3}
  404fa6:	9914      	ldr	r1, [sp, #80]	; 0x50
  404fa8:	f003 fde4 	bl	408b74 <__aeabi_dcmplt>
  404fac:	2800      	cmp	r0, #0
  404fae:	f040 8530 	bne.w	405a12 <_svfprintf_r+0x122e>
  404fb2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404fb6:	4e4d      	ldr	r6, [pc, #308]	; (4050ec <_svfprintf_r+0x908>)
  404fb8:	4b4d      	ldr	r3, [pc, #308]	; (4050f0 <_svfprintf_r+0x90c>)
  404fba:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404fbe:	9007      	str	r0, [sp, #28]
  404fc0:	9811      	ldr	r0, [sp, #68]	; 0x44
  404fc2:	2203      	movs	r2, #3
  404fc4:	2100      	movs	r1, #0
  404fc6:	9208      	str	r2, [sp, #32]
  404fc8:	910a      	str	r1, [sp, #40]	; 0x28
  404fca:	2847      	cmp	r0, #71	; 0x47
  404fcc:	bfd8      	it	le
  404fce:	461e      	movle	r6, r3
  404fd0:	920e      	str	r2, [sp, #56]	; 0x38
  404fd2:	9112      	str	r1, [sp, #72]	; 0x48
  404fd4:	e51e      	b.n	404a14 <_svfprintf_r+0x230>
  404fd6:	f04b 0b08 	orr.w	fp, fp, #8
  404fda:	f89a 3000 	ldrb.w	r3, [sl]
  404fde:	e459      	b.n	404894 <_svfprintf_r+0xb0>
  404fe0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404fe4:	2300      	movs	r3, #0
  404fe6:	461c      	mov	r4, r3
  404fe8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404fec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ff0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404ff4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ff8:	2809      	cmp	r0, #9
  404ffa:	d9f5      	bls.n	404fe8 <_svfprintf_r+0x804>
  404ffc:	940d      	str	r4, [sp, #52]	; 0x34
  404ffe:	e44b      	b.n	404898 <_svfprintf_r+0xb4>
  405000:	f04b 0b10 	orr.w	fp, fp, #16
  405004:	9311      	str	r3, [sp, #68]	; 0x44
  405006:	f01b 0320 	ands.w	r3, fp, #32
  40500a:	f43f ae1d 	beq.w	404c48 <_svfprintf_r+0x464>
  40500e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405010:	3507      	adds	r5, #7
  405012:	f025 0307 	bic.w	r3, r5, #7
  405016:	f103 0208 	add.w	r2, r3, #8
  40501a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40501e:	920f      	str	r2, [sp, #60]	; 0x3c
  405020:	2300      	movs	r3, #0
  405022:	e4d2      	b.n	4049ca <_svfprintf_r+0x1e6>
  405024:	9311      	str	r3, [sp, #68]	; 0x44
  405026:	2a00      	cmp	r2, #0
  405028:	f040 85e7 	bne.w	405bfa <_svfprintf_r+0x1416>
  40502c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40502e:	2a00      	cmp	r2, #0
  405030:	f43f aca3 	beq.w	40497a <_svfprintf_r+0x196>
  405034:	2300      	movs	r3, #0
  405036:	2101      	movs	r1, #1
  405038:	461f      	mov	r7, r3
  40503a:	9108      	str	r1, [sp, #32]
  40503c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  405040:	f8cd b01c 	str.w	fp, [sp, #28]
  405044:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405048:	930a      	str	r3, [sp, #40]	; 0x28
  40504a:	9312      	str	r3, [sp, #72]	; 0x48
  40504c:	910e      	str	r1, [sp, #56]	; 0x38
  40504e:	ae28      	add	r6, sp, #160	; 0xa0
  405050:	e4e4      	b.n	404a1c <_svfprintf_r+0x238>
  405052:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405054:	e534      	b.n	404ac0 <_svfprintf_r+0x2dc>
  405056:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405058:	2b65      	cmp	r3, #101	; 0x65
  40505a:	f340 80a7 	ble.w	4051ac <_svfprintf_r+0x9c8>
  40505e:	a815      	add	r0, sp, #84	; 0x54
  405060:	c80d      	ldmia	r0, {r0, r2, r3}
  405062:	9914      	ldr	r1, [sp, #80]	; 0x50
  405064:	f003 fd7c 	bl	408b60 <__aeabi_dcmpeq>
  405068:	2800      	cmp	r0, #0
  40506a:	f000 8150 	beq.w	40530e <_svfprintf_r+0xb2a>
  40506e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405070:	4a20      	ldr	r2, [pc, #128]	; (4050f4 <_svfprintf_r+0x910>)
  405072:	f8c8 2000 	str.w	r2, [r8]
  405076:	3301      	adds	r3, #1
  405078:	3401      	adds	r4, #1
  40507a:	2201      	movs	r2, #1
  40507c:	2b07      	cmp	r3, #7
  40507e:	9427      	str	r4, [sp, #156]	; 0x9c
  405080:	9326      	str	r3, [sp, #152]	; 0x98
  405082:	f8c8 2004 	str.w	r2, [r8, #4]
  405086:	f300 836a 	bgt.w	40575e <_svfprintf_r+0xf7a>
  40508a:	f108 0808 	add.w	r8, r8, #8
  40508e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405092:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405094:	4293      	cmp	r3, r2
  405096:	db03      	blt.n	4050a0 <_svfprintf_r+0x8bc>
  405098:	9b07      	ldr	r3, [sp, #28]
  40509a:	07dd      	lsls	r5, r3, #31
  40509c:	f57f ad82 	bpl.w	404ba4 <_svfprintf_r+0x3c0>
  4050a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050a2:	9919      	ldr	r1, [sp, #100]	; 0x64
  4050a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4050a6:	f8c8 2000 	str.w	r2, [r8]
  4050aa:	3301      	adds	r3, #1
  4050ac:	440c      	add	r4, r1
  4050ae:	2b07      	cmp	r3, #7
  4050b0:	f8c8 1004 	str.w	r1, [r8, #4]
  4050b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4050b6:	9326      	str	r3, [sp, #152]	; 0x98
  4050b8:	f300 839e 	bgt.w	4057f8 <_svfprintf_r+0x1014>
  4050bc:	f108 0808 	add.w	r8, r8, #8
  4050c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4050c2:	1e5e      	subs	r6, r3, #1
  4050c4:	2e00      	cmp	r6, #0
  4050c6:	f77f ad6d 	ble.w	404ba4 <_svfprintf_r+0x3c0>
  4050ca:	2e10      	cmp	r6, #16
  4050cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050ce:	4d0a      	ldr	r5, [pc, #40]	; (4050f8 <_svfprintf_r+0x914>)
  4050d0:	f340 81f5 	ble.w	4054be <_svfprintf_r+0xcda>
  4050d4:	4622      	mov	r2, r4
  4050d6:	2710      	movs	r7, #16
  4050d8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4050dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4050de:	e013      	b.n	405108 <_svfprintf_r+0x924>
  4050e0:	00409ae4 	.word	0x00409ae4
  4050e4:	00409ad0 	.word	0x00409ad0
  4050e8:	7fefffff 	.word	0x7fefffff
  4050ec:	00409ac4 	.word	0x00409ac4
  4050f0:	00409ac0 	.word	0x00409ac0
  4050f4:	00409b00 	.word	0x00409b00
  4050f8:	00409b14 	.word	0x00409b14
  4050fc:	f108 0808 	add.w	r8, r8, #8
  405100:	3e10      	subs	r6, #16
  405102:	2e10      	cmp	r6, #16
  405104:	f340 81da 	ble.w	4054bc <_svfprintf_r+0xcd8>
  405108:	3301      	adds	r3, #1
  40510a:	3210      	adds	r2, #16
  40510c:	2b07      	cmp	r3, #7
  40510e:	9227      	str	r2, [sp, #156]	; 0x9c
  405110:	9326      	str	r3, [sp, #152]	; 0x98
  405112:	e888 00a0 	stmia.w	r8, {r5, r7}
  405116:	ddf1      	ble.n	4050fc <_svfprintf_r+0x918>
  405118:	aa25      	add	r2, sp, #148	; 0x94
  40511a:	4621      	mov	r1, r4
  40511c:	4658      	mov	r0, fp
  40511e:	f002 fc8b 	bl	407a38 <__ssprint_r>
  405122:	2800      	cmp	r0, #0
  405124:	f47f ac30 	bne.w	404988 <_svfprintf_r+0x1a4>
  405128:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40512a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40512c:	46c8      	mov	r8, r9
  40512e:	e7e7      	b.n	405100 <_svfprintf_r+0x91c>
  405130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405132:	9a08      	ldr	r2, [sp, #32]
  405134:	1a9f      	subs	r7, r3, r2
  405136:	2f00      	cmp	r7, #0
  405138:	f77f ace5 	ble.w	404b06 <_svfprintf_r+0x322>
  40513c:	2f10      	cmp	r7, #16
  40513e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405140:	4db6      	ldr	r5, [pc, #728]	; (40541c <_svfprintf_r+0xc38>)
  405142:	dd27      	ble.n	405194 <_svfprintf_r+0x9b0>
  405144:	4642      	mov	r2, r8
  405146:	4621      	mov	r1, r4
  405148:	46b0      	mov	r8, r6
  40514a:	f04f 0b10 	mov.w	fp, #16
  40514e:	462e      	mov	r6, r5
  405150:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405152:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405154:	e004      	b.n	405160 <_svfprintf_r+0x97c>
  405156:	3f10      	subs	r7, #16
  405158:	2f10      	cmp	r7, #16
  40515a:	f102 0208 	add.w	r2, r2, #8
  40515e:	dd15      	ble.n	40518c <_svfprintf_r+0x9a8>
  405160:	3301      	adds	r3, #1
  405162:	3110      	adds	r1, #16
  405164:	2b07      	cmp	r3, #7
  405166:	9127      	str	r1, [sp, #156]	; 0x9c
  405168:	9326      	str	r3, [sp, #152]	; 0x98
  40516a:	e882 0840 	stmia.w	r2, {r6, fp}
  40516e:	ddf2      	ble.n	405156 <_svfprintf_r+0x972>
  405170:	aa25      	add	r2, sp, #148	; 0x94
  405172:	4629      	mov	r1, r5
  405174:	4620      	mov	r0, r4
  405176:	f002 fc5f 	bl	407a38 <__ssprint_r>
  40517a:	2800      	cmp	r0, #0
  40517c:	f47f ac04 	bne.w	404988 <_svfprintf_r+0x1a4>
  405180:	3f10      	subs	r7, #16
  405182:	2f10      	cmp	r7, #16
  405184:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405186:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405188:	464a      	mov	r2, r9
  40518a:	dce9      	bgt.n	405160 <_svfprintf_r+0x97c>
  40518c:	4635      	mov	r5, r6
  40518e:	460c      	mov	r4, r1
  405190:	4646      	mov	r6, r8
  405192:	4690      	mov	r8, r2
  405194:	3301      	adds	r3, #1
  405196:	443c      	add	r4, r7
  405198:	2b07      	cmp	r3, #7
  40519a:	9427      	str	r4, [sp, #156]	; 0x9c
  40519c:	9326      	str	r3, [sp, #152]	; 0x98
  40519e:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051a2:	f300 8232 	bgt.w	40560a <_svfprintf_r+0xe26>
  4051a6:	f108 0808 	add.w	r8, r8, #8
  4051aa:	e4ac      	b.n	404b06 <_svfprintf_r+0x322>
  4051ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4051b0:	2b01      	cmp	r3, #1
  4051b2:	f340 81fe 	ble.w	4055b2 <_svfprintf_r+0xdce>
  4051b6:	3701      	adds	r7, #1
  4051b8:	3401      	adds	r4, #1
  4051ba:	2301      	movs	r3, #1
  4051bc:	2f07      	cmp	r7, #7
  4051be:	9427      	str	r4, [sp, #156]	; 0x9c
  4051c0:	9726      	str	r7, [sp, #152]	; 0x98
  4051c2:	f8c8 6000 	str.w	r6, [r8]
  4051c6:	f8c8 3004 	str.w	r3, [r8, #4]
  4051ca:	f300 8203 	bgt.w	4055d4 <_svfprintf_r+0xdf0>
  4051ce:	f108 0808 	add.w	r8, r8, #8
  4051d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4051d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4051d6:	f8c8 3000 	str.w	r3, [r8]
  4051da:	3701      	adds	r7, #1
  4051dc:	4414      	add	r4, r2
  4051de:	2f07      	cmp	r7, #7
  4051e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4051e2:	9726      	str	r7, [sp, #152]	; 0x98
  4051e4:	f8c8 2004 	str.w	r2, [r8, #4]
  4051e8:	f300 8200 	bgt.w	4055ec <_svfprintf_r+0xe08>
  4051ec:	f108 0808 	add.w	r8, r8, #8
  4051f0:	a815      	add	r0, sp, #84	; 0x54
  4051f2:	c80d      	ldmia	r0, {r0, r2, r3}
  4051f4:	9914      	ldr	r1, [sp, #80]	; 0x50
  4051f6:	f003 fcb3 	bl	408b60 <__aeabi_dcmpeq>
  4051fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4051fc:	2800      	cmp	r0, #0
  4051fe:	f040 8101 	bne.w	405404 <_svfprintf_r+0xc20>
  405202:	3b01      	subs	r3, #1
  405204:	3701      	adds	r7, #1
  405206:	3601      	adds	r6, #1
  405208:	441c      	add	r4, r3
  40520a:	2f07      	cmp	r7, #7
  40520c:	9726      	str	r7, [sp, #152]	; 0x98
  40520e:	9427      	str	r4, [sp, #156]	; 0x9c
  405210:	f8c8 6000 	str.w	r6, [r8]
  405214:	f8c8 3004 	str.w	r3, [r8, #4]
  405218:	f300 8127 	bgt.w	40546a <_svfprintf_r+0xc86>
  40521c:	f108 0808 	add.w	r8, r8, #8
  405220:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  405222:	f8c8 2004 	str.w	r2, [r8, #4]
  405226:	3701      	adds	r7, #1
  405228:	4414      	add	r4, r2
  40522a:	ab21      	add	r3, sp, #132	; 0x84
  40522c:	2f07      	cmp	r7, #7
  40522e:	9427      	str	r4, [sp, #156]	; 0x9c
  405230:	9726      	str	r7, [sp, #152]	; 0x98
  405232:	f8c8 3000 	str.w	r3, [r8]
  405236:	f77f acb3 	ble.w	404ba0 <_svfprintf_r+0x3bc>
  40523a:	aa25      	add	r2, sp, #148	; 0x94
  40523c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40523e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405240:	f002 fbfa 	bl	407a38 <__ssprint_r>
  405244:	2800      	cmp	r0, #0
  405246:	f47f ab9f 	bne.w	404988 <_svfprintf_r+0x1a4>
  40524a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40524c:	46c8      	mov	r8, r9
  40524e:	e4a9      	b.n	404ba4 <_svfprintf_r+0x3c0>
  405250:	aa25      	add	r2, sp, #148	; 0x94
  405252:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405254:	980c      	ldr	r0, [sp, #48]	; 0x30
  405256:	f002 fbef 	bl	407a38 <__ssprint_r>
  40525a:	2800      	cmp	r0, #0
  40525c:	f43f aceb 	beq.w	404c36 <_svfprintf_r+0x452>
  405260:	f7ff bb92 	b.w	404988 <_svfprintf_r+0x1a4>
  405264:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405268:	2b01      	cmp	r3, #1
  40526a:	f000 8134 	beq.w	4054d6 <_svfprintf_r+0xcf2>
  40526e:	2b02      	cmp	r3, #2
  405270:	d125      	bne.n	4052be <_svfprintf_r+0xada>
  405272:	f8cd b01c 	str.w	fp, [sp, #28]
  405276:	2400      	movs	r4, #0
  405278:	2500      	movs	r5, #0
  40527a:	e61e      	b.n	404eba <_svfprintf_r+0x6d6>
  40527c:	aa25      	add	r2, sp, #148	; 0x94
  40527e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405280:	980c      	ldr	r0, [sp, #48]	; 0x30
  405282:	f002 fbd9 	bl	407a38 <__ssprint_r>
  405286:	2800      	cmp	r0, #0
  405288:	f47f ab7e 	bne.w	404988 <_svfprintf_r+0x1a4>
  40528c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40528e:	46c8      	mov	r8, r9
  405290:	e475      	b.n	404b7e <_svfprintf_r+0x39a>
  405292:	aa25      	add	r2, sp, #148	; 0x94
  405294:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405296:	980c      	ldr	r0, [sp, #48]	; 0x30
  405298:	f002 fbce 	bl	407a38 <__ssprint_r>
  40529c:	2800      	cmp	r0, #0
  40529e:	f47f ab73 	bne.w	404988 <_svfprintf_r+0x1a4>
  4052a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052a4:	46c8      	mov	r8, r9
  4052a6:	e41b      	b.n	404ae0 <_svfprintf_r+0x2fc>
  4052a8:	aa25      	add	r2, sp, #148	; 0x94
  4052aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052ac:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052ae:	f002 fbc3 	bl	407a38 <__ssprint_r>
  4052b2:	2800      	cmp	r0, #0
  4052b4:	f47f ab68 	bne.w	404988 <_svfprintf_r+0x1a4>
  4052b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052ba:	46c8      	mov	r8, r9
  4052bc:	e420      	b.n	404b00 <_svfprintf_r+0x31c>
  4052be:	f8cd b01c 	str.w	fp, [sp, #28]
  4052c2:	2400      	movs	r4, #0
  4052c4:	2500      	movs	r5, #0
  4052c6:	4649      	mov	r1, r9
  4052c8:	e000      	b.n	4052cc <_svfprintf_r+0xae8>
  4052ca:	4631      	mov	r1, r6
  4052cc:	08e2      	lsrs	r2, r4, #3
  4052ce:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4052d2:	08e8      	lsrs	r0, r5, #3
  4052d4:	f004 0307 	and.w	r3, r4, #7
  4052d8:	4605      	mov	r5, r0
  4052da:	4614      	mov	r4, r2
  4052dc:	3330      	adds	r3, #48	; 0x30
  4052de:	ea54 0205 	orrs.w	r2, r4, r5
  4052e2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4052e6:	f101 36ff 	add.w	r6, r1, #4294967295
  4052ea:	d1ee      	bne.n	4052ca <_svfprintf_r+0xae6>
  4052ec:	9a07      	ldr	r2, [sp, #28]
  4052ee:	07d2      	lsls	r2, r2, #31
  4052f0:	f57f adf3 	bpl.w	404eda <_svfprintf_r+0x6f6>
  4052f4:	2b30      	cmp	r3, #48	; 0x30
  4052f6:	f43f adf0 	beq.w	404eda <_svfprintf_r+0x6f6>
  4052fa:	3902      	subs	r1, #2
  4052fc:	2330      	movs	r3, #48	; 0x30
  4052fe:	f806 3c01 	strb.w	r3, [r6, #-1]
  405302:	eba9 0301 	sub.w	r3, r9, r1
  405306:	930e      	str	r3, [sp, #56]	; 0x38
  405308:	460e      	mov	r6, r1
  40530a:	f7ff bb7b 	b.w	404a04 <_svfprintf_r+0x220>
  40530e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405310:	2900      	cmp	r1, #0
  405312:	f340 822e 	ble.w	405772 <_svfprintf_r+0xf8e>
  405316:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40531a:	4293      	cmp	r3, r2
  40531c:	bfa8      	it	ge
  40531e:	4613      	movge	r3, r2
  405320:	2b00      	cmp	r3, #0
  405322:	461f      	mov	r7, r3
  405324:	dd0d      	ble.n	405342 <_svfprintf_r+0xb5e>
  405326:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405328:	f8c8 6000 	str.w	r6, [r8]
  40532c:	3301      	adds	r3, #1
  40532e:	443c      	add	r4, r7
  405330:	2b07      	cmp	r3, #7
  405332:	9427      	str	r4, [sp, #156]	; 0x9c
  405334:	f8c8 7004 	str.w	r7, [r8, #4]
  405338:	9326      	str	r3, [sp, #152]	; 0x98
  40533a:	f300 831f 	bgt.w	40597c <_svfprintf_r+0x1198>
  40533e:	f108 0808 	add.w	r8, r8, #8
  405342:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405344:	2f00      	cmp	r7, #0
  405346:	bfa8      	it	ge
  405348:	1bdb      	subge	r3, r3, r7
  40534a:	2b00      	cmp	r3, #0
  40534c:	461f      	mov	r7, r3
  40534e:	f340 80d6 	ble.w	4054fe <_svfprintf_r+0xd1a>
  405352:	2f10      	cmp	r7, #16
  405354:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405356:	4d31      	ldr	r5, [pc, #196]	; (40541c <_svfprintf_r+0xc38>)
  405358:	f340 81ed 	ble.w	405736 <_svfprintf_r+0xf52>
  40535c:	4642      	mov	r2, r8
  40535e:	4621      	mov	r1, r4
  405360:	46b0      	mov	r8, r6
  405362:	f04f 0b10 	mov.w	fp, #16
  405366:	462e      	mov	r6, r5
  405368:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40536a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40536c:	e004      	b.n	405378 <_svfprintf_r+0xb94>
  40536e:	3208      	adds	r2, #8
  405370:	3f10      	subs	r7, #16
  405372:	2f10      	cmp	r7, #16
  405374:	f340 81db 	ble.w	40572e <_svfprintf_r+0xf4a>
  405378:	3301      	adds	r3, #1
  40537a:	3110      	adds	r1, #16
  40537c:	2b07      	cmp	r3, #7
  40537e:	9127      	str	r1, [sp, #156]	; 0x9c
  405380:	9326      	str	r3, [sp, #152]	; 0x98
  405382:	e882 0840 	stmia.w	r2, {r6, fp}
  405386:	ddf2      	ble.n	40536e <_svfprintf_r+0xb8a>
  405388:	aa25      	add	r2, sp, #148	; 0x94
  40538a:	4629      	mov	r1, r5
  40538c:	4620      	mov	r0, r4
  40538e:	f002 fb53 	bl	407a38 <__ssprint_r>
  405392:	2800      	cmp	r0, #0
  405394:	f47f aaf8 	bne.w	404988 <_svfprintf_r+0x1a4>
  405398:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40539a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40539c:	464a      	mov	r2, r9
  40539e:	e7e7      	b.n	405370 <_svfprintf_r+0xb8c>
  4053a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053a2:	930e      	str	r3, [sp, #56]	; 0x38
  4053a4:	464e      	mov	r6, r9
  4053a6:	f7ff bb2d 	b.w	404a04 <_svfprintf_r+0x220>
  4053aa:	2d00      	cmp	r5, #0
  4053ac:	bf08      	it	eq
  4053ae:	2c0a      	cmpeq	r4, #10
  4053b0:	f0c0 808f 	bcc.w	4054d2 <_svfprintf_r+0xcee>
  4053b4:	464e      	mov	r6, r9
  4053b6:	4620      	mov	r0, r4
  4053b8:	4629      	mov	r1, r5
  4053ba:	220a      	movs	r2, #10
  4053bc:	2300      	movs	r3, #0
  4053be:	f7fe fc61 	bl	403c84 <__aeabi_uldivmod>
  4053c2:	3230      	adds	r2, #48	; 0x30
  4053c4:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4053c8:	4620      	mov	r0, r4
  4053ca:	4629      	mov	r1, r5
  4053cc:	2300      	movs	r3, #0
  4053ce:	220a      	movs	r2, #10
  4053d0:	f7fe fc58 	bl	403c84 <__aeabi_uldivmod>
  4053d4:	4604      	mov	r4, r0
  4053d6:	460d      	mov	r5, r1
  4053d8:	ea54 0305 	orrs.w	r3, r4, r5
  4053dc:	d1eb      	bne.n	4053b6 <_svfprintf_r+0xbd2>
  4053de:	eba9 0306 	sub.w	r3, r9, r6
  4053e2:	930e      	str	r3, [sp, #56]	; 0x38
  4053e4:	f7ff bb0e 	b.w	404a04 <_svfprintf_r+0x220>
  4053e8:	aa25      	add	r2, sp, #148	; 0x94
  4053ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053ee:	f002 fb23 	bl	407a38 <__ssprint_r>
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f47f aac8 	bne.w	404988 <_svfprintf_r+0x1a4>
  4053f8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4053fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053fe:	46c8      	mov	r8, r9
  405400:	f7ff bb5e 	b.w	404ac0 <_svfprintf_r+0x2dc>
  405404:	1e5e      	subs	r6, r3, #1
  405406:	2e00      	cmp	r6, #0
  405408:	f77f af0a 	ble.w	405220 <_svfprintf_r+0xa3c>
  40540c:	2e10      	cmp	r6, #16
  40540e:	4d03      	ldr	r5, [pc, #12]	; (40541c <_svfprintf_r+0xc38>)
  405410:	dd22      	ble.n	405458 <_svfprintf_r+0xc74>
  405412:	4622      	mov	r2, r4
  405414:	f04f 0b10 	mov.w	fp, #16
  405418:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40541a:	e006      	b.n	40542a <_svfprintf_r+0xc46>
  40541c:	00409b14 	.word	0x00409b14
  405420:	3e10      	subs	r6, #16
  405422:	2e10      	cmp	r6, #16
  405424:	f108 0808 	add.w	r8, r8, #8
  405428:	dd15      	ble.n	405456 <_svfprintf_r+0xc72>
  40542a:	3701      	adds	r7, #1
  40542c:	3210      	adds	r2, #16
  40542e:	2f07      	cmp	r7, #7
  405430:	9227      	str	r2, [sp, #156]	; 0x9c
  405432:	9726      	str	r7, [sp, #152]	; 0x98
  405434:	e888 0820 	stmia.w	r8, {r5, fp}
  405438:	ddf2      	ble.n	405420 <_svfprintf_r+0xc3c>
  40543a:	aa25      	add	r2, sp, #148	; 0x94
  40543c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40543e:	4620      	mov	r0, r4
  405440:	f002 fafa 	bl	407a38 <__ssprint_r>
  405444:	2800      	cmp	r0, #0
  405446:	f47f aa9f 	bne.w	404988 <_svfprintf_r+0x1a4>
  40544a:	3e10      	subs	r6, #16
  40544c:	2e10      	cmp	r6, #16
  40544e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405450:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405452:	46c8      	mov	r8, r9
  405454:	dce9      	bgt.n	40542a <_svfprintf_r+0xc46>
  405456:	4614      	mov	r4, r2
  405458:	3701      	adds	r7, #1
  40545a:	4434      	add	r4, r6
  40545c:	2f07      	cmp	r7, #7
  40545e:	9427      	str	r4, [sp, #156]	; 0x9c
  405460:	9726      	str	r7, [sp, #152]	; 0x98
  405462:	e888 0060 	stmia.w	r8, {r5, r6}
  405466:	f77f aed9 	ble.w	40521c <_svfprintf_r+0xa38>
  40546a:	aa25      	add	r2, sp, #148	; 0x94
  40546c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40546e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405470:	f002 fae2 	bl	407a38 <__ssprint_r>
  405474:	2800      	cmp	r0, #0
  405476:	f47f aa87 	bne.w	404988 <_svfprintf_r+0x1a4>
  40547a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40547c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40547e:	46c8      	mov	r8, r9
  405480:	e6ce      	b.n	405220 <_svfprintf_r+0xa3c>
  405482:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405484:	6814      	ldr	r4, [r2, #0]
  405486:	4613      	mov	r3, r2
  405488:	3304      	adds	r3, #4
  40548a:	17e5      	asrs	r5, r4, #31
  40548c:	930f      	str	r3, [sp, #60]	; 0x3c
  40548e:	4622      	mov	r2, r4
  405490:	462b      	mov	r3, r5
  405492:	e4fa      	b.n	404e8a <_svfprintf_r+0x6a6>
  405494:	3204      	adds	r2, #4
  405496:	681c      	ldr	r4, [r3, #0]
  405498:	920f      	str	r2, [sp, #60]	; 0x3c
  40549a:	2301      	movs	r3, #1
  40549c:	2500      	movs	r5, #0
  40549e:	f7ff ba94 	b.w	4049ca <_svfprintf_r+0x1e6>
  4054a2:	681c      	ldr	r4, [r3, #0]
  4054a4:	3304      	adds	r3, #4
  4054a6:	930f      	str	r3, [sp, #60]	; 0x3c
  4054a8:	2500      	movs	r5, #0
  4054aa:	e421      	b.n	404cf0 <_svfprintf_r+0x50c>
  4054ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4054ae:	460a      	mov	r2, r1
  4054b0:	3204      	adds	r2, #4
  4054b2:	680c      	ldr	r4, [r1, #0]
  4054b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4054b6:	2500      	movs	r5, #0
  4054b8:	f7ff ba87 	b.w	4049ca <_svfprintf_r+0x1e6>
  4054bc:	4614      	mov	r4, r2
  4054be:	3301      	adds	r3, #1
  4054c0:	4434      	add	r4, r6
  4054c2:	2b07      	cmp	r3, #7
  4054c4:	9427      	str	r4, [sp, #156]	; 0x9c
  4054c6:	9326      	str	r3, [sp, #152]	; 0x98
  4054c8:	e888 0060 	stmia.w	r8, {r5, r6}
  4054cc:	f77f ab68 	ble.w	404ba0 <_svfprintf_r+0x3bc>
  4054d0:	e6b3      	b.n	40523a <_svfprintf_r+0xa56>
  4054d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4054d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4054da:	ae42      	add	r6, sp, #264	; 0x108
  4054dc:	3430      	adds	r4, #48	; 0x30
  4054de:	2301      	movs	r3, #1
  4054e0:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4054e4:	930e      	str	r3, [sp, #56]	; 0x38
  4054e6:	f7ff ba8d 	b.w	404a04 <_svfprintf_r+0x220>
  4054ea:	aa25      	add	r2, sp, #148	; 0x94
  4054ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054f0:	f002 faa2 	bl	407a38 <__ssprint_r>
  4054f4:	2800      	cmp	r0, #0
  4054f6:	f47f aa47 	bne.w	404988 <_svfprintf_r+0x1a4>
  4054fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054fc:	46c8      	mov	r8, r9
  4054fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405502:	429a      	cmp	r2, r3
  405504:	db44      	blt.n	405590 <_svfprintf_r+0xdac>
  405506:	9b07      	ldr	r3, [sp, #28]
  405508:	07d9      	lsls	r1, r3, #31
  40550a:	d441      	bmi.n	405590 <_svfprintf_r+0xdac>
  40550c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40550e:	9812      	ldr	r0, [sp, #72]	; 0x48
  405510:	1a9a      	subs	r2, r3, r2
  405512:	1a1d      	subs	r5, r3, r0
  405514:	4295      	cmp	r5, r2
  405516:	bfa8      	it	ge
  405518:	4615      	movge	r5, r2
  40551a:	2d00      	cmp	r5, #0
  40551c:	dd0e      	ble.n	40553c <_svfprintf_r+0xd58>
  40551e:	9926      	ldr	r1, [sp, #152]	; 0x98
  405520:	f8c8 5004 	str.w	r5, [r8, #4]
  405524:	3101      	adds	r1, #1
  405526:	4406      	add	r6, r0
  405528:	442c      	add	r4, r5
  40552a:	2907      	cmp	r1, #7
  40552c:	f8c8 6000 	str.w	r6, [r8]
  405530:	9427      	str	r4, [sp, #156]	; 0x9c
  405532:	9126      	str	r1, [sp, #152]	; 0x98
  405534:	f300 823b 	bgt.w	4059ae <_svfprintf_r+0x11ca>
  405538:	f108 0808 	add.w	r8, r8, #8
  40553c:	2d00      	cmp	r5, #0
  40553e:	bfac      	ite	ge
  405540:	1b56      	subge	r6, r2, r5
  405542:	4616      	movlt	r6, r2
  405544:	2e00      	cmp	r6, #0
  405546:	f77f ab2d 	ble.w	404ba4 <_svfprintf_r+0x3c0>
  40554a:	2e10      	cmp	r6, #16
  40554c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40554e:	4db0      	ldr	r5, [pc, #704]	; (405810 <_svfprintf_r+0x102c>)
  405550:	ddb5      	ble.n	4054be <_svfprintf_r+0xcda>
  405552:	4622      	mov	r2, r4
  405554:	2710      	movs	r7, #16
  405556:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40555a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40555c:	e004      	b.n	405568 <_svfprintf_r+0xd84>
  40555e:	f108 0808 	add.w	r8, r8, #8
  405562:	3e10      	subs	r6, #16
  405564:	2e10      	cmp	r6, #16
  405566:	dda9      	ble.n	4054bc <_svfprintf_r+0xcd8>
  405568:	3301      	adds	r3, #1
  40556a:	3210      	adds	r2, #16
  40556c:	2b07      	cmp	r3, #7
  40556e:	9227      	str	r2, [sp, #156]	; 0x9c
  405570:	9326      	str	r3, [sp, #152]	; 0x98
  405572:	e888 00a0 	stmia.w	r8, {r5, r7}
  405576:	ddf2      	ble.n	40555e <_svfprintf_r+0xd7a>
  405578:	aa25      	add	r2, sp, #148	; 0x94
  40557a:	4621      	mov	r1, r4
  40557c:	4658      	mov	r0, fp
  40557e:	f002 fa5b 	bl	407a38 <__ssprint_r>
  405582:	2800      	cmp	r0, #0
  405584:	f47f aa00 	bne.w	404988 <_svfprintf_r+0x1a4>
  405588:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40558a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40558c:	46c8      	mov	r8, r9
  40558e:	e7e8      	b.n	405562 <_svfprintf_r+0xd7e>
  405590:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405592:	9819      	ldr	r0, [sp, #100]	; 0x64
  405594:	991a      	ldr	r1, [sp, #104]	; 0x68
  405596:	f8c8 1000 	str.w	r1, [r8]
  40559a:	3301      	adds	r3, #1
  40559c:	4404      	add	r4, r0
  40559e:	2b07      	cmp	r3, #7
  4055a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4055a2:	f8c8 0004 	str.w	r0, [r8, #4]
  4055a6:	9326      	str	r3, [sp, #152]	; 0x98
  4055a8:	f300 81f5 	bgt.w	405996 <_svfprintf_r+0x11b2>
  4055ac:	f108 0808 	add.w	r8, r8, #8
  4055b0:	e7ac      	b.n	40550c <_svfprintf_r+0xd28>
  4055b2:	9b07      	ldr	r3, [sp, #28]
  4055b4:	07da      	lsls	r2, r3, #31
  4055b6:	f53f adfe 	bmi.w	4051b6 <_svfprintf_r+0x9d2>
  4055ba:	3701      	adds	r7, #1
  4055bc:	3401      	adds	r4, #1
  4055be:	2301      	movs	r3, #1
  4055c0:	2f07      	cmp	r7, #7
  4055c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4055c4:	9726      	str	r7, [sp, #152]	; 0x98
  4055c6:	f8c8 6000 	str.w	r6, [r8]
  4055ca:	f8c8 3004 	str.w	r3, [r8, #4]
  4055ce:	f77f ae25 	ble.w	40521c <_svfprintf_r+0xa38>
  4055d2:	e74a      	b.n	40546a <_svfprintf_r+0xc86>
  4055d4:	aa25      	add	r2, sp, #148	; 0x94
  4055d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055d8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055da:	f002 fa2d 	bl	407a38 <__ssprint_r>
  4055de:	2800      	cmp	r0, #0
  4055e0:	f47f a9d2 	bne.w	404988 <_svfprintf_r+0x1a4>
  4055e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4055e8:	46c8      	mov	r8, r9
  4055ea:	e5f2      	b.n	4051d2 <_svfprintf_r+0x9ee>
  4055ec:	aa25      	add	r2, sp, #148	; 0x94
  4055ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4055f2:	f002 fa21 	bl	407a38 <__ssprint_r>
  4055f6:	2800      	cmp	r0, #0
  4055f8:	f47f a9c6 	bne.w	404988 <_svfprintf_r+0x1a4>
  4055fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4055fe:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405600:	46c8      	mov	r8, r9
  405602:	e5f5      	b.n	4051f0 <_svfprintf_r+0xa0c>
  405604:	464e      	mov	r6, r9
  405606:	f7ff b9fd 	b.w	404a04 <_svfprintf_r+0x220>
  40560a:	aa25      	add	r2, sp, #148	; 0x94
  40560c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40560e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405610:	f002 fa12 	bl	407a38 <__ssprint_r>
  405614:	2800      	cmp	r0, #0
  405616:	f47f a9b7 	bne.w	404988 <_svfprintf_r+0x1a4>
  40561a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40561c:	46c8      	mov	r8, r9
  40561e:	f7ff ba72 	b.w	404b06 <_svfprintf_r+0x322>
  405622:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405624:	4622      	mov	r2, r4
  405626:	4620      	mov	r0, r4
  405628:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40562a:	4623      	mov	r3, r4
  40562c:	4621      	mov	r1, r4
  40562e:	f003 fac9 	bl	408bc4 <__aeabi_dcmpun>
  405632:	2800      	cmp	r0, #0
  405634:	f040 8286 	bne.w	405b44 <_svfprintf_r+0x1360>
  405638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40563a:	3301      	adds	r3, #1
  40563c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40563e:	f023 0320 	bic.w	r3, r3, #32
  405642:	930e      	str	r3, [sp, #56]	; 0x38
  405644:	f000 81e2 	beq.w	405a0c <_svfprintf_r+0x1228>
  405648:	2b47      	cmp	r3, #71	; 0x47
  40564a:	f000 811e 	beq.w	40588a <_svfprintf_r+0x10a6>
  40564e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405652:	9307      	str	r3, [sp, #28]
  405654:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405656:	1e1f      	subs	r7, r3, #0
  405658:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40565a:	9308      	str	r3, [sp, #32]
  40565c:	bfbb      	ittet	lt
  40565e:	463b      	movlt	r3, r7
  405660:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405664:	2300      	movge	r3, #0
  405666:	232d      	movlt	r3, #45	; 0x2d
  405668:	9310      	str	r3, [sp, #64]	; 0x40
  40566a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40566c:	2b66      	cmp	r3, #102	; 0x66
  40566e:	f000 81bb 	beq.w	4059e8 <_svfprintf_r+0x1204>
  405672:	2b46      	cmp	r3, #70	; 0x46
  405674:	f000 80df 	beq.w	405836 <_svfprintf_r+0x1052>
  405678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40567a:	9a08      	ldr	r2, [sp, #32]
  40567c:	2b45      	cmp	r3, #69	; 0x45
  40567e:	bf0c      	ite	eq
  405680:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405682:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405684:	a823      	add	r0, sp, #140	; 0x8c
  405686:	a920      	add	r1, sp, #128	; 0x80
  405688:	bf08      	it	eq
  40568a:	1c5d      	addeq	r5, r3, #1
  40568c:	9004      	str	r0, [sp, #16]
  40568e:	9103      	str	r1, [sp, #12]
  405690:	a81f      	add	r0, sp, #124	; 0x7c
  405692:	2102      	movs	r1, #2
  405694:	463b      	mov	r3, r7
  405696:	9002      	str	r0, [sp, #8]
  405698:	9501      	str	r5, [sp, #4]
  40569a:	9100      	str	r1, [sp, #0]
  40569c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40569e:	f000 fbb3 	bl	405e08 <_dtoa_r>
  4056a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056a4:	2b67      	cmp	r3, #103	; 0x67
  4056a6:	4606      	mov	r6, r0
  4056a8:	f040 81e0 	bne.w	405a6c <_svfprintf_r+0x1288>
  4056ac:	f01b 0f01 	tst.w	fp, #1
  4056b0:	f000 8246 	beq.w	405b40 <_svfprintf_r+0x135c>
  4056b4:	1974      	adds	r4, r6, r5
  4056b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4056b8:	9808      	ldr	r0, [sp, #32]
  4056ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4056bc:	4639      	mov	r1, r7
  4056be:	f003 fa4f 	bl	408b60 <__aeabi_dcmpeq>
  4056c2:	2800      	cmp	r0, #0
  4056c4:	f040 8165 	bne.w	405992 <_svfprintf_r+0x11ae>
  4056c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056ca:	42a3      	cmp	r3, r4
  4056cc:	d206      	bcs.n	4056dc <_svfprintf_r+0xef8>
  4056ce:	2130      	movs	r1, #48	; 0x30
  4056d0:	1c5a      	adds	r2, r3, #1
  4056d2:	9223      	str	r2, [sp, #140]	; 0x8c
  4056d4:	7019      	strb	r1, [r3, #0]
  4056d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4056d8:	429c      	cmp	r4, r3
  4056da:	d8f9      	bhi.n	4056d0 <_svfprintf_r+0xeec>
  4056dc:	1b9b      	subs	r3, r3, r6
  4056de:	9313      	str	r3, [sp, #76]	; 0x4c
  4056e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056e2:	2b47      	cmp	r3, #71	; 0x47
  4056e4:	f000 80e9 	beq.w	4058ba <_svfprintf_r+0x10d6>
  4056e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056ea:	2b65      	cmp	r3, #101	; 0x65
  4056ec:	f340 81cd 	ble.w	405a8a <_svfprintf_r+0x12a6>
  4056f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4056f2:	2b66      	cmp	r3, #102	; 0x66
  4056f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4056f6:	9312      	str	r3, [sp, #72]	; 0x48
  4056f8:	f000 819e 	beq.w	405a38 <_svfprintf_r+0x1254>
  4056fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405700:	4619      	mov	r1, r3
  405702:	4291      	cmp	r1, r2
  405704:	f300 818a 	bgt.w	405a1c <_svfprintf_r+0x1238>
  405708:	f01b 0f01 	tst.w	fp, #1
  40570c:	f040 8213 	bne.w	405b36 <_svfprintf_r+0x1352>
  405710:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405714:	9308      	str	r3, [sp, #32]
  405716:	2367      	movs	r3, #103	; 0x67
  405718:	920e      	str	r2, [sp, #56]	; 0x38
  40571a:	9311      	str	r3, [sp, #68]	; 0x44
  40571c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40571e:	2b00      	cmp	r3, #0
  405720:	f040 80c4 	bne.w	4058ac <_svfprintf_r+0x10c8>
  405724:	930a      	str	r3, [sp, #40]	; 0x28
  405726:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40572a:	f7ff b973 	b.w	404a14 <_svfprintf_r+0x230>
  40572e:	4635      	mov	r5, r6
  405730:	460c      	mov	r4, r1
  405732:	4646      	mov	r6, r8
  405734:	4690      	mov	r8, r2
  405736:	3301      	adds	r3, #1
  405738:	443c      	add	r4, r7
  40573a:	2b07      	cmp	r3, #7
  40573c:	9427      	str	r4, [sp, #156]	; 0x9c
  40573e:	9326      	str	r3, [sp, #152]	; 0x98
  405740:	e888 00a0 	stmia.w	r8, {r5, r7}
  405744:	f73f aed1 	bgt.w	4054ea <_svfprintf_r+0xd06>
  405748:	f108 0808 	add.w	r8, r8, #8
  40574c:	e6d7      	b.n	4054fe <_svfprintf_r+0xd1a>
  40574e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405750:	6813      	ldr	r3, [r2, #0]
  405752:	3204      	adds	r2, #4
  405754:	920f      	str	r2, [sp, #60]	; 0x3c
  405756:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405758:	601a      	str	r2, [r3, #0]
  40575a:	f7ff b86a 	b.w	404832 <_svfprintf_r+0x4e>
  40575e:	aa25      	add	r2, sp, #148	; 0x94
  405760:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405762:	980c      	ldr	r0, [sp, #48]	; 0x30
  405764:	f002 f968 	bl	407a38 <__ssprint_r>
  405768:	2800      	cmp	r0, #0
  40576a:	f47f a90d 	bne.w	404988 <_svfprintf_r+0x1a4>
  40576e:	46c8      	mov	r8, r9
  405770:	e48d      	b.n	40508e <_svfprintf_r+0x8aa>
  405772:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405774:	4a27      	ldr	r2, [pc, #156]	; (405814 <_svfprintf_r+0x1030>)
  405776:	f8c8 2000 	str.w	r2, [r8]
  40577a:	3301      	adds	r3, #1
  40577c:	3401      	adds	r4, #1
  40577e:	2201      	movs	r2, #1
  405780:	2b07      	cmp	r3, #7
  405782:	9427      	str	r4, [sp, #156]	; 0x9c
  405784:	9326      	str	r3, [sp, #152]	; 0x98
  405786:	f8c8 2004 	str.w	r2, [r8, #4]
  40578a:	dc72      	bgt.n	405872 <_svfprintf_r+0x108e>
  40578c:	f108 0808 	add.w	r8, r8, #8
  405790:	b929      	cbnz	r1, 40579e <_svfprintf_r+0xfba>
  405792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405794:	b91b      	cbnz	r3, 40579e <_svfprintf_r+0xfba>
  405796:	9b07      	ldr	r3, [sp, #28]
  405798:	07d8      	lsls	r0, r3, #31
  40579a:	f57f aa03 	bpl.w	404ba4 <_svfprintf_r+0x3c0>
  40579e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057a0:	9819      	ldr	r0, [sp, #100]	; 0x64
  4057a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4057a4:	f8c8 2000 	str.w	r2, [r8]
  4057a8:	3301      	adds	r3, #1
  4057aa:	4602      	mov	r2, r0
  4057ac:	4422      	add	r2, r4
  4057ae:	2b07      	cmp	r3, #7
  4057b0:	9227      	str	r2, [sp, #156]	; 0x9c
  4057b2:	f8c8 0004 	str.w	r0, [r8, #4]
  4057b6:	9326      	str	r3, [sp, #152]	; 0x98
  4057b8:	f300 818d 	bgt.w	405ad6 <_svfprintf_r+0x12f2>
  4057bc:	f108 0808 	add.w	r8, r8, #8
  4057c0:	2900      	cmp	r1, #0
  4057c2:	f2c0 8165 	blt.w	405a90 <_svfprintf_r+0x12ac>
  4057c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4057c8:	f8c8 6000 	str.w	r6, [r8]
  4057cc:	3301      	adds	r3, #1
  4057ce:	188c      	adds	r4, r1, r2
  4057d0:	2b07      	cmp	r3, #7
  4057d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4057d4:	9326      	str	r3, [sp, #152]	; 0x98
  4057d6:	f8c8 1004 	str.w	r1, [r8, #4]
  4057da:	f77f a9e1 	ble.w	404ba0 <_svfprintf_r+0x3bc>
  4057de:	e52c      	b.n	40523a <_svfprintf_r+0xa56>
  4057e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4057e2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4057e4:	6813      	ldr	r3, [r2, #0]
  4057e6:	17cd      	asrs	r5, r1, #31
  4057e8:	4608      	mov	r0, r1
  4057ea:	3204      	adds	r2, #4
  4057ec:	4629      	mov	r1, r5
  4057ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4057f0:	e9c3 0100 	strd	r0, r1, [r3]
  4057f4:	f7ff b81d 	b.w	404832 <_svfprintf_r+0x4e>
  4057f8:	aa25      	add	r2, sp, #148	; 0x94
  4057fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057fc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057fe:	f002 f91b 	bl	407a38 <__ssprint_r>
  405802:	2800      	cmp	r0, #0
  405804:	f47f a8c0 	bne.w	404988 <_svfprintf_r+0x1a4>
  405808:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40580a:	46c8      	mov	r8, r9
  40580c:	e458      	b.n	4050c0 <_svfprintf_r+0x8dc>
  40580e:	bf00      	nop
  405810:	00409b14 	.word	0x00409b14
  405814:	00409b00 	.word	0x00409b00
  405818:	2140      	movs	r1, #64	; 0x40
  40581a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40581c:	f001 fa4a 	bl	406cb4 <_malloc_r>
  405820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405822:	6010      	str	r0, [r2, #0]
  405824:	6110      	str	r0, [r2, #16]
  405826:	2800      	cmp	r0, #0
  405828:	f000 81f2 	beq.w	405c10 <_svfprintf_r+0x142c>
  40582c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40582e:	2340      	movs	r3, #64	; 0x40
  405830:	6153      	str	r3, [r2, #20]
  405832:	f7fe bfee 	b.w	404812 <_svfprintf_r+0x2e>
  405836:	a823      	add	r0, sp, #140	; 0x8c
  405838:	a920      	add	r1, sp, #128	; 0x80
  40583a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40583c:	9004      	str	r0, [sp, #16]
  40583e:	9103      	str	r1, [sp, #12]
  405840:	a81f      	add	r0, sp, #124	; 0x7c
  405842:	2103      	movs	r1, #3
  405844:	9002      	str	r0, [sp, #8]
  405846:	9a08      	ldr	r2, [sp, #32]
  405848:	9401      	str	r4, [sp, #4]
  40584a:	463b      	mov	r3, r7
  40584c:	9100      	str	r1, [sp, #0]
  40584e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405850:	f000 fada 	bl	405e08 <_dtoa_r>
  405854:	4625      	mov	r5, r4
  405856:	4606      	mov	r6, r0
  405858:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40585a:	2b46      	cmp	r3, #70	; 0x46
  40585c:	eb06 0405 	add.w	r4, r6, r5
  405860:	f47f af29 	bne.w	4056b6 <_svfprintf_r+0xed2>
  405864:	7833      	ldrb	r3, [r6, #0]
  405866:	2b30      	cmp	r3, #48	; 0x30
  405868:	f000 8178 	beq.w	405b5c <_svfprintf_r+0x1378>
  40586c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40586e:	442c      	add	r4, r5
  405870:	e721      	b.n	4056b6 <_svfprintf_r+0xed2>
  405872:	aa25      	add	r2, sp, #148	; 0x94
  405874:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405876:	980c      	ldr	r0, [sp, #48]	; 0x30
  405878:	f002 f8de 	bl	407a38 <__ssprint_r>
  40587c:	2800      	cmp	r0, #0
  40587e:	f47f a883 	bne.w	404988 <_svfprintf_r+0x1a4>
  405882:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405884:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405886:	46c8      	mov	r8, r9
  405888:	e782      	b.n	405790 <_svfprintf_r+0xfac>
  40588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40588c:	2b00      	cmp	r3, #0
  40588e:	bf08      	it	eq
  405890:	2301      	moveq	r3, #1
  405892:	930a      	str	r3, [sp, #40]	; 0x28
  405894:	e6db      	b.n	40564e <_svfprintf_r+0xe6a>
  405896:	4630      	mov	r0, r6
  405898:	940a      	str	r4, [sp, #40]	; 0x28
  40589a:	f7fe fcd1 	bl	404240 <strlen>
  40589e:	950f      	str	r5, [sp, #60]	; 0x3c
  4058a0:	900e      	str	r0, [sp, #56]	; 0x38
  4058a2:	f8cd b01c 	str.w	fp, [sp, #28]
  4058a6:	4603      	mov	r3, r0
  4058a8:	f7ff b9f9 	b.w	404c9e <_svfprintf_r+0x4ba>
  4058ac:	272d      	movs	r7, #45	; 0x2d
  4058ae:	2300      	movs	r3, #0
  4058b0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4058b4:	930a      	str	r3, [sp, #40]	; 0x28
  4058b6:	f7ff b8ae 	b.w	404a16 <_svfprintf_r+0x232>
  4058ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4058bc:	9312      	str	r3, [sp, #72]	; 0x48
  4058be:	461a      	mov	r2, r3
  4058c0:	3303      	adds	r3, #3
  4058c2:	db04      	blt.n	4058ce <_svfprintf_r+0x10ea>
  4058c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058c6:	4619      	mov	r1, r3
  4058c8:	4291      	cmp	r1, r2
  4058ca:	f6bf af17 	bge.w	4056fc <_svfprintf_r+0xf18>
  4058ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4058d0:	3b02      	subs	r3, #2
  4058d2:	9311      	str	r3, [sp, #68]	; 0x44
  4058d4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4058d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4058dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058de:	3b01      	subs	r3, #1
  4058e0:	2b00      	cmp	r3, #0
  4058e2:	931f      	str	r3, [sp, #124]	; 0x7c
  4058e4:	bfbd      	ittte	lt
  4058e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4058e8:	f1c3 0301 	rsblt	r3, r3, #1
  4058ec:	222d      	movlt	r2, #45	; 0x2d
  4058ee:	222b      	movge	r2, #43	; 0x2b
  4058f0:	2b09      	cmp	r3, #9
  4058f2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4058f6:	f340 8116 	ble.w	405b26 <_svfprintf_r+0x1342>
  4058fa:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4058fe:	4620      	mov	r0, r4
  405900:	4dab      	ldr	r5, [pc, #684]	; (405bb0 <_svfprintf_r+0x13cc>)
  405902:	e000      	b.n	405906 <_svfprintf_r+0x1122>
  405904:	4610      	mov	r0, r2
  405906:	fb85 1203 	smull	r1, r2, r5, r3
  40590a:	17d9      	asrs	r1, r3, #31
  40590c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405910:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405914:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405918:	3230      	adds	r2, #48	; 0x30
  40591a:	2909      	cmp	r1, #9
  40591c:	f800 2c01 	strb.w	r2, [r0, #-1]
  405920:	460b      	mov	r3, r1
  405922:	f100 32ff 	add.w	r2, r0, #4294967295
  405926:	dced      	bgt.n	405904 <_svfprintf_r+0x1120>
  405928:	3330      	adds	r3, #48	; 0x30
  40592a:	3802      	subs	r0, #2
  40592c:	b2d9      	uxtb	r1, r3
  40592e:	4284      	cmp	r4, r0
  405930:	f802 1c01 	strb.w	r1, [r2, #-1]
  405934:	f240 8165 	bls.w	405c02 <_svfprintf_r+0x141e>
  405938:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40593c:	4613      	mov	r3, r2
  40593e:	e001      	b.n	405944 <_svfprintf_r+0x1160>
  405940:	f813 1b01 	ldrb.w	r1, [r3], #1
  405944:	f800 1b01 	strb.w	r1, [r0], #1
  405948:	42a3      	cmp	r3, r4
  40594a:	d1f9      	bne.n	405940 <_svfprintf_r+0x115c>
  40594c:	3301      	adds	r3, #1
  40594e:	1a9b      	subs	r3, r3, r2
  405950:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405954:	4413      	add	r3, r2
  405956:	aa21      	add	r2, sp, #132	; 0x84
  405958:	1a9b      	subs	r3, r3, r2
  40595a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40595c:	931b      	str	r3, [sp, #108]	; 0x6c
  40595e:	2a01      	cmp	r2, #1
  405960:	4413      	add	r3, r2
  405962:	930e      	str	r3, [sp, #56]	; 0x38
  405964:	f340 8119 	ble.w	405b9a <_svfprintf_r+0x13b6>
  405968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40596a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40596c:	4413      	add	r3, r2
  40596e:	930e      	str	r3, [sp, #56]	; 0x38
  405970:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405974:	9308      	str	r3, [sp, #32]
  405976:	2300      	movs	r3, #0
  405978:	9312      	str	r3, [sp, #72]	; 0x48
  40597a:	e6cf      	b.n	40571c <_svfprintf_r+0xf38>
  40597c:	aa25      	add	r2, sp, #148	; 0x94
  40597e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405980:	980c      	ldr	r0, [sp, #48]	; 0x30
  405982:	f002 f859 	bl	407a38 <__ssprint_r>
  405986:	2800      	cmp	r0, #0
  405988:	f47e affe 	bne.w	404988 <_svfprintf_r+0x1a4>
  40598c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40598e:	46c8      	mov	r8, r9
  405990:	e4d7      	b.n	405342 <_svfprintf_r+0xb5e>
  405992:	4623      	mov	r3, r4
  405994:	e6a2      	b.n	4056dc <_svfprintf_r+0xef8>
  405996:	aa25      	add	r2, sp, #148	; 0x94
  405998:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40599a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40599c:	f002 f84c 	bl	407a38 <__ssprint_r>
  4059a0:	2800      	cmp	r0, #0
  4059a2:	f47e aff1 	bne.w	404988 <_svfprintf_r+0x1a4>
  4059a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4059a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4059aa:	46c8      	mov	r8, r9
  4059ac:	e5ae      	b.n	40550c <_svfprintf_r+0xd28>
  4059ae:	aa25      	add	r2, sp, #148	; 0x94
  4059b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059b4:	f002 f840 	bl	407a38 <__ssprint_r>
  4059b8:	2800      	cmp	r0, #0
  4059ba:	f47e afe5 	bne.w	404988 <_svfprintf_r+0x1a4>
  4059be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4059c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4059c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4059c4:	1a9a      	subs	r2, r3, r2
  4059c6:	46c8      	mov	r8, r9
  4059c8:	e5b8      	b.n	40553c <_svfprintf_r+0xd58>
  4059ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059cc:	9612      	str	r6, [sp, #72]	; 0x48
  4059ce:	2b06      	cmp	r3, #6
  4059d0:	bf28      	it	cs
  4059d2:	2306      	movcs	r3, #6
  4059d4:	960a      	str	r6, [sp, #40]	; 0x28
  4059d6:	4637      	mov	r7, r6
  4059d8:	9308      	str	r3, [sp, #32]
  4059da:	950f      	str	r5, [sp, #60]	; 0x3c
  4059dc:	f8cd b01c 	str.w	fp, [sp, #28]
  4059e0:	930e      	str	r3, [sp, #56]	; 0x38
  4059e2:	4e74      	ldr	r6, [pc, #464]	; (405bb4 <_svfprintf_r+0x13d0>)
  4059e4:	f7ff b816 	b.w	404a14 <_svfprintf_r+0x230>
  4059e8:	a823      	add	r0, sp, #140	; 0x8c
  4059ea:	a920      	add	r1, sp, #128	; 0x80
  4059ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4059ee:	9004      	str	r0, [sp, #16]
  4059f0:	9103      	str	r1, [sp, #12]
  4059f2:	a81f      	add	r0, sp, #124	; 0x7c
  4059f4:	2103      	movs	r1, #3
  4059f6:	9002      	str	r0, [sp, #8]
  4059f8:	9a08      	ldr	r2, [sp, #32]
  4059fa:	9501      	str	r5, [sp, #4]
  4059fc:	463b      	mov	r3, r7
  4059fe:	9100      	str	r1, [sp, #0]
  405a00:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a02:	f000 fa01 	bl	405e08 <_dtoa_r>
  405a06:	4606      	mov	r6, r0
  405a08:	1944      	adds	r4, r0, r5
  405a0a:	e72b      	b.n	405864 <_svfprintf_r+0x1080>
  405a0c:	2306      	movs	r3, #6
  405a0e:	930a      	str	r3, [sp, #40]	; 0x28
  405a10:	e61d      	b.n	40564e <_svfprintf_r+0xe6a>
  405a12:	272d      	movs	r7, #45	; 0x2d
  405a14:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405a18:	f7ff bacd 	b.w	404fb6 <_svfprintf_r+0x7d2>
  405a1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405a1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405a20:	4413      	add	r3, r2
  405a22:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405a24:	930e      	str	r3, [sp, #56]	; 0x38
  405a26:	2a00      	cmp	r2, #0
  405a28:	f340 80b0 	ble.w	405b8c <_svfprintf_r+0x13a8>
  405a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405a30:	9308      	str	r3, [sp, #32]
  405a32:	2367      	movs	r3, #103	; 0x67
  405a34:	9311      	str	r3, [sp, #68]	; 0x44
  405a36:	e671      	b.n	40571c <_svfprintf_r+0xf38>
  405a38:	2b00      	cmp	r3, #0
  405a3a:	f340 80c3 	ble.w	405bc4 <_svfprintf_r+0x13e0>
  405a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405a40:	2a00      	cmp	r2, #0
  405a42:	f040 8099 	bne.w	405b78 <_svfprintf_r+0x1394>
  405a46:	f01b 0f01 	tst.w	fp, #1
  405a4a:	f040 8095 	bne.w	405b78 <_svfprintf_r+0x1394>
  405a4e:	9308      	str	r3, [sp, #32]
  405a50:	930e      	str	r3, [sp, #56]	; 0x38
  405a52:	e663      	b.n	40571c <_svfprintf_r+0xf38>
  405a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405a56:	9308      	str	r3, [sp, #32]
  405a58:	930e      	str	r3, [sp, #56]	; 0x38
  405a5a:	900a      	str	r0, [sp, #40]	; 0x28
  405a5c:	950f      	str	r5, [sp, #60]	; 0x3c
  405a5e:	f8cd b01c 	str.w	fp, [sp, #28]
  405a62:	9012      	str	r0, [sp, #72]	; 0x48
  405a64:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405a68:	f7fe bfd4 	b.w	404a14 <_svfprintf_r+0x230>
  405a6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405a6e:	2b47      	cmp	r3, #71	; 0x47
  405a70:	f47f ae20 	bne.w	4056b4 <_svfprintf_r+0xed0>
  405a74:	f01b 0f01 	tst.w	fp, #1
  405a78:	f47f aeee 	bne.w	405858 <_svfprintf_r+0x1074>
  405a7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405a7e:	1b9b      	subs	r3, r3, r6
  405a80:	9313      	str	r3, [sp, #76]	; 0x4c
  405a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a84:	2b47      	cmp	r3, #71	; 0x47
  405a86:	f43f af18 	beq.w	4058ba <_svfprintf_r+0x10d6>
  405a8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405a8c:	9312      	str	r3, [sp, #72]	; 0x48
  405a8e:	e721      	b.n	4058d4 <_svfprintf_r+0x10f0>
  405a90:	424f      	negs	r7, r1
  405a92:	3110      	adds	r1, #16
  405a94:	4d48      	ldr	r5, [pc, #288]	; (405bb8 <_svfprintf_r+0x13d4>)
  405a96:	da2f      	bge.n	405af8 <_svfprintf_r+0x1314>
  405a98:	2410      	movs	r4, #16
  405a9a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405a9e:	e004      	b.n	405aaa <_svfprintf_r+0x12c6>
  405aa0:	f108 0808 	add.w	r8, r8, #8
  405aa4:	3f10      	subs	r7, #16
  405aa6:	2f10      	cmp	r7, #16
  405aa8:	dd26      	ble.n	405af8 <_svfprintf_r+0x1314>
  405aaa:	3301      	adds	r3, #1
  405aac:	3210      	adds	r2, #16
  405aae:	2b07      	cmp	r3, #7
  405ab0:	9227      	str	r2, [sp, #156]	; 0x9c
  405ab2:	9326      	str	r3, [sp, #152]	; 0x98
  405ab4:	f8c8 5000 	str.w	r5, [r8]
  405ab8:	f8c8 4004 	str.w	r4, [r8, #4]
  405abc:	ddf0      	ble.n	405aa0 <_svfprintf_r+0x12bc>
  405abe:	aa25      	add	r2, sp, #148	; 0x94
  405ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ac2:	4658      	mov	r0, fp
  405ac4:	f001 ffb8 	bl	407a38 <__ssprint_r>
  405ac8:	2800      	cmp	r0, #0
  405aca:	f47e af5d 	bne.w	404988 <_svfprintf_r+0x1a4>
  405ace:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ad2:	46c8      	mov	r8, r9
  405ad4:	e7e6      	b.n	405aa4 <_svfprintf_r+0x12c0>
  405ad6:	aa25      	add	r2, sp, #148	; 0x94
  405ad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ada:	980c      	ldr	r0, [sp, #48]	; 0x30
  405adc:	f001 ffac 	bl	407a38 <__ssprint_r>
  405ae0:	2800      	cmp	r0, #0
  405ae2:	f47e af51 	bne.w	404988 <_svfprintf_r+0x1a4>
  405ae6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405ae8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405aec:	46c8      	mov	r8, r9
  405aee:	e667      	b.n	4057c0 <_svfprintf_r+0xfdc>
  405af0:	2000      	movs	r0, #0
  405af2:	900a      	str	r0, [sp, #40]	; 0x28
  405af4:	f7fe bed0 	b.w	404898 <_svfprintf_r+0xb4>
  405af8:	3301      	adds	r3, #1
  405afa:	443a      	add	r2, r7
  405afc:	2b07      	cmp	r3, #7
  405afe:	e888 00a0 	stmia.w	r8, {r5, r7}
  405b02:	9227      	str	r2, [sp, #156]	; 0x9c
  405b04:	9326      	str	r3, [sp, #152]	; 0x98
  405b06:	f108 0808 	add.w	r8, r8, #8
  405b0a:	f77f ae5c 	ble.w	4057c6 <_svfprintf_r+0xfe2>
  405b0e:	aa25      	add	r2, sp, #148	; 0x94
  405b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405b12:	980c      	ldr	r0, [sp, #48]	; 0x30
  405b14:	f001 ff90 	bl	407a38 <__ssprint_r>
  405b18:	2800      	cmp	r0, #0
  405b1a:	f47e af35 	bne.w	404988 <_svfprintf_r+0x1a4>
  405b1e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405b20:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405b22:	46c8      	mov	r8, r9
  405b24:	e64f      	b.n	4057c6 <_svfprintf_r+0xfe2>
  405b26:	3330      	adds	r3, #48	; 0x30
  405b28:	2230      	movs	r2, #48	; 0x30
  405b2a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405b2e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405b32:	ab22      	add	r3, sp, #136	; 0x88
  405b34:	e70f      	b.n	405956 <_svfprintf_r+0x1172>
  405b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b38:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405b3a:	4413      	add	r3, r2
  405b3c:	930e      	str	r3, [sp, #56]	; 0x38
  405b3e:	e775      	b.n	405a2c <_svfprintf_r+0x1248>
  405b40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405b42:	e5cb      	b.n	4056dc <_svfprintf_r+0xef8>
  405b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405b46:	4e1d      	ldr	r6, [pc, #116]	; (405bbc <_svfprintf_r+0x13d8>)
  405b48:	2b00      	cmp	r3, #0
  405b4a:	bfb6      	itet	lt
  405b4c:	272d      	movlt	r7, #45	; 0x2d
  405b4e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405b52:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405b56:	4b1a      	ldr	r3, [pc, #104]	; (405bc0 <_svfprintf_r+0x13dc>)
  405b58:	f7ff ba2f 	b.w	404fba <_svfprintf_r+0x7d6>
  405b5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405b5e:	9808      	ldr	r0, [sp, #32]
  405b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405b62:	4639      	mov	r1, r7
  405b64:	f002 fffc 	bl	408b60 <__aeabi_dcmpeq>
  405b68:	2800      	cmp	r0, #0
  405b6a:	f47f ae7f 	bne.w	40586c <_svfprintf_r+0x1088>
  405b6e:	f1c5 0501 	rsb	r5, r5, #1
  405b72:	951f      	str	r5, [sp, #124]	; 0x7c
  405b74:	442c      	add	r4, r5
  405b76:	e59e      	b.n	4056b6 <_svfprintf_r+0xed2>
  405b78:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405b7c:	4413      	add	r3, r2
  405b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b80:	441a      	add	r2, r3
  405b82:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405b86:	920e      	str	r2, [sp, #56]	; 0x38
  405b88:	9308      	str	r3, [sp, #32]
  405b8a:	e5c7      	b.n	40571c <_svfprintf_r+0xf38>
  405b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405b90:	f1c3 0301 	rsb	r3, r3, #1
  405b94:	441a      	add	r2, r3
  405b96:	4613      	mov	r3, r2
  405b98:	e7d0      	b.n	405b3c <_svfprintf_r+0x1358>
  405b9a:	f01b 0301 	ands.w	r3, fp, #1
  405b9e:	9312      	str	r3, [sp, #72]	; 0x48
  405ba0:	f47f aee2 	bne.w	405968 <_svfprintf_r+0x1184>
  405ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405ba6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405baa:	9308      	str	r3, [sp, #32]
  405bac:	e5b6      	b.n	40571c <_svfprintf_r+0xf38>
  405bae:	bf00      	nop
  405bb0:	66666667 	.word	0x66666667
  405bb4:	00409af8 	.word	0x00409af8
  405bb8:	00409b14 	.word	0x00409b14
  405bbc:	00409acc 	.word	0x00409acc
  405bc0:	00409ac8 	.word	0x00409ac8
  405bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bc6:	b913      	cbnz	r3, 405bce <_svfprintf_r+0x13ea>
  405bc8:	f01b 0f01 	tst.w	fp, #1
  405bcc:	d002      	beq.n	405bd4 <_svfprintf_r+0x13f0>
  405bce:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405bd0:	3301      	adds	r3, #1
  405bd2:	e7d4      	b.n	405b7e <_svfprintf_r+0x139a>
  405bd4:	2301      	movs	r3, #1
  405bd6:	e73a      	b.n	405a4e <_svfprintf_r+0x126a>
  405bd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405bda:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405bde:	6828      	ldr	r0, [r5, #0]
  405be0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405be4:	900a      	str	r0, [sp, #40]	; 0x28
  405be6:	4628      	mov	r0, r5
  405be8:	3004      	adds	r0, #4
  405bea:	46a2      	mov	sl, r4
  405bec:	900f      	str	r0, [sp, #60]	; 0x3c
  405bee:	f7fe be51 	b.w	404894 <_svfprintf_r+0xb0>
  405bf2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405bf6:	f7ff b867 	b.w	404cc8 <_svfprintf_r+0x4e4>
  405bfa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405bfe:	f7ff ba15 	b.w	40502c <_svfprintf_r+0x848>
  405c02:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405c06:	e6a6      	b.n	405956 <_svfprintf_r+0x1172>
  405c08:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405c0c:	f7ff b8eb 	b.w	404de6 <_svfprintf_r+0x602>
  405c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c12:	230c      	movs	r3, #12
  405c14:	6013      	str	r3, [r2, #0]
  405c16:	f04f 33ff 	mov.w	r3, #4294967295
  405c1a:	9309      	str	r3, [sp, #36]	; 0x24
  405c1c:	f7fe bebd 	b.w	40499a <_svfprintf_r+0x1b6>
  405c20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405c24:	f7ff b99a 	b.w	404f5c <_svfprintf_r+0x778>
  405c28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405c2c:	f7ff b976 	b.w	404f1c <_svfprintf_r+0x738>
  405c30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405c34:	f7ff b959 	b.w	404eea <_svfprintf_r+0x706>
  405c38:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405c3c:	f7ff b912 	b.w	404e64 <_svfprintf_r+0x680>

00405c40 <__utoa>:
  405c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c42:	f8df e078 	ldr.w	lr, [pc, #120]	; 405cbc <__utoa+0x7c>
  405c46:	4616      	mov	r6, r2
  405c48:	4604      	mov	r4, r0
  405c4a:	460f      	mov	r7, r1
  405c4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  405c50:	b08b      	sub	sp, #44	; 0x2c
  405c52:	466d      	mov	r5, sp
  405c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  405c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  405c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  405c5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
  405c60:	1eb3      	subs	r3, r6, #2
  405c62:	f845 0b04 	str.w	r0, [r5], #4
  405c66:	2b22      	cmp	r3, #34	; 0x22
  405c68:	7029      	strb	r1, [r5, #0]
  405c6a:	d822      	bhi.n	405cb2 <__utoa+0x72>
  405c6c:	1e7d      	subs	r5, r7, #1
  405c6e:	4628      	mov	r0, r5
  405c70:	2200      	movs	r2, #0
  405c72:	e000      	b.n	405c76 <__utoa+0x36>
  405c74:	461a      	mov	r2, r3
  405c76:	fbb4 f1f6 	udiv	r1, r4, r6
  405c7a:	ab0a      	add	r3, sp, #40	; 0x28
  405c7c:	fb06 4411 	mls	r4, r6, r1, r4
  405c80:	4423      	add	r3, r4
  405c82:	460c      	mov	r4, r1
  405c84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
  405c88:	f800 3f01 	strb.w	r3, [r0, #1]!
  405c8c:	1c53      	adds	r3, r2, #1
  405c8e:	2900      	cmp	r1, #0
  405c90:	d1f0      	bne.n	405c74 <__utoa+0x34>
  405c92:	54f9      	strb	r1, [r7, r3]
  405c94:	18bb      	adds	r3, r7, r2
  405c96:	b14a      	cbz	r2, 405cac <__utoa+0x6c>
  405c98:	7819      	ldrb	r1, [r3, #0]
  405c9a:	7868      	ldrb	r0, [r5, #1]
  405c9c:	f805 1f01 	strb.w	r1, [r5, #1]!
  405ca0:	3401      	adds	r4, #1
  405ca2:	1b11      	subs	r1, r2, r4
  405ca4:	428c      	cmp	r4, r1
  405ca6:	f803 0901 	strb.w	r0, [r3], #-1
  405caa:	dbf5      	blt.n	405c98 <__utoa+0x58>
  405cac:	4638      	mov	r0, r7
  405cae:	b00b      	add	sp, #44	; 0x2c
  405cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cb2:	2000      	movs	r0, #0
  405cb4:	7038      	strb	r0, [r7, #0]
  405cb6:	b00b      	add	sp, #44	; 0x2c
  405cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cba:	bf00      	nop
  405cbc:	00409b24 	.word	0x00409b24

00405cc0 <register_fini>:
  405cc0:	4b02      	ldr	r3, [pc, #8]	; (405ccc <register_fini+0xc>)
  405cc2:	b113      	cbz	r3, 405cca <register_fini+0xa>
  405cc4:	4802      	ldr	r0, [pc, #8]	; (405cd0 <register_fini+0x10>)
  405cc6:	f000 b805 	b.w	405cd4 <atexit>
  405cca:	4770      	bx	lr
  405ccc:	00000000 	.word	0x00000000
  405cd0:	00406c5d 	.word	0x00406c5d

00405cd4 <atexit>:
  405cd4:	2300      	movs	r3, #0
  405cd6:	4601      	mov	r1, r0
  405cd8:	461a      	mov	r2, r3
  405cda:	4618      	mov	r0, r3
  405cdc:	f001 bf2a 	b.w	407b34 <__register_exitproc>

00405ce0 <quorem>:
  405ce0:	6902      	ldr	r2, [r0, #16]
  405ce2:	690b      	ldr	r3, [r1, #16]
  405ce4:	4293      	cmp	r3, r2
  405ce6:	f300 808d 	bgt.w	405e04 <quorem+0x124>
  405cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cee:	f103 38ff 	add.w	r8, r3, #4294967295
  405cf2:	f101 0714 	add.w	r7, r1, #20
  405cf6:	f100 0b14 	add.w	fp, r0, #20
  405cfa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405cfe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405d02:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405d06:	b083      	sub	sp, #12
  405d08:	3201      	adds	r2, #1
  405d0a:	fbb3 f9f2 	udiv	r9, r3, r2
  405d0e:	eb0b 0304 	add.w	r3, fp, r4
  405d12:	9400      	str	r4, [sp, #0]
  405d14:	eb07 0a04 	add.w	sl, r7, r4
  405d18:	9301      	str	r3, [sp, #4]
  405d1a:	f1b9 0f00 	cmp.w	r9, #0
  405d1e:	d039      	beq.n	405d94 <quorem+0xb4>
  405d20:	2500      	movs	r5, #0
  405d22:	462e      	mov	r6, r5
  405d24:	46bc      	mov	ip, r7
  405d26:	46de      	mov	lr, fp
  405d28:	f85c 4b04 	ldr.w	r4, [ip], #4
  405d2c:	f8de 3000 	ldr.w	r3, [lr]
  405d30:	b2a2      	uxth	r2, r4
  405d32:	fb09 5502 	mla	r5, r9, r2, r5
  405d36:	0c22      	lsrs	r2, r4, #16
  405d38:	0c2c      	lsrs	r4, r5, #16
  405d3a:	fb09 4202 	mla	r2, r9, r2, r4
  405d3e:	b2ad      	uxth	r5, r5
  405d40:	1b75      	subs	r5, r6, r5
  405d42:	b296      	uxth	r6, r2
  405d44:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405d48:	fa15 f383 	uxtah	r3, r5, r3
  405d4c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405d50:	b29b      	uxth	r3, r3
  405d52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405d56:	45e2      	cmp	sl, ip
  405d58:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405d5c:	f84e 3b04 	str.w	r3, [lr], #4
  405d60:	ea4f 4626 	mov.w	r6, r6, asr #16
  405d64:	d2e0      	bcs.n	405d28 <quorem+0x48>
  405d66:	9b00      	ldr	r3, [sp, #0]
  405d68:	f85b 3003 	ldr.w	r3, [fp, r3]
  405d6c:	b993      	cbnz	r3, 405d94 <quorem+0xb4>
  405d6e:	9c01      	ldr	r4, [sp, #4]
  405d70:	1f23      	subs	r3, r4, #4
  405d72:	459b      	cmp	fp, r3
  405d74:	d20c      	bcs.n	405d90 <quorem+0xb0>
  405d76:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405d7a:	b94b      	cbnz	r3, 405d90 <quorem+0xb0>
  405d7c:	f1a4 0308 	sub.w	r3, r4, #8
  405d80:	e002      	b.n	405d88 <quorem+0xa8>
  405d82:	681a      	ldr	r2, [r3, #0]
  405d84:	3b04      	subs	r3, #4
  405d86:	b91a      	cbnz	r2, 405d90 <quorem+0xb0>
  405d88:	459b      	cmp	fp, r3
  405d8a:	f108 38ff 	add.w	r8, r8, #4294967295
  405d8e:	d3f8      	bcc.n	405d82 <quorem+0xa2>
  405d90:	f8c0 8010 	str.w	r8, [r0, #16]
  405d94:	4604      	mov	r4, r0
  405d96:	f001 fccd 	bl	407734 <__mcmp>
  405d9a:	2800      	cmp	r0, #0
  405d9c:	db2e      	blt.n	405dfc <quorem+0x11c>
  405d9e:	f109 0901 	add.w	r9, r9, #1
  405da2:	465d      	mov	r5, fp
  405da4:	2300      	movs	r3, #0
  405da6:	f857 1b04 	ldr.w	r1, [r7], #4
  405daa:	6828      	ldr	r0, [r5, #0]
  405dac:	b28a      	uxth	r2, r1
  405dae:	1a9a      	subs	r2, r3, r2
  405db0:	0c0b      	lsrs	r3, r1, #16
  405db2:	fa12 f280 	uxtah	r2, r2, r0
  405db6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405dba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405dbe:	b292      	uxth	r2, r2
  405dc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405dc4:	45ba      	cmp	sl, r7
  405dc6:	f845 2b04 	str.w	r2, [r5], #4
  405dca:	ea4f 4323 	mov.w	r3, r3, asr #16
  405dce:	d2ea      	bcs.n	405da6 <quorem+0xc6>
  405dd0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405dd4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405dd8:	b982      	cbnz	r2, 405dfc <quorem+0x11c>
  405dda:	1f1a      	subs	r2, r3, #4
  405ddc:	4593      	cmp	fp, r2
  405dde:	d20b      	bcs.n	405df8 <quorem+0x118>
  405de0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405de4:	b942      	cbnz	r2, 405df8 <quorem+0x118>
  405de6:	3b08      	subs	r3, #8
  405de8:	e002      	b.n	405df0 <quorem+0x110>
  405dea:	681a      	ldr	r2, [r3, #0]
  405dec:	3b04      	subs	r3, #4
  405dee:	b91a      	cbnz	r2, 405df8 <quorem+0x118>
  405df0:	459b      	cmp	fp, r3
  405df2:	f108 38ff 	add.w	r8, r8, #4294967295
  405df6:	d3f8      	bcc.n	405dea <quorem+0x10a>
  405df8:	f8c4 8010 	str.w	r8, [r4, #16]
  405dfc:	4648      	mov	r0, r9
  405dfe:	b003      	add	sp, #12
  405e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e04:	2000      	movs	r0, #0
  405e06:	4770      	bx	lr

00405e08 <_dtoa_r>:
  405e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405e0e:	b09b      	sub	sp, #108	; 0x6c
  405e10:	4604      	mov	r4, r0
  405e12:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405e14:	4692      	mov	sl, r2
  405e16:	469b      	mov	fp, r3
  405e18:	b141      	cbz	r1, 405e2c <_dtoa_r+0x24>
  405e1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405e1c:	604a      	str	r2, [r1, #4]
  405e1e:	2301      	movs	r3, #1
  405e20:	4093      	lsls	r3, r2
  405e22:	608b      	str	r3, [r1, #8]
  405e24:	f001 faae 	bl	407384 <_Bfree>
  405e28:	2300      	movs	r3, #0
  405e2a:	6423      	str	r3, [r4, #64]	; 0x40
  405e2c:	f1bb 0f00 	cmp.w	fp, #0
  405e30:	465d      	mov	r5, fp
  405e32:	db35      	blt.n	405ea0 <_dtoa_r+0x98>
  405e34:	2300      	movs	r3, #0
  405e36:	6033      	str	r3, [r6, #0]
  405e38:	4b9d      	ldr	r3, [pc, #628]	; (4060b0 <_dtoa_r+0x2a8>)
  405e3a:	43ab      	bics	r3, r5
  405e3c:	d015      	beq.n	405e6a <_dtoa_r+0x62>
  405e3e:	4650      	mov	r0, sl
  405e40:	4659      	mov	r1, fp
  405e42:	2200      	movs	r2, #0
  405e44:	2300      	movs	r3, #0
  405e46:	f002 fe8b 	bl	408b60 <__aeabi_dcmpeq>
  405e4a:	4680      	mov	r8, r0
  405e4c:	2800      	cmp	r0, #0
  405e4e:	d02d      	beq.n	405eac <_dtoa_r+0xa4>
  405e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e52:	2301      	movs	r3, #1
  405e54:	6013      	str	r3, [r2, #0]
  405e56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e58:	2b00      	cmp	r3, #0
  405e5a:	f000 80bd 	beq.w	405fd8 <_dtoa_r+0x1d0>
  405e5e:	4895      	ldr	r0, [pc, #596]	; (4060b4 <_dtoa_r+0x2ac>)
  405e60:	6018      	str	r0, [r3, #0]
  405e62:	3801      	subs	r0, #1
  405e64:	b01b      	add	sp, #108	; 0x6c
  405e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e6c:	f242 730f 	movw	r3, #9999	; 0x270f
  405e70:	6013      	str	r3, [r2, #0]
  405e72:	f1ba 0f00 	cmp.w	sl, #0
  405e76:	d10d      	bne.n	405e94 <_dtoa_r+0x8c>
  405e78:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405e7c:	b955      	cbnz	r5, 405e94 <_dtoa_r+0x8c>
  405e7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e80:	488d      	ldr	r0, [pc, #564]	; (4060b8 <_dtoa_r+0x2b0>)
  405e82:	2b00      	cmp	r3, #0
  405e84:	d0ee      	beq.n	405e64 <_dtoa_r+0x5c>
  405e86:	f100 0308 	add.w	r3, r0, #8
  405e8a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405e8c:	6013      	str	r3, [r2, #0]
  405e8e:	b01b      	add	sp, #108	; 0x6c
  405e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e96:	4889      	ldr	r0, [pc, #548]	; (4060bc <_dtoa_r+0x2b4>)
  405e98:	2b00      	cmp	r3, #0
  405e9a:	d0e3      	beq.n	405e64 <_dtoa_r+0x5c>
  405e9c:	1cc3      	adds	r3, r0, #3
  405e9e:	e7f4      	b.n	405e8a <_dtoa_r+0x82>
  405ea0:	2301      	movs	r3, #1
  405ea2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405ea6:	6033      	str	r3, [r6, #0]
  405ea8:	46ab      	mov	fp, r5
  405eaa:	e7c5      	b.n	405e38 <_dtoa_r+0x30>
  405eac:	aa18      	add	r2, sp, #96	; 0x60
  405eae:	ab19      	add	r3, sp, #100	; 0x64
  405eb0:	9201      	str	r2, [sp, #4]
  405eb2:	9300      	str	r3, [sp, #0]
  405eb4:	4652      	mov	r2, sl
  405eb6:	465b      	mov	r3, fp
  405eb8:	4620      	mov	r0, r4
  405eba:	f001 fcdb 	bl	407874 <__d2b>
  405ebe:	0d2b      	lsrs	r3, r5, #20
  405ec0:	4681      	mov	r9, r0
  405ec2:	d071      	beq.n	405fa8 <_dtoa_r+0x1a0>
  405ec4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405ec8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405ecc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405ece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405ed2:	4650      	mov	r0, sl
  405ed4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405ed8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405edc:	2200      	movs	r2, #0
  405ede:	4b78      	ldr	r3, [pc, #480]	; (4060c0 <_dtoa_r+0x2b8>)
  405ee0:	f002 fa22 	bl	408328 <__aeabi_dsub>
  405ee4:	a36c      	add	r3, pc, #432	; (adr r3, 406098 <_dtoa_r+0x290>)
  405ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405eea:	f002 fbd1 	bl	408690 <__aeabi_dmul>
  405eee:	a36c      	add	r3, pc, #432	; (adr r3, 4060a0 <_dtoa_r+0x298>)
  405ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ef4:	f002 fa1a 	bl	40832c <__adddf3>
  405ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405efc:	4630      	mov	r0, r6
  405efe:	f002 fb61 	bl	4085c4 <__aeabi_i2d>
  405f02:	a369      	add	r3, pc, #420	; (adr r3, 4060a8 <_dtoa_r+0x2a0>)
  405f04:	e9d3 2300 	ldrd	r2, r3, [r3]
  405f08:	f002 fbc2 	bl	408690 <__aeabi_dmul>
  405f0c:	4602      	mov	r2, r0
  405f0e:	460b      	mov	r3, r1
  405f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405f14:	f002 fa0a 	bl	40832c <__adddf3>
  405f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405f1c:	f002 fe68 	bl	408bf0 <__aeabi_d2iz>
  405f20:	2200      	movs	r2, #0
  405f22:	9002      	str	r0, [sp, #8]
  405f24:	2300      	movs	r3, #0
  405f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405f2a:	f002 fe23 	bl	408b74 <__aeabi_dcmplt>
  405f2e:	2800      	cmp	r0, #0
  405f30:	f040 8173 	bne.w	40621a <_dtoa_r+0x412>
  405f34:	9d02      	ldr	r5, [sp, #8]
  405f36:	2d16      	cmp	r5, #22
  405f38:	f200 815d 	bhi.w	4061f6 <_dtoa_r+0x3ee>
  405f3c:	4b61      	ldr	r3, [pc, #388]	; (4060c4 <_dtoa_r+0x2bc>)
  405f3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405f42:	e9d3 0100 	ldrd	r0, r1, [r3]
  405f46:	4652      	mov	r2, sl
  405f48:	465b      	mov	r3, fp
  405f4a:	f002 fe31 	bl	408bb0 <__aeabi_dcmpgt>
  405f4e:	2800      	cmp	r0, #0
  405f50:	f000 81c5 	beq.w	4062de <_dtoa_r+0x4d6>
  405f54:	1e6b      	subs	r3, r5, #1
  405f56:	9302      	str	r3, [sp, #8]
  405f58:	2300      	movs	r3, #0
  405f5a:	930e      	str	r3, [sp, #56]	; 0x38
  405f5c:	1bbf      	subs	r7, r7, r6
  405f5e:	1e7b      	subs	r3, r7, #1
  405f60:	9306      	str	r3, [sp, #24]
  405f62:	f100 8154 	bmi.w	40620e <_dtoa_r+0x406>
  405f66:	2300      	movs	r3, #0
  405f68:	9308      	str	r3, [sp, #32]
  405f6a:	9b02      	ldr	r3, [sp, #8]
  405f6c:	2b00      	cmp	r3, #0
  405f6e:	f2c0 8145 	blt.w	4061fc <_dtoa_r+0x3f4>
  405f72:	9a06      	ldr	r2, [sp, #24]
  405f74:	930d      	str	r3, [sp, #52]	; 0x34
  405f76:	4611      	mov	r1, r2
  405f78:	4419      	add	r1, r3
  405f7a:	2300      	movs	r3, #0
  405f7c:	9106      	str	r1, [sp, #24]
  405f7e:	930c      	str	r3, [sp, #48]	; 0x30
  405f80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f82:	2b09      	cmp	r3, #9
  405f84:	d82a      	bhi.n	405fdc <_dtoa_r+0x1d4>
  405f86:	2b05      	cmp	r3, #5
  405f88:	f340 865b 	ble.w	406c42 <_dtoa_r+0xe3a>
  405f8c:	3b04      	subs	r3, #4
  405f8e:	9324      	str	r3, [sp, #144]	; 0x90
  405f90:	2500      	movs	r5, #0
  405f92:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f94:	3b02      	subs	r3, #2
  405f96:	2b03      	cmp	r3, #3
  405f98:	f200 8642 	bhi.w	406c20 <_dtoa_r+0xe18>
  405f9c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405fa0:	02c903d4 	.word	0x02c903d4
  405fa4:	046103df 	.word	0x046103df
  405fa8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405faa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405fac:	443e      	add	r6, r7
  405fae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405fb2:	2b20      	cmp	r3, #32
  405fb4:	f340 818e 	ble.w	4062d4 <_dtoa_r+0x4cc>
  405fb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405fbc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405fc0:	409d      	lsls	r5, r3
  405fc2:	fa2a f000 	lsr.w	r0, sl, r0
  405fc6:	4328      	orrs	r0, r5
  405fc8:	f002 faec 	bl	4085a4 <__aeabi_ui2d>
  405fcc:	2301      	movs	r3, #1
  405fce:	3e01      	subs	r6, #1
  405fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405fd4:	9314      	str	r3, [sp, #80]	; 0x50
  405fd6:	e781      	b.n	405edc <_dtoa_r+0xd4>
  405fd8:	483b      	ldr	r0, [pc, #236]	; (4060c8 <_dtoa_r+0x2c0>)
  405fda:	e743      	b.n	405e64 <_dtoa_r+0x5c>
  405fdc:	2100      	movs	r1, #0
  405fde:	6461      	str	r1, [r4, #68]	; 0x44
  405fe0:	4620      	mov	r0, r4
  405fe2:	9125      	str	r1, [sp, #148]	; 0x94
  405fe4:	f001 f9a8 	bl	407338 <_Balloc>
  405fe8:	f04f 33ff 	mov.w	r3, #4294967295
  405fec:	930a      	str	r3, [sp, #40]	; 0x28
  405fee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405ff0:	930f      	str	r3, [sp, #60]	; 0x3c
  405ff2:	2301      	movs	r3, #1
  405ff4:	9004      	str	r0, [sp, #16]
  405ff6:	6420      	str	r0, [r4, #64]	; 0x40
  405ff8:	9224      	str	r2, [sp, #144]	; 0x90
  405ffa:	930b      	str	r3, [sp, #44]	; 0x2c
  405ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405ffe:	2b00      	cmp	r3, #0
  406000:	f2c0 80d9 	blt.w	4061b6 <_dtoa_r+0x3ae>
  406004:	9a02      	ldr	r2, [sp, #8]
  406006:	2a0e      	cmp	r2, #14
  406008:	f300 80d5 	bgt.w	4061b6 <_dtoa_r+0x3ae>
  40600c:	4b2d      	ldr	r3, [pc, #180]	; (4060c4 <_dtoa_r+0x2bc>)
  40600e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406012:	e9d3 2300 	ldrd	r2, r3, [r3]
  406016:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40601a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40601c:	2b00      	cmp	r3, #0
  40601e:	f2c0 83ba 	blt.w	406796 <_dtoa_r+0x98e>
  406022:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406026:	4650      	mov	r0, sl
  406028:	462a      	mov	r2, r5
  40602a:	4633      	mov	r3, r6
  40602c:	4659      	mov	r1, fp
  40602e:	f002 fc59 	bl	4088e4 <__aeabi_ddiv>
  406032:	f002 fddd 	bl	408bf0 <__aeabi_d2iz>
  406036:	4680      	mov	r8, r0
  406038:	f002 fac4 	bl	4085c4 <__aeabi_i2d>
  40603c:	462a      	mov	r2, r5
  40603e:	4633      	mov	r3, r6
  406040:	f002 fb26 	bl	408690 <__aeabi_dmul>
  406044:	460b      	mov	r3, r1
  406046:	4602      	mov	r2, r0
  406048:	4659      	mov	r1, fp
  40604a:	4650      	mov	r0, sl
  40604c:	f002 f96c 	bl	408328 <__aeabi_dsub>
  406050:	9d04      	ldr	r5, [sp, #16]
  406052:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406056:	702b      	strb	r3, [r5, #0]
  406058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40605a:	2b01      	cmp	r3, #1
  40605c:	4606      	mov	r6, r0
  40605e:	460f      	mov	r7, r1
  406060:	f105 0501 	add.w	r5, r5, #1
  406064:	d068      	beq.n	406138 <_dtoa_r+0x330>
  406066:	2200      	movs	r2, #0
  406068:	4b18      	ldr	r3, [pc, #96]	; (4060cc <_dtoa_r+0x2c4>)
  40606a:	f002 fb11 	bl	408690 <__aeabi_dmul>
  40606e:	2200      	movs	r2, #0
  406070:	2300      	movs	r3, #0
  406072:	4606      	mov	r6, r0
  406074:	460f      	mov	r7, r1
  406076:	f002 fd73 	bl	408b60 <__aeabi_dcmpeq>
  40607a:	2800      	cmp	r0, #0
  40607c:	f040 8088 	bne.w	406190 <_dtoa_r+0x388>
  406080:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406084:	f04f 0a00 	mov.w	sl, #0
  406088:	f8df b040 	ldr.w	fp, [pc, #64]	; 4060cc <_dtoa_r+0x2c4>
  40608c:	940c      	str	r4, [sp, #48]	; 0x30
  40608e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406092:	e028      	b.n	4060e6 <_dtoa_r+0x2de>
  406094:	f3af 8000 	nop.w
  406098:	636f4361 	.word	0x636f4361
  40609c:	3fd287a7 	.word	0x3fd287a7
  4060a0:	8b60c8b3 	.word	0x8b60c8b3
  4060a4:	3fc68a28 	.word	0x3fc68a28
  4060a8:	509f79fb 	.word	0x509f79fb
  4060ac:	3fd34413 	.word	0x3fd34413
  4060b0:	7ff00000 	.word	0x7ff00000
  4060b4:	00409b01 	.word	0x00409b01
  4060b8:	00409b4c 	.word	0x00409b4c
  4060bc:	00409b58 	.word	0x00409b58
  4060c0:	3ff80000 	.word	0x3ff80000
  4060c4:	00409b88 	.word	0x00409b88
  4060c8:	00409b00 	.word	0x00409b00
  4060cc:	40240000 	.word	0x40240000
  4060d0:	f002 fade 	bl	408690 <__aeabi_dmul>
  4060d4:	2200      	movs	r2, #0
  4060d6:	2300      	movs	r3, #0
  4060d8:	4606      	mov	r6, r0
  4060da:	460f      	mov	r7, r1
  4060dc:	f002 fd40 	bl	408b60 <__aeabi_dcmpeq>
  4060e0:	2800      	cmp	r0, #0
  4060e2:	f040 83c1 	bne.w	406868 <_dtoa_r+0xa60>
  4060e6:	4642      	mov	r2, r8
  4060e8:	464b      	mov	r3, r9
  4060ea:	4630      	mov	r0, r6
  4060ec:	4639      	mov	r1, r7
  4060ee:	f002 fbf9 	bl	4088e4 <__aeabi_ddiv>
  4060f2:	f002 fd7d 	bl	408bf0 <__aeabi_d2iz>
  4060f6:	4604      	mov	r4, r0
  4060f8:	f002 fa64 	bl	4085c4 <__aeabi_i2d>
  4060fc:	4642      	mov	r2, r8
  4060fe:	464b      	mov	r3, r9
  406100:	f002 fac6 	bl	408690 <__aeabi_dmul>
  406104:	4602      	mov	r2, r0
  406106:	460b      	mov	r3, r1
  406108:	4630      	mov	r0, r6
  40610a:	4639      	mov	r1, r7
  40610c:	f002 f90c 	bl	408328 <__aeabi_dsub>
  406110:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406114:	9e04      	ldr	r6, [sp, #16]
  406116:	f805 eb01 	strb.w	lr, [r5], #1
  40611a:	eba5 0e06 	sub.w	lr, r5, r6
  40611e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406120:	45b6      	cmp	lr, r6
  406122:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406126:	4652      	mov	r2, sl
  406128:	465b      	mov	r3, fp
  40612a:	d1d1      	bne.n	4060d0 <_dtoa_r+0x2c8>
  40612c:	46a0      	mov	r8, r4
  40612e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406132:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406134:	4606      	mov	r6, r0
  406136:	460f      	mov	r7, r1
  406138:	4632      	mov	r2, r6
  40613a:	463b      	mov	r3, r7
  40613c:	4630      	mov	r0, r6
  40613e:	4639      	mov	r1, r7
  406140:	f002 f8f4 	bl	40832c <__adddf3>
  406144:	4606      	mov	r6, r0
  406146:	460f      	mov	r7, r1
  406148:	4602      	mov	r2, r0
  40614a:	460b      	mov	r3, r1
  40614c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406150:	f002 fd10 	bl	408b74 <__aeabi_dcmplt>
  406154:	b948      	cbnz	r0, 40616a <_dtoa_r+0x362>
  406156:	4632      	mov	r2, r6
  406158:	463b      	mov	r3, r7
  40615a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40615e:	f002 fcff 	bl	408b60 <__aeabi_dcmpeq>
  406162:	b1a8      	cbz	r0, 406190 <_dtoa_r+0x388>
  406164:	f018 0f01 	tst.w	r8, #1
  406168:	d012      	beq.n	406190 <_dtoa_r+0x388>
  40616a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40616e:	9a04      	ldr	r2, [sp, #16]
  406170:	1e6b      	subs	r3, r5, #1
  406172:	e004      	b.n	40617e <_dtoa_r+0x376>
  406174:	429a      	cmp	r2, r3
  406176:	f000 8401 	beq.w	40697c <_dtoa_r+0xb74>
  40617a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40617e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406182:	f103 0501 	add.w	r5, r3, #1
  406186:	d0f5      	beq.n	406174 <_dtoa_r+0x36c>
  406188:	f108 0801 	add.w	r8, r8, #1
  40618c:	f883 8000 	strb.w	r8, [r3]
  406190:	4649      	mov	r1, r9
  406192:	4620      	mov	r0, r4
  406194:	f001 f8f6 	bl	407384 <_Bfree>
  406198:	2200      	movs	r2, #0
  40619a:	9b02      	ldr	r3, [sp, #8]
  40619c:	702a      	strb	r2, [r5, #0]
  40619e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4061a0:	3301      	adds	r3, #1
  4061a2:	6013      	str	r3, [r2, #0]
  4061a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4061a6:	2b00      	cmp	r3, #0
  4061a8:	f000 839e 	beq.w	4068e8 <_dtoa_r+0xae0>
  4061ac:	9804      	ldr	r0, [sp, #16]
  4061ae:	601d      	str	r5, [r3, #0]
  4061b0:	b01b      	add	sp, #108	; 0x6c
  4061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4061b8:	2a00      	cmp	r2, #0
  4061ba:	d03e      	beq.n	40623a <_dtoa_r+0x432>
  4061bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4061be:	2a01      	cmp	r2, #1
  4061c0:	f340 8311 	ble.w	4067e6 <_dtoa_r+0x9de>
  4061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4061c8:	1e5f      	subs	r7, r3, #1
  4061ca:	42ba      	cmp	r2, r7
  4061cc:	f2c0 838f 	blt.w	4068ee <_dtoa_r+0xae6>
  4061d0:	1bd7      	subs	r7, r2, r7
  4061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061d4:	2b00      	cmp	r3, #0
  4061d6:	f2c0 848b 	blt.w	406af0 <_dtoa_r+0xce8>
  4061da:	9d08      	ldr	r5, [sp, #32]
  4061dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061de:	9a08      	ldr	r2, [sp, #32]
  4061e0:	441a      	add	r2, r3
  4061e2:	9208      	str	r2, [sp, #32]
  4061e4:	9a06      	ldr	r2, [sp, #24]
  4061e6:	2101      	movs	r1, #1
  4061e8:	441a      	add	r2, r3
  4061ea:	4620      	mov	r0, r4
  4061ec:	9206      	str	r2, [sp, #24]
  4061ee:	f001 f963 	bl	4074b8 <__i2b>
  4061f2:	4606      	mov	r6, r0
  4061f4:	e024      	b.n	406240 <_dtoa_r+0x438>
  4061f6:	2301      	movs	r3, #1
  4061f8:	930e      	str	r3, [sp, #56]	; 0x38
  4061fa:	e6af      	b.n	405f5c <_dtoa_r+0x154>
  4061fc:	9a08      	ldr	r2, [sp, #32]
  4061fe:	9b02      	ldr	r3, [sp, #8]
  406200:	1ad2      	subs	r2, r2, r3
  406202:	425b      	negs	r3, r3
  406204:	930c      	str	r3, [sp, #48]	; 0x30
  406206:	2300      	movs	r3, #0
  406208:	9208      	str	r2, [sp, #32]
  40620a:	930d      	str	r3, [sp, #52]	; 0x34
  40620c:	e6b8      	b.n	405f80 <_dtoa_r+0x178>
  40620e:	f1c7 0301 	rsb	r3, r7, #1
  406212:	9308      	str	r3, [sp, #32]
  406214:	2300      	movs	r3, #0
  406216:	9306      	str	r3, [sp, #24]
  406218:	e6a7      	b.n	405f6a <_dtoa_r+0x162>
  40621a:	9d02      	ldr	r5, [sp, #8]
  40621c:	4628      	mov	r0, r5
  40621e:	f002 f9d1 	bl	4085c4 <__aeabi_i2d>
  406222:	4602      	mov	r2, r0
  406224:	460b      	mov	r3, r1
  406226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40622a:	f002 fc99 	bl	408b60 <__aeabi_dcmpeq>
  40622e:	2800      	cmp	r0, #0
  406230:	f47f ae80 	bne.w	405f34 <_dtoa_r+0x12c>
  406234:	1e6b      	subs	r3, r5, #1
  406236:	9302      	str	r3, [sp, #8]
  406238:	e67c      	b.n	405f34 <_dtoa_r+0x12c>
  40623a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40623c:	9d08      	ldr	r5, [sp, #32]
  40623e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406240:	2d00      	cmp	r5, #0
  406242:	dd0c      	ble.n	40625e <_dtoa_r+0x456>
  406244:	9906      	ldr	r1, [sp, #24]
  406246:	2900      	cmp	r1, #0
  406248:	460b      	mov	r3, r1
  40624a:	dd08      	ble.n	40625e <_dtoa_r+0x456>
  40624c:	42a9      	cmp	r1, r5
  40624e:	9a08      	ldr	r2, [sp, #32]
  406250:	bfa8      	it	ge
  406252:	462b      	movge	r3, r5
  406254:	1ad2      	subs	r2, r2, r3
  406256:	1aed      	subs	r5, r5, r3
  406258:	1acb      	subs	r3, r1, r3
  40625a:	9208      	str	r2, [sp, #32]
  40625c:	9306      	str	r3, [sp, #24]
  40625e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406260:	b1d3      	cbz	r3, 406298 <_dtoa_r+0x490>
  406262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406264:	2b00      	cmp	r3, #0
  406266:	f000 82b7 	beq.w	4067d8 <_dtoa_r+0x9d0>
  40626a:	2f00      	cmp	r7, #0
  40626c:	dd10      	ble.n	406290 <_dtoa_r+0x488>
  40626e:	4631      	mov	r1, r6
  406270:	463a      	mov	r2, r7
  406272:	4620      	mov	r0, r4
  406274:	f001 f9bc 	bl	4075f0 <__pow5mult>
  406278:	464a      	mov	r2, r9
  40627a:	4601      	mov	r1, r0
  40627c:	4606      	mov	r6, r0
  40627e:	4620      	mov	r0, r4
  406280:	f001 f924 	bl	4074cc <__multiply>
  406284:	4649      	mov	r1, r9
  406286:	4680      	mov	r8, r0
  406288:	4620      	mov	r0, r4
  40628a:	f001 f87b 	bl	407384 <_Bfree>
  40628e:	46c1      	mov	r9, r8
  406290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406292:	1bda      	subs	r2, r3, r7
  406294:	f040 82a1 	bne.w	4067da <_dtoa_r+0x9d2>
  406298:	2101      	movs	r1, #1
  40629a:	4620      	mov	r0, r4
  40629c:	f001 f90c 	bl	4074b8 <__i2b>
  4062a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4062a2:	2b00      	cmp	r3, #0
  4062a4:	4680      	mov	r8, r0
  4062a6:	dd1c      	ble.n	4062e2 <_dtoa_r+0x4da>
  4062a8:	4601      	mov	r1, r0
  4062aa:	461a      	mov	r2, r3
  4062ac:	4620      	mov	r0, r4
  4062ae:	f001 f99f 	bl	4075f0 <__pow5mult>
  4062b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062b4:	2b01      	cmp	r3, #1
  4062b6:	4680      	mov	r8, r0
  4062b8:	f340 8254 	ble.w	406764 <_dtoa_r+0x95c>
  4062bc:	2300      	movs	r3, #0
  4062be:	930c      	str	r3, [sp, #48]	; 0x30
  4062c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4062c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4062c8:	6918      	ldr	r0, [r3, #16]
  4062ca:	f001 f8a5 	bl	407418 <__hi0bits>
  4062ce:	f1c0 0020 	rsb	r0, r0, #32
  4062d2:	e010      	b.n	4062f6 <_dtoa_r+0x4ee>
  4062d4:	f1c3 0520 	rsb	r5, r3, #32
  4062d8:	fa0a f005 	lsl.w	r0, sl, r5
  4062dc:	e674      	b.n	405fc8 <_dtoa_r+0x1c0>
  4062de:	900e      	str	r0, [sp, #56]	; 0x38
  4062e0:	e63c      	b.n	405f5c <_dtoa_r+0x154>
  4062e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062e4:	2b01      	cmp	r3, #1
  4062e6:	f340 8287 	ble.w	4067f8 <_dtoa_r+0x9f0>
  4062ea:	2300      	movs	r3, #0
  4062ec:	930c      	str	r3, [sp, #48]	; 0x30
  4062ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4062f0:	2001      	movs	r0, #1
  4062f2:	2b00      	cmp	r3, #0
  4062f4:	d1e4      	bne.n	4062c0 <_dtoa_r+0x4b8>
  4062f6:	9a06      	ldr	r2, [sp, #24]
  4062f8:	4410      	add	r0, r2
  4062fa:	f010 001f 	ands.w	r0, r0, #31
  4062fe:	f000 80a1 	beq.w	406444 <_dtoa_r+0x63c>
  406302:	f1c0 0320 	rsb	r3, r0, #32
  406306:	2b04      	cmp	r3, #4
  406308:	f340 849e 	ble.w	406c48 <_dtoa_r+0xe40>
  40630c:	9b08      	ldr	r3, [sp, #32]
  40630e:	f1c0 001c 	rsb	r0, r0, #28
  406312:	4403      	add	r3, r0
  406314:	9308      	str	r3, [sp, #32]
  406316:	4613      	mov	r3, r2
  406318:	4403      	add	r3, r0
  40631a:	4405      	add	r5, r0
  40631c:	9306      	str	r3, [sp, #24]
  40631e:	9b08      	ldr	r3, [sp, #32]
  406320:	2b00      	cmp	r3, #0
  406322:	dd05      	ble.n	406330 <_dtoa_r+0x528>
  406324:	4649      	mov	r1, r9
  406326:	461a      	mov	r2, r3
  406328:	4620      	mov	r0, r4
  40632a:	f001 f9b1 	bl	407690 <__lshift>
  40632e:	4681      	mov	r9, r0
  406330:	9b06      	ldr	r3, [sp, #24]
  406332:	2b00      	cmp	r3, #0
  406334:	dd05      	ble.n	406342 <_dtoa_r+0x53a>
  406336:	4641      	mov	r1, r8
  406338:	461a      	mov	r2, r3
  40633a:	4620      	mov	r0, r4
  40633c:	f001 f9a8 	bl	407690 <__lshift>
  406340:	4680      	mov	r8, r0
  406342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406344:	2b00      	cmp	r3, #0
  406346:	f040 8086 	bne.w	406456 <_dtoa_r+0x64e>
  40634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40634c:	2b00      	cmp	r3, #0
  40634e:	f340 8266 	ble.w	40681e <_dtoa_r+0xa16>
  406352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406354:	2b00      	cmp	r3, #0
  406356:	f000 8098 	beq.w	40648a <_dtoa_r+0x682>
  40635a:	2d00      	cmp	r5, #0
  40635c:	dd05      	ble.n	40636a <_dtoa_r+0x562>
  40635e:	4631      	mov	r1, r6
  406360:	462a      	mov	r2, r5
  406362:	4620      	mov	r0, r4
  406364:	f001 f994 	bl	407690 <__lshift>
  406368:	4606      	mov	r6, r0
  40636a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40636c:	2b00      	cmp	r3, #0
  40636e:	f040 8337 	bne.w	4069e0 <_dtoa_r+0xbd8>
  406372:	9606      	str	r6, [sp, #24]
  406374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406376:	9a04      	ldr	r2, [sp, #16]
  406378:	f8dd b018 	ldr.w	fp, [sp, #24]
  40637c:	3b01      	subs	r3, #1
  40637e:	18d3      	adds	r3, r2, r3
  406380:	930b      	str	r3, [sp, #44]	; 0x2c
  406382:	f00a 0301 	and.w	r3, sl, #1
  406386:	930c      	str	r3, [sp, #48]	; 0x30
  406388:	4617      	mov	r7, r2
  40638a:	46c2      	mov	sl, r8
  40638c:	4651      	mov	r1, sl
  40638e:	4648      	mov	r0, r9
  406390:	f7ff fca6 	bl	405ce0 <quorem>
  406394:	4631      	mov	r1, r6
  406396:	4605      	mov	r5, r0
  406398:	4648      	mov	r0, r9
  40639a:	f001 f9cb 	bl	407734 <__mcmp>
  40639e:	465a      	mov	r2, fp
  4063a0:	900a      	str	r0, [sp, #40]	; 0x28
  4063a2:	4651      	mov	r1, sl
  4063a4:	4620      	mov	r0, r4
  4063a6:	f001 f9e1 	bl	40776c <__mdiff>
  4063aa:	68c2      	ldr	r2, [r0, #12]
  4063ac:	4680      	mov	r8, r0
  4063ae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4063b2:	2a00      	cmp	r2, #0
  4063b4:	f040 822b 	bne.w	40680e <_dtoa_r+0xa06>
  4063b8:	4601      	mov	r1, r0
  4063ba:	4648      	mov	r0, r9
  4063bc:	9308      	str	r3, [sp, #32]
  4063be:	f001 f9b9 	bl	407734 <__mcmp>
  4063c2:	4641      	mov	r1, r8
  4063c4:	9006      	str	r0, [sp, #24]
  4063c6:	4620      	mov	r0, r4
  4063c8:	f000 ffdc 	bl	407384 <_Bfree>
  4063cc:	9a06      	ldr	r2, [sp, #24]
  4063ce:	9b08      	ldr	r3, [sp, #32]
  4063d0:	b932      	cbnz	r2, 4063e0 <_dtoa_r+0x5d8>
  4063d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4063d4:	b921      	cbnz	r1, 4063e0 <_dtoa_r+0x5d8>
  4063d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4063d8:	2a00      	cmp	r2, #0
  4063da:	f000 83ef 	beq.w	406bbc <_dtoa_r+0xdb4>
  4063de:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4063e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4063e2:	2900      	cmp	r1, #0
  4063e4:	f2c0 829f 	blt.w	406926 <_dtoa_r+0xb1e>
  4063e8:	d105      	bne.n	4063f6 <_dtoa_r+0x5ee>
  4063ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4063ec:	b919      	cbnz	r1, 4063f6 <_dtoa_r+0x5ee>
  4063ee:	990c      	ldr	r1, [sp, #48]	; 0x30
  4063f0:	2900      	cmp	r1, #0
  4063f2:	f000 8298 	beq.w	406926 <_dtoa_r+0xb1e>
  4063f6:	2a00      	cmp	r2, #0
  4063f8:	f300 8306 	bgt.w	406a08 <_dtoa_r+0xc00>
  4063fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4063fe:	703b      	strb	r3, [r7, #0]
  406400:	f107 0801 	add.w	r8, r7, #1
  406404:	4297      	cmp	r7, r2
  406406:	4645      	mov	r5, r8
  406408:	f000 830c 	beq.w	406a24 <_dtoa_r+0xc1c>
  40640c:	4649      	mov	r1, r9
  40640e:	2300      	movs	r3, #0
  406410:	220a      	movs	r2, #10
  406412:	4620      	mov	r0, r4
  406414:	f000 ffc0 	bl	407398 <__multadd>
  406418:	455e      	cmp	r6, fp
  40641a:	4681      	mov	r9, r0
  40641c:	4631      	mov	r1, r6
  40641e:	f04f 0300 	mov.w	r3, #0
  406422:	f04f 020a 	mov.w	r2, #10
  406426:	4620      	mov	r0, r4
  406428:	f000 81eb 	beq.w	406802 <_dtoa_r+0x9fa>
  40642c:	f000 ffb4 	bl	407398 <__multadd>
  406430:	4659      	mov	r1, fp
  406432:	4606      	mov	r6, r0
  406434:	2300      	movs	r3, #0
  406436:	220a      	movs	r2, #10
  406438:	4620      	mov	r0, r4
  40643a:	f000 ffad 	bl	407398 <__multadd>
  40643e:	4647      	mov	r7, r8
  406440:	4683      	mov	fp, r0
  406442:	e7a3      	b.n	40638c <_dtoa_r+0x584>
  406444:	201c      	movs	r0, #28
  406446:	9b08      	ldr	r3, [sp, #32]
  406448:	4403      	add	r3, r0
  40644a:	9308      	str	r3, [sp, #32]
  40644c:	9b06      	ldr	r3, [sp, #24]
  40644e:	4403      	add	r3, r0
  406450:	4405      	add	r5, r0
  406452:	9306      	str	r3, [sp, #24]
  406454:	e763      	b.n	40631e <_dtoa_r+0x516>
  406456:	4641      	mov	r1, r8
  406458:	4648      	mov	r0, r9
  40645a:	f001 f96b 	bl	407734 <__mcmp>
  40645e:	2800      	cmp	r0, #0
  406460:	f6bf af73 	bge.w	40634a <_dtoa_r+0x542>
  406464:	9f02      	ldr	r7, [sp, #8]
  406466:	4649      	mov	r1, r9
  406468:	2300      	movs	r3, #0
  40646a:	220a      	movs	r2, #10
  40646c:	4620      	mov	r0, r4
  40646e:	3f01      	subs	r7, #1
  406470:	9702      	str	r7, [sp, #8]
  406472:	f000 ff91 	bl	407398 <__multadd>
  406476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406478:	4681      	mov	r9, r0
  40647a:	2b00      	cmp	r3, #0
  40647c:	f040 83b6 	bne.w	406bec <_dtoa_r+0xde4>
  406480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406482:	2b00      	cmp	r3, #0
  406484:	f340 83bf 	ble.w	406c06 <_dtoa_r+0xdfe>
  406488:	930a      	str	r3, [sp, #40]	; 0x28
  40648a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40648e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406490:	465d      	mov	r5, fp
  406492:	e002      	b.n	40649a <_dtoa_r+0x692>
  406494:	f000 ff80 	bl	407398 <__multadd>
  406498:	4681      	mov	r9, r0
  40649a:	4641      	mov	r1, r8
  40649c:	4648      	mov	r0, r9
  40649e:	f7ff fc1f 	bl	405ce0 <quorem>
  4064a2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4064a6:	f805 ab01 	strb.w	sl, [r5], #1
  4064aa:	eba5 030b 	sub.w	r3, r5, fp
  4064ae:	42bb      	cmp	r3, r7
  4064b0:	f04f 020a 	mov.w	r2, #10
  4064b4:	f04f 0300 	mov.w	r3, #0
  4064b8:	4649      	mov	r1, r9
  4064ba:	4620      	mov	r0, r4
  4064bc:	dbea      	blt.n	406494 <_dtoa_r+0x68c>
  4064be:	9b04      	ldr	r3, [sp, #16]
  4064c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4064c2:	2a01      	cmp	r2, #1
  4064c4:	bfac      	ite	ge
  4064c6:	189b      	addge	r3, r3, r2
  4064c8:	3301      	addlt	r3, #1
  4064ca:	461d      	mov	r5, r3
  4064cc:	f04f 0b00 	mov.w	fp, #0
  4064d0:	4649      	mov	r1, r9
  4064d2:	2201      	movs	r2, #1
  4064d4:	4620      	mov	r0, r4
  4064d6:	f001 f8db 	bl	407690 <__lshift>
  4064da:	4641      	mov	r1, r8
  4064dc:	4681      	mov	r9, r0
  4064de:	f001 f929 	bl	407734 <__mcmp>
  4064e2:	2800      	cmp	r0, #0
  4064e4:	f340 823d 	ble.w	406962 <_dtoa_r+0xb5a>
  4064e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4064ec:	9904      	ldr	r1, [sp, #16]
  4064ee:	1e6b      	subs	r3, r5, #1
  4064f0:	e004      	b.n	4064fc <_dtoa_r+0x6f4>
  4064f2:	428b      	cmp	r3, r1
  4064f4:	f000 81ae 	beq.w	406854 <_dtoa_r+0xa4c>
  4064f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4064fc:	2a39      	cmp	r2, #57	; 0x39
  4064fe:	f103 0501 	add.w	r5, r3, #1
  406502:	d0f6      	beq.n	4064f2 <_dtoa_r+0x6ea>
  406504:	3201      	adds	r2, #1
  406506:	701a      	strb	r2, [r3, #0]
  406508:	4641      	mov	r1, r8
  40650a:	4620      	mov	r0, r4
  40650c:	f000 ff3a 	bl	407384 <_Bfree>
  406510:	2e00      	cmp	r6, #0
  406512:	f43f ae3d 	beq.w	406190 <_dtoa_r+0x388>
  406516:	f1bb 0f00 	cmp.w	fp, #0
  40651a:	d005      	beq.n	406528 <_dtoa_r+0x720>
  40651c:	45b3      	cmp	fp, r6
  40651e:	d003      	beq.n	406528 <_dtoa_r+0x720>
  406520:	4659      	mov	r1, fp
  406522:	4620      	mov	r0, r4
  406524:	f000 ff2e 	bl	407384 <_Bfree>
  406528:	4631      	mov	r1, r6
  40652a:	4620      	mov	r0, r4
  40652c:	f000 ff2a 	bl	407384 <_Bfree>
  406530:	e62e      	b.n	406190 <_dtoa_r+0x388>
  406532:	2300      	movs	r3, #0
  406534:	930b      	str	r3, [sp, #44]	; 0x2c
  406536:	9b02      	ldr	r3, [sp, #8]
  406538:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40653a:	4413      	add	r3, r2
  40653c:	930f      	str	r3, [sp, #60]	; 0x3c
  40653e:	3301      	adds	r3, #1
  406540:	2b01      	cmp	r3, #1
  406542:	461f      	mov	r7, r3
  406544:	461e      	mov	r6, r3
  406546:	930a      	str	r3, [sp, #40]	; 0x28
  406548:	bfb8      	it	lt
  40654a:	2701      	movlt	r7, #1
  40654c:	2100      	movs	r1, #0
  40654e:	2f17      	cmp	r7, #23
  406550:	6461      	str	r1, [r4, #68]	; 0x44
  406552:	d90a      	bls.n	40656a <_dtoa_r+0x762>
  406554:	2201      	movs	r2, #1
  406556:	2304      	movs	r3, #4
  406558:	005b      	lsls	r3, r3, #1
  40655a:	f103 0014 	add.w	r0, r3, #20
  40655e:	4287      	cmp	r7, r0
  406560:	4611      	mov	r1, r2
  406562:	f102 0201 	add.w	r2, r2, #1
  406566:	d2f7      	bcs.n	406558 <_dtoa_r+0x750>
  406568:	6461      	str	r1, [r4, #68]	; 0x44
  40656a:	4620      	mov	r0, r4
  40656c:	f000 fee4 	bl	407338 <_Balloc>
  406570:	2e0e      	cmp	r6, #14
  406572:	9004      	str	r0, [sp, #16]
  406574:	6420      	str	r0, [r4, #64]	; 0x40
  406576:	f63f ad41 	bhi.w	405ffc <_dtoa_r+0x1f4>
  40657a:	2d00      	cmp	r5, #0
  40657c:	f43f ad3e 	beq.w	405ffc <_dtoa_r+0x1f4>
  406580:	9902      	ldr	r1, [sp, #8]
  406582:	2900      	cmp	r1, #0
  406584:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406588:	f340 8202 	ble.w	406990 <_dtoa_r+0xb88>
  40658c:	4bb8      	ldr	r3, [pc, #736]	; (406870 <_dtoa_r+0xa68>)
  40658e:	f001 020f 	and.w	r2, r1, #15
  406592:	110d      	asrs	r5, r1, #4
  406594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406598:	06e9      	lsls	r1, r5, #27
  40659a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40659e:	f140 81ae 	bpl.w	4068fe <_dtoa_r+0xaf6>
  4065a2:	4bb4      	ldr	r3, [pc, #720]	; (406874 <_dtoa_r+0xa6c>)
  4065a4:	4650      	mov	r0, sl
  4065a6:	4659      	mov	r1, fp
  4065a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4065ac:	f002 f99a 	bl	4088e4 <__aeabi_ddiv>
  4065b0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4065b4:	f005 050f 	and.w	r5, r5, #15
  4065b8:	f04f 0a03 	mov.w	sl, #3
  4065bc:	b18d      	cbz	r5, 4065e2 <_dtoa_r+0x7da>
  4065be:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406874 <_dtoa_r+0xa6c>
  4065c2:	07ea      	lsls	r2, r5, #31
  4065c4:	d509      	bpl.n	4065da <_dtoa_r+0x7d2>
  4065c6:	4630      	mov	r0, r6
  4065c8:	4639      	mov	r1, r7
  4065ca:	e9d8 2300 	ldrd	r2, r3, [r8]
  4065ce:	f002 f85f 	bl	408690 <__aeabi_dmul>
  4065d2:	f10a 0a01 	add.w	sl, sl, #1
  4065d6:	4606      	mov	r6, r0
  4065d8:	460f      	mov	r7, r1
  4065da:	106d      	asrs	r5, r5, #1
  4065dc:	f108 0808 	add.w	r8, r8, #8
  4065e0:	d1ef      	bne.n	4065c2 <_dtoa_r+0x7ba>
  4065e2:	463b      	mov	r3, r7
  4065e4:	4632      	mov	r2, r6
  4065e6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4065ea:	f002 f97b 	bl	4088e4 <__aeabi_ddiv>
  4065ee:	4607      	mov	r7, r0
  4065f0:	4688      	mov	r8, r1
  4065f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4065f4:	b143      	cbz	r3, 406608 <_dtoa_r+0x800>
  4065f6:	2200      	movs	r2, #0
  4065f8:	4b9f      	ldr	r3, [pc, #636]	; (406878 <_dtoa_r+0xa70>)
  4065fa:	4638      	mov	r0, r7
  4065fc:	4641      	mov	r1, r8
  4065fe:	f002 fab9 	bl	408b74 <__aeabi_dcmplt>
  406602:	2800      	cmp	r0, #0
  406604:	f040 8286 	bne.w	406b14 <_dtoa_r+0xd0c>
  406608:	4650      	mov	r0, sl
  40660a:	f001 ffdb 	bl	4085c4 <__aeabi_i2d>
  40660e:	463a      	mov	r2, r7
  406610:	4643      	mov	r3, r8
  406612:	f002 f83d 	bl	408690 <__aeabi_dmul>
  406616:	4b99      	ldr	r3, [pc, #612]	; (40687c <_dtoa_r+0xa74>)
  406618:	2200      	movs	r2, #0
  40661a:	f001 fe87 	bl	40832c <__adddf3>
  40661e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406620:	4605      	mov	r5, r0
  406622:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406626:	2b00      	cmp	r3, #0
  406628:	f000 813e 	beq.w	4068a8 <_dtoa_r+0xaa0>
  40662c:	9b02      	ldr	r3, [sp, #8]
  40662e:	9315      	str	r3, [sp, #84]	; 0x54
  406630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406632:	9312      	str	r3, [sp, #72]	; 0x48
  406634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406636:	2b00      	cmp	r3, #0
  406638:	f000 81fa 	beq.w	406a30 <_dtoa_r+0xc28>
  40663c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40663e:	4b8c      	ldr	r3, [pc, #560]	; (406870 <_dtoa_r+0xa68>)
  406640:	498f      	ldr	r1, [pc, #572]	; (406880 <_dtoa_r+0xa78>)
  406642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40664a:	2000      	movs	r0, #0
  40664c:	f002 f94a 	bl	4088e4 <__aeabi_ddiv>
  406650:	462a      	mov	r2, r5
  406652:	4633      	mov	r3, r6
  406654:	f001 fe68 	bl	408328 <__aeabi_dsub>
  406658:	4682      	mov	sl, r0
  40665a:	468b      	mov	fp, r1
  40665c:	4638      	mov	r0, r7
  40665e:	4641      	mov	r1, r8
  406660:	f002 fac6 	bl	408bf0 <__aeabi_d2iz>
  406664:	4605      	mov	r5, r0
  406666:	f001 ffad 	bl	4085c4 <__aeabi_i2d>
  40666a:	4602      	mov	r2, r0
  40666c:	460b      	mov	r3, r1
  40666e:	4638      	mov	r0, r7
  406670:	4641      	mov	r1, r8
  406672:	f001 fe59 	bl	408328 <__aeabi_dsub>
  406676:	3530      	adds	r5, #48	; 0x30
  406678:	fa5f f885 	uxtb.w	r8, r5
  40667c:	9d04      	ldr	r5, [sp, #16]
  40667e:	4606      	mov	r6, r0
  406680:	460f      	mov	r7, r1
  406682:	f885 8000 	strb.w	r8, [r5]
  406686:	4602      	mov	r2, r0
  406688:	460b      	mov	r3, r1
  40668a:	4650      	mov	r0, sl
  40668c:	4659      	mov	r1, fp
  40668e:	3501      	adds	r5, #1
  406690:	f002 fa8e 	bl	408bb0 <__aeabi_dcmpgt>
  406694:	2800      	cmp	r0, #0
  406696:	d154      	bne.n	406742 <_dtoa_r+0x93a>
  406698:	4632      	mov	r2, r6
  40669a:	463b      	mov	r3, r7
  40669c:	2000      	movs	r0, #0
  40669e:	4976      	ldr	r1, [pc, #472]	; (406878 <_dtoa_r+0xa70>)
  4066a0:	f001 fe42 	bl	408328 <__aeabi_dsub>
  4066a4:	4602      	mov	r2, r0
  4066a6:	460b      	mov	r3, r1
  4066a8:	4650      	mov	r0, sl
  4066aa:	4659      	mov	r1, fp
  4066ac:	f002 fa80 	bl	408bb0 <__aeabi_dcmpgt>
  4066b0:	2800      	cmp	r0, #0
  4066b2:	f040 8270 	bne.w	406b96 <_dtoa_r+0xd8e>
  4066b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4066b8:	2a01      	cmp	r2, #1
  4066ba:	f000 8111 	beq.w	4068e0 <_dtoa_r+0xad8>
  4066be:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066c0:	9a04      	ldr	r2, [sp, #16]
  4066c2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4066c6:	4413      	add	r3, r2
  4066c8:	4699      	mov	r9, r3
  4066ca:	e00d      	b.n	4066e8 <_dtoa_r+0x8e0>
  4066cc:	2000      	movs	r0, #0
  4066ce:	496a      	ldr	r1, [pc, #424]	; (406878 <_dtoa_r+0xa70>)
  4066d0:	f001 fe2a 	bl	408328 <__aeabi_dsub>
  4066d4:	4652      	mov	r2, sl
  4066d6:	465b      	mov	r3, fp
  4066d8:	f002 fa4c 	bl	408b74 <__aeabi_dcmplt>
  4066dc:	2800      	cmp	r0, #0
  4066de:	f040 8258 	bne.w	406b92 <_dtoa_r+0xd8a>
  4066e2:	454d      	cmp	r5, r9
  4066e4:	f000 80fa 	beq.w	4068dc <_dtoa_r+0xad4>
  4066e8:	4650      	mov	r0, sl
  4066ea:	4659      	mov	r1, fp
  4066ec:	2200      	movs	r2, #0
  4066ee:	4b65      	ldr	r3, [pc, #404]	; (406884 <_dtoa_r+0xa7c>)
  4066f0:	f001 ffce 	bl	408690 <__aeabi_dmul>
  4066f4:	2200      	movs	r2, #0
  4066f6:	4b63      	ldr	r3, [pc, #396]	; (406884 <_dtoa_r+0xa7c>)
  4066f8:	4682      	mov	sl, r0
  4066fa:	468b      	mov	fp, r1
  4066fc:	4630      	mov	r0, r6
  4066fe:	4639      	mov	r1, r7
  406700:	f001 ffc6 	bl	408690 <__aeabi_dmul>
  406704:	460f      	mov	r7, r1
  406706:	4606      	mov	r6, r0
  406708:	f002 fa72 	bl	408bf0 <__aeabi_d2iz>
  40670c:	4680      	mov	r8, r0
  40670e:	f001 ff59 	bl	4085c4 <__aeabi_i2d>
  406712:	4602      	mov	r2, r0
  406714:	460b      	mov	r3, r1
  406716:	4630      	mov	r0, r6
  406718:	4639      	mov	r1, r7
  40671a:	f001 fe05 	bl	408328 <__aeabi_dsub>
  40671e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406722:	fa5f f888 	uxtb.w	r8, r8
  406726:	4652      	mov	r2, sl
  406728:	465b      	mov	r3, fp
  40672a:	f805 8b01 	strb.w	r8, [r5], #1
  40672e:	4606      	mov	r6, r0
  406730:	460f      	mov	r7, r1
  406732:	f002 fa1f 	bl	408b74 <__aeabi_dcmplt>
  406736:	4632      	mov	r2, r6
  406738:	463b      	mov	r3, r7
  40673a:	2800      	cmp	r0, #0
  40673c:	d0c6      	beq.n	4066cc <_dtoa_r+0x8c4>
  40673e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406742:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406744:	9302      	str	r3, [sp, #8]
  406746:	e523      	b.n	406190 <_dtoa_r+0x388>
  406748:	2300      	movs	r3, #0
  40674a:	930b      	str	r3, [sp, #44]	; 0x2c
  40674c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40674e:	2b00      	cmp	r3, #0
  406750:	f340 80dc 	ble.w	40690c <_dtoa_r+0xb04>
  406754:	461f      	mov	r7, r3
  406756:	461e      	mov	r6, r3
  406758:	930f      	str	r3, [sp, #60]	; 0x3c
  40675a:	930a      	str	r3, [sp, #40]	; 0x28
  40675c:	e6f6      	b.n	40654c <_dtoa_r+0x744>
  40675e:	2301      	movs	r3, #1
  406760:	930b      	str	r3, [sp, #44]	; 0x2c
  406762:	e7f3      	b.n	40674c <_dtoa_r+0x944>
  406764:	f1ba 0f00 	cmp.w	sl, #0
  406768:	f47f ada8 	bne.w	4062bc <_dtoa_r+0x4b4>
  40676c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406770:	2b00      	cmp	r3, #0
  406772:	f47f adba 	bne.w	4062ea <_dtoa_r+0x4e2>
  406776:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40677a:	0d3f      	lsrs	r7, r7, #20
  40677c:	053f      	lsls	r7, r7, #20
  40677e:	2f00      	cmp	r7, #0
  406780:	f000 820d 	beq.w	406b9e <_dtoa_r+0xd96>
  406784:	9b08      	ldr	r3, [sp, #32]
  406786:	3301      	adds	r3, #1
  406788:	9308      	str	r3, [sp, #32]
  40678a:	9b06      	ldr	r3, [sp, #24]
  40678c:	3301      	adds	r3, #1
  40678e:	9306      	str	r3, [sp, #24]
  406790:	2301      	movs	r3, #1
  406792:	930c      	str	r3, [sp, #48]	; 0x30
  406794:	e5ab      	b.n	4062ee <_dtoa_r+0x4e6>
  406796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406798:	2b00      	cmp	r3, #0
  40679a:	f73f ac42 	bgt.w	406022 <_dtoa_r+0x21a>
  40679e:	f040 8221 	bne.w	406be4 <_dtoa_r+0xddc>
  4067a2:	2200      	movs	r2, #0
  4067a4:	4b38      	ldr	r3, [pc, #224]	; (406888 <_dtoa_r+0xa80>)
  4067a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4067aa:	f001 ff71 	bl	408690 <__aeabi_dmul>
  4067ae:	4652      	mov	r2, sl
  4067b0:	465b      	mov	r3, fp
  4067b2:	f002 f9f3 	bl	408b9c <__aeabi_dcmpge>
  4067b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4067ba:	4646      	mov	r6, r8
  4067bc:	2800      	cmp	r0, #0
  4067be:	d041      	beq.n	406844 <_dtoa_r+0xa3c>
  4067c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4067c2:	9d04      	ldr	r5, [sp, #16]
  4067c4:	43db      	mvns	r3, r3
  4067c6:	9302      	str	r3, [sp, #8]
  4067c8:	4641      	mov	r1, r8
  4067ca:	4620      	mov	r0, r4
  4067cc:	f000 fdda 	bl	407384 <_Bfree>
  4067d0:	2e00      	cmp	r6, #0
  4067d2:	f43f acdd 	beq.w	406190 <_dtoa_r+0x388>
  4067d6:	e6a7      	b.n	406528 <_dtoa_r+0x720>
  4067d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4067da:	4649      	mov	r1, r9
  4067dc:	4620      	mov	r0, r4
  4067de:	f000 ff07 	bl	4075f0 <__pow5mult>
  4067e2:	4681      	mov	r9, r0
  4067e4:	e558      	b.n	406298 <_dtoa_r+0x490>
  4067e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4067e8:	2a00      	cmp	r2, #0
  4067ea:	f000 8187 	beq.w	406afc <_dtoa_r+0xcf4>
  4067ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4067f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4067f4:	9d08      	ldr	r5, [sp, #32]
  4067f6:	e4f2      	b.n	4061de <_dtoa_r+0x3d6>
  4067f8:	f1ba 0f00 	cmp.w	sl, #0
  4067fc:	f47f ad75 	bne.w	4062ea <_dtoa_r+0x4e2>
  406800:	e7b4      	b.n	40676c <_dtoa_r+0x964>
  406802:	f000 fdc9 	bl	407398 <__multadd>
  406806:	4647      	mov	r7, r8
  406808:	4606      	mov	r6, r0
  40680a:	4683      	mov	fp, r0
  40680c:	e5be      	b.n	40638c <_dtoa_r+0x584>
  40680e:	4601      	mov	r1, r0
  406810:	4620      	mov	r0, r4
  406812:	9306      	str	r3, [sp, #24]
  406814:	f000 fdb6 	bl	407384 <_Bfree>
  406818:	2201      	movs	r2, #1
  40681a:	9b06      	ldr	r3, [sp, #24]
  40681c:	e5e0      	b.n	4063e0 <_dtoa_r+0x5d8>
  40681e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406820:	2b02      	cmp	r3, #2
  406822:	f77f ad96 	ble.w	406352 <_dtoa_r+0x54a>
  406826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406828:	2b00      	cmp	r3, #0
  40682a:	d1c9      	bne.n	4067c0 <_dtoa_r+0x9b8>
  40682c:	4641      	mov	r1, r8
  40682e:	2205      	movs	r2, #5
  406830:	4620      	mov	r0, r4
  406832:	f000 fdb1 	bl	407398 <__multadd>
  406836:	4601      	mov	r1, r0
  406838:	4680      	mov	r8, r0
  40683a:	4648      	mov	r0, r9
  40683c:	f000 ff7a 	bl	407734 <__mcmp>
  406840:	2800      	cmp	r0, #0
  406842:	ddbd      	ble.n	4067c0 <_dtoa_r+0x9b8>
  406844:	9a02      	ldr	r2, [sp, #8]
  406846:	9904      	ldr	r1, [sp, #16]
  406848:	2331      	movs	r3, #49	; 0x31
  40684a:	3201      	adds	r2, #1
  40684c:	9202      	str	r2, [sp, #8]
  40684e:	700b      	strb	r3, [r1, #0]
  406850:	1c4d      	adds	r5, r1, #1
  406852:	e7b9      	b.n	4067c8 <_dtoa_r+0x9c0>
  406854:	9a02      	ldr	r2, [sp, #8]
  406856:	3201      	adds	r2, #1
  406858:	9202      	str	r2, [sp, #8]
  40685a:	9a04      	ldr	r2, [sp, #16]
  40685c:	2331      	movs	r3, #49	; 0x31
  40685e:	7013      	strb	r3, [r2, #0]
  406860:	e652      	b.n	406508 <_dtoa_r+0x700>
  406862:	2301      	movs	r3, #1
  406864:	930b      	str	r3, [sp, #44]	; 0x2c
  406866:	e666      	b.n	406536 <_dtoa_r+0x72e>
  406868:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40686c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40686e:	e48f      	b.n	406190 <_dtoa_r+0x388>
  406870:	00409b88 	.word	0x00409b88
  406874:	00409b60 	.word	0x00409b60
  406878:	3ff00000 	.word	0x3ff00000
  40687c:	401c0000 	.word	0x401c0000
  406880:	3fe00000 	.word	0x3fe00000
  406884:	40240000 	.word	0x40240000
  406888:	40140000 	.word	0x40140000
  40688c:	4650      	mov	r0, sl
  40688e:	f001 fe99 	bl	4085c4 <__aeabi_i2d>
  406892:	463a      	mov	r2, r7
  406894:	4643      	mov	r3, r8
  406896:	f001 fefb 	bl	408690 <__aeabi_dmul>
  40689a:	2200      	movs	r2, #0
  40689c:	4bc1      	ldr	r3, [pc, #772]	; (406ba4 <_dtoa_r+0xd9c>)
  40689e:	f001 fd45 	bl	40832c <__adddf3>
  4068a2:	4605      	mov	r5, r0
  4068a4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4068a8:	4641      	mov	r1, r8
  4068aa:	2200      	movs	r2, #0
  4068ac:	4bbe      	ldr	r3, [pc, #760]	; (406ba8 <_dtoa_r+0xda0>)
  4068ae:	4638      	mov	r0, r7
  4068b0:	f001 fd3a 	bl	408328 <__aeabi_dsub>
  4068b4:	462a      	mov	r2, r5
  4068b6:	4633      	mov	r3, r6
  4068b8:	4682      	mov	sl, r0
  4068ba:	468b      	mov	fp, r1
  4068bc:	f002 f978 	bl	408bb0 <__aeabi_dcmpgt>
  4068c0:	4680      	mov	r8, r0
  4068c2:	2800      	cmp	r0, #0
  4068c4:	f040 8110 	bne.w	406ae8 <_dtoa_r+0xce0>
  4068c8:	462a      	mov	r2, r5
  4068ca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4068ce:	4650      	mov	r0, sl
  4068d0:	4659      	mov	r1, fp
  4068d2:	f002 f94f 	bl	408b74 <__aeabi_dcmplt>
  4068d6:	b118      	cbz	r0, 4068e0 <_dtoa_r+0xad8>
  4068d8:	4646      	mov	r6, r8
  4068da:	e771      	b.n	4067c0 <_dtoa_r+0x9b8>
  4068dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4068e0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4068e4:	f7ff bb8a 	b.w	405ffc <_dtoa_r+0x1f4>
  4068e8:	9804      	ldr	r0, [sp, #16]
  4068ea:	f7ff babb 	b.w	405e64 <_dtoa_r+0x5c>
  4068ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4068f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4068f2:	970c      	str	r7, [sp, #48]	; 0x30
  4068f4:	1afb      	subs	r3, r7, r3
  4068f6:	441a      	add	r2, r3
  4068f8:	920d      	str	r2, [sp, #52]	; 0x34
  4068fa:	2700      	movs	r7, #0
  4068fc:	e469      	b.n	4061d2 <_dtoa_r+0x3ca>
  4068fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406902:	f04f 0a02 	mov.w	sl, #2
  406906:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40690a:	e657      	b.n	4065bc <_dtoa_r+0x7b4>
  40690c:	2100      	movs	r1, #0
  40690e:	2301      	movs	r3, #1
  406910:	6461      	str	r1, [r4, #68]	; 0x44
  406912:	4620      	mov	r0, r4
  406914:	9325      	str	r3, [sp, #148]	; 0x94
  406916:	f000 fd0f 	bl	407338 <_Balloc>
  40691a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40691c:	9004      	str	r0, [sp, #16]
  40691e:	6420      	str	r0, [r4, #64]	; 0x40
  406920:	930a      	str	r3, [sp, #40]	; 0x28
  406922:	930f      	str	r3, [sp, #60]	; 0x3c
  406924:	e629      	b.n	40657a <_dtoa_r+0x772>
  406926:	2a00      	cmp	r2, #0
  406928:	46d0      	mov	r8, sl
  40692a:	f8cd b018 	str.w	fp, [sp, #24]
  40692e:	469a      	mov	sl, r3
  406930:	dd11      	ble.n	406956 <_dtoa_r+0xb4e>
  406932:	4649      	mov	r1, r9
  406934:	2201      	movs	r2, #1
  406936:	4620      	mov	r0, r4
  406938:	f000 feaa 	bl	407690 <__lshift>
  40693c:	4641      	mov	r1, r8
  40693e:	4681      	mov	r9, r0
  406940:	f000 fef8 	bl	407734 <__mcmp>
  406944:	2800      	cmp	r0, #0
  406946:	f340 8146 	ble.w	406bd6 <_dtoa_r+0xdce>
  40694a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40694e:	f000 8106 	beq.w	406b5e <_dtoa_r+0xd56>
  406952:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406956:	46b3      	mov	fp, r6
  406958:	f887 a000 	strb.w	sl, [r7]
  40695c:	1c7d      	adds	r5, r7, #1
  40695e:	9e06      	ldr	r6, [sp, #24]
  406960:	e5d2      	b.n	406508 <_dtoa_r+0x700>
  406962:	d104      	bne.n	40696e <_dtoa_r+0xb66>
  406964:	f01a 0f01 	tst.w	sl, #1
  406968:	d001      	beq.n	40696e <_dtoa_r+0xb66>
  40696a:	e5bd      	b.n	4064e8 <_dtoa_r+0x6e0>
  40696c:	4615      	mov	r5, r2
  40696e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406972:	2b30      	cmp	r3, #48	; 0x30
  406974:	f105 32ff 	add.w	r2, r5, #4294967295
  406978:	d0f8      	beq.n	40696c <_dtoa_r+0xb64>
  40697a:	e5c5      	b.n	406508 <_dtoa_r+0x700>
  40697c:	9904      	ldr	r1, [sp, #16]
  40697e:	2230      	movs	r2, #48	; 0x30
  406980:	700a      	strb	r2, [r1, #0]
  406982:	9a02      	ldr	r2, [sp, #8]
  406984:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406988:	3201      	adds	r2, #1
  40698a:	9202      	str	r2, [sp, #8]
  40698c:	f7ff bbfc 	b.w	406188 <_dtoa_r+0x380>
  406990:	f000 80bb 	beq.w	406b0a <_dtoa_r+0xd02>
  406994:	9b02      	ldr	r3, [sp, #8]
  406996:	425d      	negs	r5, r3
  406998:	4b84      	ldr	r3, [pc, #528]	; (406bac <_dtoa_r+0xda4>)
  40699a:	f005 020f 	and.w	r2, r5, #15
  40699e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4069a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4069aa:	f001 fe71 	bl	408690 <__aeabi_dmul>
  4069ae:	112d      	asrs	r5, r5, #4
  4069b0:	4607      	mov	r7, r0
  4069b2:	4688      	mov	r8, r1
  4069b4:	f000 812c 	beq.w	406c10 <_dtoa_r+0xe08>
  4069b8:	4e7d      	ldr	r6, [pc, #500]	; (406bb0 <_dtoa_r+0xda8>)
  4069ba:	f04f 0a02 	mov.w	sl, #2
  4069be:	07eb      	lsls	r3, r5, #31
  4069c0:	d509      	bpl.n	4069d6 <_dtoa_r+0xbce>
  4069c2:	4638      	mov	r0, r7
  4069c4:	4641      	mov	r1, r8
  4069c6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4069ca:	f001 fe61 	bl	408690 <__aeabi_dmul>
  4069ce:	f10a 0a01 	add.w	sl, sl, #1
  4069d2:	4607      	mov	r7, r0
  4069d4:	4688      	mov	r8, r1
  4069d6:	106d      	asrs	r5, r5, #1
  4069d8:	f106 0608 	add.w	r6, r6, #8
  4069dc:	d1ef      	bne.n	4069be <_dtoa_r+0xbb6>
  4069de:	e608      	b.n	4065f2 <_dtoa_r+0x7ea>
  4069e0:	6871      	ldr	r1, [r6, #4]
  4069e2:	4620      	mov	r0, r4
  4069e4:	f000 fca8 	bl	407338 <_Balloc>
  4069e8:	6933      	ldr	r3, [r6, #16]
  4069ea:	3302      	adds	r3, #2
  4069ec:	009a      	lsls	r2, r3, #2
  4069ee:	4605      	mov	r5, r0
  4069f0:	f106 010c 	add.w	r1, r6, #12
  4069f4:	300c      	adds	r0, #12
  4069f6:	f7fd fb0f 	bl	404018 <memcpy>
  4069fa:	4629      	mov	r1, r5
  4069fc:	2201      	movs	r2, #1
  4069fe:	4620      	mov	r0, r4
  406a00:	f000 fe46 	bl	407690 <__lshift>
  406a04:	9006      	str	r0, [sp, #24]
  406a06:	e4b5      	b.n	406374 <_dtoa_r+0x56c>
  406a08:	2b39      	cmp	r3, #57	; 0x39
  406a0a:	f8cd b018 	str.w	fp, [sp, #24]
  406a0e:	46d0      	mov	r8, sl
  406a10:	f000 80a5 	beq.w	406b5e <_dtoa_r+0xd56>
  406a14:	f103 0a01 	add.w	sl, r3, #1
  406a18:	46b3      	mov	fp, r6
  406a1a:	f887 a000 	strb.w	sl, [r7]
  406a1e:	1c7d      	adds	r5, r7, #1
  406a20:	9e06      	ldr	r6, [sp, #24]
  406a22:	e571      	b.n	406508 <_dtoa_r+0x700>
  406a24:	465a      	mov	r2, fp
  406a26:	46d0      	mov	r8, sl
  406a28:	46b3      	mov	fp, r6
  406a2a:	469a      	mov	sl, r3
  406a2c:	4616      	mov	r6, r2
  406a2e:	e54f      	b.n	4064d0 <_dtoa_r+0x6c8>
  406a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a32:	495e      	ldr	r1, [pc, #376]	; (406bac <_dtoa_r+0xda4>)
  406a34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406a38:	462a      	mov	r2, r5
  406a3a:	4633      	mov	r3, r6
  406a3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406a40:	f001 fe26 	bl	408690 <__aeabi_dmul>
  406a44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406a48:	4638      	mov	r0, r7
  406a4a:	4641      	mov	r1, r8
  406a4c:	f002 f8d0 	bl	408bf0 <__aeabi_d2iz>
  406a50:	4605      	mov	r5, r0
  406a52:	f001 fdb7 	bl	4085c4 <__aeabi_i2d>
  406a56:	460b      	mov	r3, r1
  406a58:	4602      	mov	r2, r0
  406a5a:	4641      	mov	r1, r8
  406a5c:	4638      	mov	r0, r7
  406a5e:	f001 fc63 	bl	408328 <__aeabi_dsub>
  406a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a64:	460f      	mov	r7, r1
  406a66:	9904      	ldr	r1, [sp, #16]
  406a68:	3530      	adds	r5, #48	; 0x30
  406a6a:	2b01      	cmp	r3, #1
  406a6c:	700d      	strb	r5, [r1, #0]
  406a6e:	4606      	mov	r6, r0
  406a70:	f101 0501 	add.w	r5, r1, #1
  406a74:	d026      	beq.n	406ac4 <_dtoa_r+0xcbc>
  406a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406a78:	9a04      	ldr	r2, [sp, #16]
  406a7a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406bb8 <_dtoa_r+0xdb0>
  406a7e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406a82:	4413      	add	r3, r2
  406a84:	f04f 0a00 	mov.w	sl, #0
  406a88:	4699      	mov	r9, r3
  406a8a:	4652      	mov	r2, sl
  406a8c:	465b      	mov	r3, fp
  406a8e:	4630      	mov	r0, r6
  406a90:	4639      	mov	r1, r7
  406a92:	f001 fdfd 	bl	408690 <__aeabi_dmul>
  406a96:	460f      	mov	r7, r1
  406a98:	4606      	mov	r6, r0
  406a9a:	f002 f8a9 	bl	408bf0 <__aeabi_d2iz>
  406a9e:	4680      	mov	r8, r0
  406aa0:	f001 fd90 	bl	4085c4 <__aeabi_i2d>
  406aa4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406aa8:	4602      	mov	r2, r0
  406aaa:	460b      	mov	r3, r1
  406aac:	4630      	mov	r0, r6
  406aae:	4639      	mov	r1, r7
  406ab0:	f001 fc3a 	bl	408328 <__aeabi_dsub>
  406ab4:	f805 8b01 	strb.w	r8, [r5], #1
  406ab8:	454d      	cmp	r5, r9
  406aba:	4606      	mov	r6, r0
  406abc:	460f      	mov	r7, r1
  406abe:	d1e4      	bne.n	406a8a <_dtoa_r+0xc82>
  406ac0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406ac4:	4b3b      	ldr	r3, [pc, #236]	; (406bb4 <_dtoa_r+0xdac>)
  406ac6:	2200      	movs	r2, #0
  406ac8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406acc:	f001 fc2e 	bl	40832c <__adddf3>
  406ad0:	4632      	mov	r2, r6
  406ad2:	463b      	mov	r3, r7
  406ad4:	f002 f84e 	bl	408b74 <__aeabi_dcmplt>
  406ad8:	2800      	cmp	r0, #0
  406ada:	d046      	beq.n	406b6a <_dtoa_r+0xd62>
  406adc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406ade:	9302      	str	r3, [sp, #8]
  406ae0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406ae4:	f7ff bb43 	b.w	40616e <_dtoa_r+0x366>
  406ae8:	f04f 0800 	mov.w	r8, #0
  406aec:	4646      	mov	r6, r8
  406aee:	e6a9      	b.n	406844 <_dtoa_r+0xa3c>
  406af0:	9b08      	ldr	r3, [sp, #32]
  406af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406af4:	1a9d      	subs	r5, r3, r2
  406af6:	2300      	movs	r3, #0
  406af8:	f7ff bb71 	b.w	4061de <_dtoa_r+0x3d6>
  406afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406afe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406b00:	9d08      	ldr	r5, [sp, #32]
  406b02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406b06:	f7ff bb6a 	b.w	4061de <_dtoa_r+0x3d6>
  406b0a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406b0e:	f04f 0a02 	mov.w	sl, #2
  406b12:	e56e      	b.n	4065f2 <_dtoa_r+0x7ea>
  406b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b16:	2b00      	cmp	r3, #0
  406b18:	f43f aeb8 	beq.w	40688c <_dtoa_r+0xa84>
  406b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b1e:	2b00      	cmp	r3, #0
  406b20:	f77f aede 	ble.w	4068e0 <_dtoa_r+0xad8>
  406b24:	2200      	movs	r2, #0
  406b26:	4b24      	ldr	r3, [pc, #144]	; (406bb8 <_dtoa_r+0xdb0>)
  406b28:	4638      	mov	r0, r7
  406b2a:	4641      	mov	r1, r8
  406b2c:	f001 fdb0 	bl	408690 <__aeabi_dmul>
  406b30:	4607      	mov	r7, r0
  406b32:	4688      	mov	r8, r1
  406b34:	f10a 0001 	add.w	r0, sl, #1
  406b38:	f001 fd44 	bl	4085c4 <__aeabi_i2d>
  406b3c:	463a      	mov	r2, r7
  406b3e:	4643      	mov	r3, r8
  406b40:	f001 fda6 	bl	408690 <__aeabi_dmul>
  406b44:	2200      	movs	r2, #0
  406b46:	4b17      	ldr	r3, [pc, #92]	; (406ba4 <_dtoa_r+0xd9c>)
  406b48:	f001 fbf0 	bl	40832c <__adddf3>
  406b4c:	9a02      	ldr	r2, [sp, #8]
  406b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406b50:	9312      	str	r3, [sp, #72]	; 0x48
  406b52:	3a01      	subs	r2, #1
  406b54:	4605      	mov	r5, r0
  406b56:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406b5a:	9215      	str	r2, [sp, #84]	; 0x54
  406b5c:	e56a      	b.n	406634 <_dtoa_r+0x82c>
  406b5e:	2239      	movs	r2, #57	; 0x39
  406b60:	46b3      	mov	fp, r6
  406b62:	703a      	strb	r2, [r7, #0]
  406b64:	9e06      	ldr	r6, [sp, #24]
  406b66:	1c7d      	adds	r5, r7, #1
  406b68:	e4c0      	b.n	4064ec <_dtoa_r+0x6e4>
  406b6a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406b6e:	2000      	movs	r0, #0
  406b70:	4910      	ldr	r1, [pc, #64]	; (406bb4 <_dtoa_r+0xdac>)
  406b72:	f001 fbd9 	bl	408328 <__aeabi_dsub>
  406b76:	4632      	mov	r2, r6
  406b78:	463b      	mov	r3, r7
  406b7a:	f002 f819 	bl	408bb0 <__aeabi_dcmpgt>
  406b7e:	b908      	cbnz	r0, 406b84 <_dtoa_r+0xd7c>
  406b80:	e6ae      	b.n	4068e0 <_dtoa_r+0xad8>
  406b82:	4615      	mov	r5, r2
  406b84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406b88:	2b30      	cmp	r3, #48	; 0x30
  406b8a:	f105 32ff 	add.w	r2, r5, #4294967295
  406b8e:	d0f8      	beq.n	406b82 <_dtoa_r+0xd7a>
  406b90:	e5d7      	b.n	406742 <_dtoa_r+0x93a>
  406b92:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406b98:	9302      	str	r3, [sp, #8]
  406b9a:	f7ff bae8 	b.w	40616e <_dtoa_r+0x366>
  406b9e:	970c      	str	r7, [sp, #48]	; 0x30
  406ba0:	f7ff bba5 	b.w	4062ee <_dtoa_r+0x4e6>
  406ba4:	401c0000 	.word	0x401c0000
  406ba8:	40140000 	.word	0x40140000
  406bac:	00409b88 	.word	0x00409b88
  406bb0:	00409b60 	.word	0x00409b60
  406bb4:	3fe00000 	.word	0x3fe00000
  406bb8:	40240000 	.word	0x40240000
  406bbc:	2b39      	cmp	r3, #57	; 0x39
  406bbe:	f8cd b018 	str.w	fp, [sp, #24]
  406bc2:	46d0      	mov	r8, sl
  406bc4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406bc8:	469a      	mov	sl, r3
  406bca:	d0c8      	beq.n	406b5e <_dtoa_r+0xd56>
  406bcc:	f1bb 0f00 	cmp.w	fp, #0
  406bd0:	f73f aebf 	bgt.w	406952 <_dtoa_r+0xb4a>
  406bd4:	e6bf      	b.n	406956 <_dtoa_r+0xb4e>
  406bd6:	f47f aebe 	bne.w	406956 <_dtoa_r+0xb4e>
  406bda:	f01a 0f01 	tst.w	sl, #1
  406bde:	f43f aeba 	beq.w	406956 <_dtoa_r+0xb4e>
  406be2:	e6b2      	b.n	40694a <_dtoa_r+0xb42>
  406be4:	f04f 0800 	mov.w	r8, #0
  406be8:	4646      	mov	r6, r8
  406bea:	e5e9      	b.n	4067c0 <_dtoa_r+0x9b8>
  406bec:	4631      	mov	r1, r6
  406bee:	2300      	movs	r3, #0
  406bf0:	220a      	movs	r2, #10
  406bf2:	4620      	mov	r0, r4
  406bf4:	f000 fbd0 	bl	407398 <__multadd>
  406bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406bfa:	2b00      	cmp	r3, #0
  406bfc:	4606      	mov	r6, r0
  406bfe:	dd0a      	ble.n	406c16 <_dtoa_r+0xe0e>
  406c00:	930a      	str	r3, [sp, #40]	; 0x28
  406c02:	f7ff bbaa 	b.w	40635a <_dtoa_r+0x552>
  406c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c08:	2b02      	cmp	r3, #2
  406c0a:	dc23      	bgt.n	406c54 <_dtoa_r+0xe4c>
  406c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c0e:	e43b      	b.n	406488 <_dtoa_r+0x680>
  406c10:	f04f 0a02 	mov.w	sl, #2
  406c14:	e4ed      	b.n	4065f2 <_dtoa_r+0x7ea>
  406c16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c18:	2b02      	cmp	r3, #2
  406c1a:	dc1b      	bgt.n	406c54 <_dtoa_r+0xe4c>
  406c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c1e:	e7ef      	b.n	406c00 <_dtoa_r+0xdf8>
  406c20:	2500      	movs	r5, #0
  406c22:	6465      	str	r5, [r4, #68]	; 0x44
  406c24:	4629      	mov	r1, r5
  406c26:	4620      	mov	r0, r4
  406c28:	f000 fb86 	bl	407338 <_Balloc>
  406c2c:	f04f 33ff 	mov.w	r3, #4294967295
  406c30:	930a      	str	r3, [sp, #40]	; 0x28
  406c32:	930f      	str	r3, [sp, #60]	; 0x3c
  406c34:	2301      	movs	r3, #1
  406c36:	9004      	str	r0, [sp, #16]
  406c38:	9525      	str	r5, [sp, #148]	; 0x94
  406c3a:	6420      	str	r0, [r4, #64]	; 0x40
  406c3c:	930b      	str	r3, [sp, #44]	; 0x2c
  406c3e:	f7ff b9dd 	b.w	405ffc <_dtoa_r+0x1f4>
  406c42:	2501      	movs	r5, #1
  406c44:	f7ff b9a5 	b.w	405f92 <_dtoa_r+0x18a>
  406c48:	f43f ab69 	beq.w	40631e <_dtoa_r+0x516>
  406c4c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406c50:	f7ff bbf9 	b.w	406446 <_dtoa_r+0x63e>
  406c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406c56:	930a      	str	r3, [sp, #40]	; 0x28
  406c58:	e5e5      	b.n	406826 <_dtoa_r+0xa1e>
  406c5a:	bf00      	nop

00406c5c <__libc_fini_array>:
  406c5c:	b538      	push	{r3, r4, r5, lr}
  406c5e:	4c0a      	ldr	r4, [pc, #40]	; (406c88 <__libc_fini_array+0x2c>)
  406c60:	4d0a      	ldr	r5, [pc, #40]	; (406c8c <__libc_fini_array+0x30>)
  406c62:	1b64      	subs	r4, r4, r5
  406c64:	10a4      	asrs	r4, r4, #2
  406c66:	d00a      	beq.n	406c7e <__libc_fini_array+0x22>
  406c68:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406c6c:	3b01      	subs	r3, #1
  406c6e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406c72:	3c01      	subs	r4, #1
  406c74:	f855 3904 	ldr.w	r3, [r5], #-4
  406c78:	4798      	blx	r3
  406c7a:	2c00      	cmp	r4, #0
  406c7c:	d1f9      	bne.n	406c72 <__libc_fini_array+0x16>
  406c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406c82:	f003 b87f 	b.w	409d84 <_fini>
  406c86:	bf00      	nop
  406c88:	00409d94 	.word	0x00409d94
  406c8c:	00409d90 	.word	0x00409d90

00406c90 <_localeconv_r>:
  406c90:	4a04      	ldr	r2, [pc, #16]	; (406ca4 <_localeconv_r+0x14>)
  406c92:	4b05      	ldr	r3, [pc, #20]	; (406ca8 <_localeconv_r+0x18>)
  406c94:	6812      	ldr	r2, [r2, #0]
  406c96:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406c98:	2800      	cmp	r0, #0
  406c9a:	bf08      	it	eq
  406c9c:	4618      	moveq	r0, r3
  406c9e:	30f0      	adds	r0, #240	; 0xf0
  406ca0:	4770      	bx	lr
  406ca2:	bf00      	nop
  406ca4:	20000010 	.word	0x20000010
  406ca8:	20000854 	.word	0x20000854

00406cac <__retarget_lock_acquire_recursive>:
  406cac:	4770      	bx	lr
  406cae:	bf00      	nop

00406cb0 <__retarget_lock_release_recursive>:
  406cb0:	4770      	bx	lr
  406cb2:	bf00      	nop

00406cb4 <_malloc_r>:
  406cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406cb8:	f101 060b 	add.w	r6, r1, #11
  406cbc:	2e16      	cmp	r6, #22
  406cbe:	b083      	sub	sp, #12
  406cc0:	4605      	mov	r5, r0
  406cc2:	f240 809e 	bls.w	406e02 <_malloc_r+0x14e>
  406cc6:	f036 0607 	bics.w	r6, r6, #7
  406cca:	f100 80bd 	bmi.w	406e48 <_malloc_r+0x194>
  406cce:	42b1      	cmp	r1, r6
  406cd0:	f200 80ba 	bhi.w	406e48 <_malloc_r+0x194>
  406cd4:	f000 fb24 	bl	407320 <__malloc_lock>
  406cd8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406cdc:	f0c0 8293 	bcc.w	407206 <_malloc_r+0x552>
  406ce0:	0a73      	lsrs	r3, r6, #9
  406ce2:	f000 80b8 	beq.w	406e56 <_malloc_r+0x1a2>
  406ce6:	2b04      	cmp	r3, #4
  406ce8:	f200 8179 	bhi.w	406fde <_malloc_r+0x32a>
  406cec:	09b3      	lsrs	r3, r6, #6
  406cee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406cf2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406cf6:	00c3      	lsls	r3, r0, #3
  406cf8:	4fbf      	ldr	r7, [pc, #764]	; (406ff8 <_malloc_r+0x344>)
  406cfa:	443b      	add	r3, r7
  406cfc:	f1a3 0108 	sub.w	r1, r3, #8
  406d00:	685c      	ldr	r4, [r3, #4]
  406d02:	42a1      	cmp	r1, r4
  406d04:	d106      	bne.n	406d14 <_malloc_r+0x60>
  406d06:	e00c      	b.n	406d22 <_malloc_r+0x6e>
  406d08:	2a00      	cmp	r2, #0
  406d0a:	f280 80aa 	bge.w	406e62 <_malloc_r+0x1ae>
  406d0e:	68e4      	ldr	r4, [r4, #12]
  406d10:	42a1      	cmp	r1, r4
  406d12:	d006      	beq.n	406d22 <_malloc_r+0x6e>
  406d14:	6863      	ldr	r3, [r4, #4]
  406d16:	f023 0303 	bic.w	r3, r3, #3
  406d1a:	1b9a      	subs	r2, r3, r6
  406d1c:	2a0f      	cmp	r2, #15
  406d1e:	ddf3      	ble.n	406d08 <_malloc_r+0x54>
  406d20:	4670      	mov	r0, lr
  406d22:	693c      	ldr	r4, [r7, #16]
  406d24:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40700c <_malloc_r+0x358>
  406d28:	4574      	cmp	r4, lr
  406d2a:	f000 81ab 	beq.w	407084 <_malloc_r+0x3d0>
  406d2e:	6863      	ldr	r3, [r4, #4]
  406d30:	f023 0303 	bic.w	r3, r3, #3
  406d34:	1b9a      	subs	r2, r3, r6
  406d36:	2a0f      	cmp	r2, #15
  406d38:	f300 8190 	bgt.w	40705c <_malloc_r+0x3a8>
  406d3c:	2a00      	cmp	r2, #0
  406d3e:	f8c7 e014 	str.w	lr, [r7, #20]
  406d42:	f8c7 e010 	str.w	lr, [r7, #16]
  406d46:	f280 809d 	bge.w	406e84 <_malloc_r+0x1d0>
  406d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406d4e:	f080 8161 	bcs.w	407014 <_malloc_r+0x360>
  406d52:	08db      	lsrs	r3, r3, #3
  406d54:	f103 0c01 	add.w	ip, r3, #1
  406d58:	1099      	asrs	r1, r3, #2
  406d5a:	687a      	ldr	r2, [r7, #4]
  406d5c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406d60:	f8c4 8008 	str.w	r8, [r4, #8]
  406d64:	2301      	movs	r3, #1
  406d66:	408b      	lsls	r3, r1
  406d68:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406d6c:	4313      	orrs	r3, r2
  406d6e:	3908      	subs	r1, #8
  406d70:	60e1      	str	r1, [r4, #12]
  406d72:	607b      	str	r3, [r7, #4]
  406d74:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406d78:	f8c8 400c 	str.w	r4, [r8, #12]
  406d7c:	1082      	asrs	r2, r0, #2
  406d7e:	2401      	movs	r4, #1
  406d80:	4094      	lsls	r4, r2
  406d82:	429c      	cmp	r4, r3
  406d84:	f200 808b 	bhi.w	406e9e <_malloc_r+0x1ea>
  406d88:	421c      	tst	r4, r3
  406d8a:	d106      	bne.n	406d9a <_malloc_r+0xe6>
  406d8c:	f020 0003 	bic.w	r0, r0, #3
  406d90:	0064      	lsls	r4, r4, #1
  406d92:	421c      	tst	r4, r3
  406d94:	f100 0004 	add.w	r0, r0, #4
  406d98:	d0fa      	beq.n	406d90 <_malloc_r+0xdc>
  406d9a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406d9e:	46cc      	mov	ip, r9
  406da0:	4680      	mov	r8, r0
  406da2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406da6:	459c      	cmp	ip, r3
  406da8:	d107      	bne.n	406dba <_malloc_r+0x106>
  406daa:	e16d      	b.n	407088 <_malloc_r+0x3d4>
  406dac:	2a00      	cmp	r2, #0
  406dae:	f280 817b 	bge.w	4070a8 <_malloc_r+0x3f4>
  406db2:	68db      	ldr	r3, [r3, #12]
  406db4:	459c      	cmp	ip, r3
  406db6:	f000 8167 	beq.w	407088 <_malloc_r+0x3d4>
  406dba:	6859      	ldr	r1, [r3, #4]
  406dbc:	f021 0103 	bic.w	r1, r1, #3
  406dc0:	1b8a      	subs	r2, r1, r6
  406dc2:	2a0f      	cmp	r2, #15
  406dc4:	ddf2      	ble.n	406dac <_malloc_r+0xf8>
  406dc6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406dca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406dce:	9300      	str	r3, [sp, #0]
  406dd0:	199c      	adds	r4, r3, r6
  406dd2:	4628      	mov	r0, r5
  406dd4:	f046 0601 	orr.w	r6, r6, #1
  406dd8:	f042 0501 	orr.w	r5, r2, #1
  406ddc:	605e      	str	r6, [r3, #4]
  406dde:	f8c8 c00c 	str.w	ip, [r8, #12]
  406de2:	f8cc 8008 	str.w	r8, [ip, #8]
  406de6:	617c      	str	r4, [r7, #20]
  406de8:	613c      	str	r4, [r7, #16]
  406dea:	f8c4 e00c 	str.w	lr, [r4, #12]
  406dee:	f8c4 e008 	str.w	lr, [r4, #8]
  406df2:	6065      	str	r5, [r4, #4]
  406df4:	505a      	str	r2, [r3, r1]
  406df6:	f000 fa99 	bl	40732c <__malloc_unlock>
  406dfa:	9b00      	ldr	r3, [sp, #0]
  406dfc:	f103 0408 	add.w	r4, r3, #8
  406e00:	e01e      	b.n	406e40 <_malloc_r+0x18c>
  406e02:	2910      	cmp	r1, #16
  406e04:	d820      	bhi.n	406e48 <_malloc_r+0x194>
  406e06:	f000 fa8b 	bl	407320 <__malloc_lock>
  406e0a:	2610      	movs	r6, #16
  406e0c:	2318      	movs	r3, #24
  406e0e:	2002      	movs	r0, #2
  406e10:	4f79      	ldr	r7, [pc, #484]	; (406ff8 <_malloc_r+0x344>)
  406e12:	443b      	add	r3, r7
  406e14:	f1a3 0208 	sub.w	r2, r3, #8
  406e18:	685c      	ldr	r4, [r3, #4]
  406e1a:	4294      	cmp	r4, r2
  406e1c:	f000 813d 	beq.w	40709a <_malloc_r+0x3e6>
  406e20:	6863      	ldr	r3, [r4, #4]
  406e22:	68e1      	ldr	r1, [r4, #12]
  406e24:	68a6      	ldr	r6, [r4, #8]
  406e26:	f023 0303 	bic.w	r3, r3, #3
  406e2a:	4423      	add	r3, r4
  406e2c:	4628      	mov	r0, r5
  406e2e:	685a      	ldr	r2, [r3, #4]
  406e30:	60f1      	str	r1, [r6, #12]
  406e32:	f042 0201 	orr.w	r2, r2, #1
  406e36:	608e      	str	r6, [r1, #8]
  406e38:	605a      	str	r2, [r3, #4]
  406e3a:	f000 fa77 	bl	40732c <__malloc_unlock>
  406e3e:	3408      	adds	r4, #8
  406e40:	4620      	mov	r0, r4
  406e42:	b003      	add	sp, #12
  406e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e48:	2400      	movs	r4, #0
  406e4a:	230c      	movs	r3, #12
  406e4c:	4620      	mov	r0, r4
  406e4e:	602b      	str	r3, [r5, #0]
  406e50:	b003      	add	sp, #12
  406e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e56:	2040      	movs	r0, #64	; 0x40
  406e58:	f44f 7300 	mov.w	r3, #512	; 0x200
  406e5c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406e60:	e74a      	b.n	406cf8 <_malloc_r+0x44>
  406e62:	4423      	add	r3, r4
  406e64:	68e1      	ldr	r1, [r4, #12]
  406e66:	685a      	ldr	r2, [r3, #4]
  406e68:	68a6      	ldr	r6, [r4, #8]
  406e6a:	f042 0201 	orr.w	r2, r2, #1
  406e6e:	60f1      	str	r1, [r6, #12]
  406e70:	4628      	mov	r0, r5
  406e72:	608e      	str	r6, [r1, #8]
  406e74:	605a      	str	r2, [r3, #4]
  406e76:	f000 fa59 	bl	40732c <__malloc_unlock>
  406e7a:	3408      	adds	r4, #8
  406e7c:	4620      	mov	r0, r4
  406e7e:	b003      	add	sp, #12
  406e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e84:	4423      	add	r3, r4
  406e86:	4628      	mov	r0, r5
  406e88:	685a      	ldr	r2, [r3, #4]
  406e8a:	f042 0201 	orr.w	r2, r2, #1
  406e8e:	605a      	str	r2, [r3, #4]
  406e90:	f000 fa4c 	bl	40732c <__malloc_unlock>
  406e94:	3408      	adds	r4, #8
  406e96:	4620      	mov	r0, r4
  406e98:	b003      	add	sp, #12
  406e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e9e:	68bc      	ldr	r4, [r7, #8]
  406ea0:	6863      	ldr	r3, [r4, #4]
  406ea2:	f023 0803 	bic.w	r8, r3, #3
  406ea6:	45b0      	cmp	r8, r6
  406ea8:	d304      	bcc.n	406eb4 <_malloc_r+0x200>
  406eaa:	eba8 0306 	sub.w	r3, r8, r6
  406eae:	2b0f      	cmp	r3, #15
  406eb0:	f300 8085 	bgt.w	406fbe <_malloc_r+0x30a>
  406eb4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407010 <_malloc_r+0x35c>
  406eb8:	4b50      	ldr	r3, [pc, #320]	; (406ffc <_malloc_r+0x348>)
  406eba:	f8d9 2000 	ldr.w	r2, [r9]
  406ebe:	681b      	ldr	r3, [r3, #0]
  406ec0:	3201      	adds	r2, #1
  406ec2:	4433      	add	r3, r6
  406ec4:	eb04 0a08 	add.w	sl, r4, r8
  406ec8:	f000 8155 	beq.w	407176 <_malloc_r+0x4c2>
  406ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406ed0:	330f      	adds	r3, #15
  406ed2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406ed6:	f02b 0b0f 	bic.w	fp, fp, #15
  406eda:	4659      	mov	r1, fp
  406edc:	4628      	mov	r0, r5
  406ede:	f000 fd25 	bl	40792c <_sbrk_r>
  406ee2:	1c41      	adds	r1, r0, #1
  406ee4:	4602      	mov	r2, r0
  406ee6:	f000 80fc 	beq.w	4070e2 <_malloc_r+0x42e>
  406eea:	4582      	cmp	sl, r0
  406eec:	f200 80f7 	bhi.w	4070de <_malloc_r+0x42a>
  406ef0:	4b43      	ldr	r3, [pc, #268]	; (407000 <_malloc_r+0x34c>)
  406ef2:	6819      	ldr	r1, [r3, #0]
  406ef4:	4459      	add	r1, fp
  406ef6:	6019      	str	r1, [r3, #0]
  406ef8:	f000 814d 	beq.w	407196 <_malloc_r+0x4e2>
  406efc:	f8d9 0000 	ldr.w	r0, [r9]
  406f00:	3001      	adds	r0, #1
  406f02:	bf1b      	ittet	ne
  406f04:	eba2 0a0a 	subne.w	sl, r2, sl
  406f08:	4451      	addne	r1, sl
  406f0a:	f8c9 2000 	streq.w	r2, [r9]
  406f0e:	6019      	strne	r1, [r3, #0]
  406f10:	f012 0107 	ands.w	r1, r2, #7
  406f14:	f000 8115 	beq.w	407142 <_malloc_r+0x48e>
  406f18:	f1c1 0008 	rsb	r0, r1, #8
  406f1c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406f20:	4402      	add	r2, r0
  406f22:	3108      	adds	r1, #8
  406f24:	eb02 090b 	add.w	r9, r2, fp
  406f28:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406f2c:	eba1 0909 	sub.w	r9, r1, r9
  406f30:	4649      	mov	r1, r9
  406f32:	4628      	mov	r0, r5
  406f34:	9301      	str	r3, [sp, #4]
  406f36:	9200      	str	r2, [sp, #0]
  406f38:	f000 fcf8 	bl	40792c <_sbrk_r>
  406f3c:	1c43      	adds	r3, r0, #1
  406f3e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406f42:	f000 8143 	beq.w	4071cc <_malloc_r+0x518>
  406f46:	1a80      	subs	r0, r0, r2
  406f48:	4448      	add	r0, r9
  406f4a:	f040 0001 	orr.w	r0, r0, #1
  406f4e:	6819      	ldr	r1, [r3, #0]
  406f50:	60ba      	str	r2, [r7, #8]
  406f52:	4449      	add	r1, r9
  406f54:	42bc      	cmp	r4, r7
  406f56:	6050      	str	r0, [r2, #4]
  406f58:	6019      	str	r1, [r3, #0]
  406f5a:	d017      	beq.n	406f8c <_malloc_r+0x2d8>
  406f5c:	f1b8 0f0f 	cmp.w	r8, #15
  406f60:	f240 80fb 	bls.w	40715a <_malloc_r+0x4a6>
  406f64:	6860      	ldr	r0, [r4, #4]
  406f66:	f1a8 020c 	sub.w	r2, r8, #12
  406f6a:	f022 0207 	bic.w	r2, r2, #7
  406f6e:	eb04 0e02 	add.w	lr, r4, r2
  406f72:	f000 0001 	and.w	r0, r0, #1
  406f76:	f04f 0c05 	mov.w	ip, #5
  406f7a:	4310      	orrs	r0, r2
  406f7c:	2a0f      	cmp	r2, #15
  406f7e:	6060      	str	r0, [r4, #4]
  406f80:	f8ce c004 	str.w	ip, [lr, #4]
  406f84:	f8ce c008 	str.w	ip, [lr, #8]
  406f88:	f200 8117 	bhi.w	4071ba <_malloc_r+0x506>
  406f8c:	4b1d      	ldr	r3, [pc, #116]	; (407004 <_malloc_r+0x350>)
  406f8e:	68bc      	ldr	r4, [r7, #8]
  406f90:	681a      	ldr	r2, [r3, #0]
  406f92:	4291      	cmp	r1, r2
  406f94:	bf88      	it	hi
  406f96:	6019      	strhi	r1, [r3, #0]
  406f98:	4b1b      	ldr	r3, [pc, #108]	; (407008 <_malloc_r+0x354>)
  406f9a:	681a      	ldr	r2, [r3, #0]
  406f9c:	4291      	cmp	r1, r2
  406f9e:	6862      	ldr	r2, [r4, #4]
  406fa0:	bf88      	it	hi
  406fa2:	6019      	strhi	r1, [r3, #0]
  406fa4:	f022 0203 	bic.w	r2, r2, #3
  406fa8:	4296      	cmp	r6, r2
  406faa:	eba2 0306 	sub.w	r3, r2, r6
  406fae:	d801      	bhi.n	406fb4 <_malloc_r+0x300>
  406fb0:	2b0f      	cmp	r3, #15
  406fb2:	dc04      	bgt.n	406fbe <_malloc_r+0x30a>
  406fb4:	4628      	mov	r0, r5
  406fb6:	f000 f9b9 	bl	40732c <__malloc_unlock>
  406fba:	2400      	movs	r4, #0
  406fbc:	e740      	b.n	406e40 <_malloc_r+0x18c>
  406fbe:	19a2      	adds	r2, r4, r6
  406fc0:	f043 0301 	orr.w	r3, r3, #1
  406fc4:	f046 0601 	orr.w	r6, r6, #1
  406fc8:	6066      	str	r6, [r4, #4]
  406fca:	4628      	mov	r0, r5
  406fcc:	60ba      	str	r2, [r7, #8]
  406fce:	6053      	str	r3, [r2, #4]
  406fd0:	f000 f9ac 	bl	40732c <__malloc_unlock>
  406fd4:	3408      	adds	r4, #8
  406fd6:	4620      	mov	r0, r4
  406fd8:	b003      	add	sp, #12
  406fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fde:	2b14      	cmp	r3, #20
  406fe0:	d971      	bls.n	4070c6 <_malloc_r+0x412>
  406fe2:	2b54      	cmp	r3, #84	; 0x54
  406fe4:	f200 80a3 	bhi.w	40712e <_malloc_r+0x47a>
  406fe8:	0b33      	lsrs	r3, r6, #12
  406fea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406fee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406ff2:	00c3      	lsls	r3, r0, #3
  406ff4:	e680      	b.n	406cf8 <_malloc_r+0x44>
  406ff6:	bf00      	nop
  406ff8:	20000444 	.word	0x20000444
  406ffc:	20000abc 	.word	0x20000abc
  407000:	20000a8c 	.word	0x20000a8c
  407004:	20000ab4 	.word	0x20000ab4
  407008:	20000ab8 	.word	0x20000ab8
  40700c:	2000044c 	.word	0x2000044c
  407010:	2000084c 	.word	0x2000084c
  407014:	0a5a      	lsrs	r2, r3, #9
  407016:	2a04      	cmp	r2, #4
  407018:	d95b      	bls.n	4070d2 <_malloc_r+0x41e>
  40701a:	2a14      	cmp	r2, #20
  40701c:	f200 80ae 	bhi.w	40717c <_malloc_r+0x4c8>
  407020:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407024:	00c9      	lsls	r1, r1, #3
  407026:	325b      	adds	r2, #91	; 0x5b
  407028:	eb07 0c01 	add.w	ip, r7, r1
  40702c:	5879      	ldr	r1, [r7, r1]
  40702e:	f1ac 0c08 	sub.w	ip, ip, #8
  407032:	458c      	cmp	ip, r1
  407034:	f000 8088 	beq.w	407148 <_malloc_r+0x494>
  407038:	684a      	ldr	r2, [r1, #4]
  40703a:	f022 0203 	bic.w	r2, r2, #3
  40703e:	4293      	cmp	r3, r2
  407040:	d273      	bcs.n	40712a <_malloc_r+0x476>
  407042:	6889      	ldr	r1, [r1, #8]
  407044:	458c      	cmp	ip, r1
  407046:	d1f7      	bne.n	407038 <_malloc_r+0x384>
  407048:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40704c:	687b      	ldr	r3, [r7, #4]
  40704e:	60e2      	str	r2, [r4, #12]
  407050:	f8c4 c008 	str.w	ip, [r4, #8]
  407054:	6094      	str	r4, [r2, #8]
  407056:	f8cc 400c 	str.w	r4, [ip, #12]
  40705a:	e68f      	b.n	406d7c <_malloc_r+0xc8>
  40705c:	19a1      	adds	r1, r4, r6
  40705e:	f046 0c01 	orr.w	ip, r6, #1
  407062:	f042 0601 	orr.w	r6, r2, #1
  407066:	f8c4 c004 	str.w	ip, [r4, #4]
  40706a:	4628      	mov	r0, r5
  40706c:	6179      	str	r1, [r7, #20]
  40706e:	6139      	str	r1, [r7, #16]
  407070:	f8c1 e00c 	str.w	lr, [r1, #12]
  407074:	f8c1 e008 	str.w	lr, [r1, #8]
  407078:	604e      	str	r6, [r1, #4]
  40707a:	50e2      	str	r2, [r4, r3]
  40707c:	f000 f956 	bl	40732c <__malloc_unlock>
  407080:	3408      	adds	r4, #8
  407082:	e6dd      	b.n	406e40 <_malloc_r+0x18c>
  407084:	687b      	ldr	r3, [r7, #4]
  407086:	e679      	b.n	406d7c <_malloc_r+0xc8>
  407088:	f108 0801 	add.w	r8, r8, #1
  40708c:	f018 0f03 	tst.w	r8, #3
  407090:	f10c 0c08 	add.w	ip, ip, #8
  407094:	f47f ae85 	bne.w	406da2 <_malloc_r+0xee>
  407098:	e02d      	b.n	4070f6 <_malloc_r+0x442>
  40709a:	68dc      	ldr	r4, [r3, #12]
  40709c:	42a3      	cmp	r3, r4
  40709e:	bf08      	it	eq
  4070a0:	3002      	addeq	r0, #2
  4070a2:	f43f ae3e 	beq.w	406d22 <_malloc_r+0x6e>
  4070a6:	e6bb      	b.n	406e20 <_malloc_r+0x16c>
  4070a8:	4419      	add	r1, r3
  4070aa:	461c      	mov	r4, r3
  4070ac:	684a      	ldr	r2, [r1, #4]
  4070ae:	68db      	ldr	r3, [r3, #12]
  4070b0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4070b4:	f042 0201 	orr.w	r2, r2, #1
  4070b8:	604a      	str	r2, [r1, #4]
  4070ba:	4628      	mov	r0, r5
  4070bc:	60f3      	str	r3, [r6, #12]
  4070be:	609e      	str	r6, [r3, #8]
  4070c0:	f000 f934 	bl	40732c <__malloc_unlock>
  4070c4:	e6bc      	b.n	406e40 <_malloc_r+0x18c>
  4070c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4070ca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4070ce:	00c3      	lsls	r3, r0, #3
  4070d0:	e612      	b.n	406cf8 <_malloc_r+0x44>
  4070d2:	099a      	lsrs	r2, r3, #6
  4070d4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4070d8:	00c9      	lsls	r1, r1, #3
  4070da:	3238      	adds	r2, #56	; 0x38
  4070dc:	e7a4      	b.n	407028 <_malloc_r+0x374>
  4070de:	42bc      	cmp	r4, r7
  4070e0:	d054      	beq.n	40718c <_malloc_r+0x4d8>
  4070e2:	68bc      	ldr	r4, [r7, #8]
  4070e4:	6862      	ldr	r2, [r4, #4]
  4070e6:	f022 0203 	bic.w	r2, r2, #3
  4070ea:	e75d      	b.n	406fa8 <_malloc_r+0x2f4>
  4070ec:	f859 3908 	ldr.w	r3, [r9], #-8
  4070f0:	4599      	cmp	r9, r3
  4070f2:	f040 8086 	bne.w	407202 <_malloc_r+0x54e>
  4070f6:	f010 0f03 	tst.w	r0, #3
  4070fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4070fe:	d1f5      	bne.n	4070ec <_malloc_r+0x438>
  407100:	687b      	ldr	r3, [r7, #4]
  407102:	ea23 0304 	bic.w	r3, r3, r4
  407106:	607b      	str	r3, [r7, #4]
  407108:	0064      	lsls	r4, r4, #1
  40710a:	429c      	cmp	r4, r3
  40710c:	f63f aec7 	bhi.w	406e9e <_malloc_r+0x1ea>
  407110:	2c00      	cmp	r4, #0
  407112:	f43f aec4 	beq.w	406e9e <_malloc_r+0x1ea>
  407116:	421c      	tst	r4, r3
  407118:	4640      	mov	r0, r8
  40711a:	f47f ae3e 	bne.w	406d9a <_malloc_r+0xe6>
  40711e:	0064      	lsls	r4, r4, #1
  407120:	421c      	tst	r4, r3
  407122:	f100 0004 	add.w	r0, r0, #4
  407126:	d0fa      	beq.n	40711e <_malloc_r+0x46a>
  407128:	e637      	b.n	406d9a <_malloc_r+0xe6>
  40712a:	468c      	mov	ip, r1
  40712c:	e78c      	b.n	407048 <_malloc_r+0x394>
  40712e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407132:	d815      	bhi.n	407160 <_malloc_r+0x4ac>
  407134:	0bf3      	lsrs	r3, r6, #15
  407136:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40713a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40713e:	00c3      	lsls	r3, r0, #3
  407140:	e5da      	b.n	406cf8 <_malloc_r+0x44>
  407142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407146:	e6ed      	b.n	406f24 <_malloc_r+0x270>
  407148:	687b      	ldr	r3, [r7, #4]
  40714a:	1092      	asrs	r2, r2, #2
  40714c:	2101      	movs	r1, #1
  40714e:	fa01 f202 	lsl.w	r2, r1, r2
  407152:	4313      	orrs	r3, r2
  407154:	607b      	str	r3, [r7, #4]
  407156:	4662      	mov	r2, ip
  407158:	e779      	b.n	40704e <_malloc_r+0x39a>
  40715a:	2301      	movs	r3, #1
  40715c:	6053      	str	r3, [r2, #4]
  40715e:	e729      	b.n	406fb4 <_malloc_r+0x300>
  407160:	f240 5254 	movw	r2, #1364	; 0x554
  407164:	4293      	cmp	r3, r2
  407166:	d822      	bhi.n	4071ae <_malloc_r+0x4fa>
  407168:	0cb3      	lsrs	r3, r6, #18
  40716a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40716e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407172:	00c3      	lsls	r3, r0, #3
  407174:	e5c0      	b.n	406cf8 <_malloc_r+0x44>
  407176:	f103 0b10 	add.w	fp, r3, #16
  40717a:	e6ae      	b.n	406eda <_malloc_r+0x226>
  40717c:	2a54      	cmp	r2, #84	; 0x54
  40717e:	d829      	bhi.n	4071d4 <_malloc_r+0x520>
  407180:	0b1a      	lsrs	r2, r3, #12
  407182:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407186:	00c9      	lsls	r1, r1, #3
  407188:	326e      	adds	r2, #110	; 0x6e
  40718a:	e74d      	b.n	407028 <_malloc_r+0x374>
  40718c:	4b20      	ldr	r3, [pc, #128]	; (407210 <_malloc_r+0x55c>)
  40718e:	6819      	ldr	r1, [r3, #0]
  407190:	4459      	add	r1, fp
  407192:	6019      	str	r1, [r3, #0]
  407194:	e6b2      	b.n	406efc <_malloc_r+0x248>
  407196:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40719a:	2800      	cmp	r0, #0
  40719c:	f47f aeae 	bne.w	406efc <_malloc_r+0x248>
  4071a0:	eb08 030b 	add.w	r3, r8, fp
  4071a4:	68ba      	ldr	r2, [r7, #8]
  4071a6:	f043 0301 	orr.w	r3, r3, #1
  4071aa:	6053      	str	r3, [r2, #4]
  4071ac:	e6ee      	b.n	406f8c <_malloc_r+0x2d8>
  4071ae:	207f      	movs	r0, #127	; 0x7f
  4071b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4071b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4071b8:	e59e      	b.n	406cf8 <_malloc_r+0x44>
  4071ba:	f104 0108 	add.w	r1, r4, #8
  4071be:	4628      	mov	r0, r5
  4071c0:	9300      	str	r3, [sp, #0]
  4071c2:	f000 fd99 	bl	407cf8 <_free_r>
  4071c6:	9b00      	ldr	r3, [sp, #0]
  4071c8:	6819      	ldr	r1, [r3, #0]
  4071ca:	e6df      	b.n	406f8c <_malloc_r+0x2d8>
  4071cc:	2001      	movs	r0, #1
  4071ce:	f04f 0900 	mov.w	r9, #0
  4071d2:	e6bc      	b.n	406f4e <_malloc_r+0x29a>
  4071d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4071d8:	d805      	bhi.n	4071e6 <_malloc_r+0x532>
  4071da:	0bda      	lsrs	r2, r3, #15
  4071dc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4071e0:	00c9      	lsls	r1, r1, #3
  4071e2:	3277      	adds	r2, #119	; 0x77
  4071e4:	e720      	b.n	407028 <_malloc_r+0x374>
  4071e6:	f240 5154 	movw	r1, #1364	; 0x554
  4071ea:	428a      	cmp	r2, r1
  4071ec:	d805      	bhi.n	4071fa <_malloc_r+0x546>
  4071ee:	0c9a      	lsrs	r2, r3, #18
  4071f0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4071f4:	00c9      	lsls	r1, r1, #3
  4071f6:	327c      	adds	r2, #124	; 0x7c
  4071f8:	e716      	b.n	407028 <_malloc_r+0x374>
  4071fa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4071fe:	227e      	movs	r2, #126	; 0x7e
  407200:	e712      	b.n	407028 <_malloc_r+0x374>
  407202:	687b      	ldr	r3, [r7, #4]
  407204:	e780      	b.n	407108 <_malloc_r+0x454>
  407206:	08f0      	lsrs	r0, r6, #3
  407208:	f106 0308 	add.w	r3, r6, #8
  40720c:	e600      	b.n	406e10 <_malloc_r+0x15c>
  40720e:	bf00      	nop
  407210:	20000a8c 	.word	0x20000a8c
	...

00407220 <memchr>:
  407220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407224:	2a10      	cmp	r2, #16
  407226:	db2b      	blt.n	407280 <memchr+0x60>
  407228:	f010 0f07 	tst.w	r0, #7
  40722c:	d008      	beq.n	407240 <memchr+0x20>
  40722e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407232:	3a01      	subs	r2, #1
  407234:	428b      	cmp	r3, r1
  407236:	d02d      	beq.n	407294 <memchr+0x74>
  407238:	f010 0f07 	tst.w	r0, #7
  40723c:	b342      	cbz	r2, 407290 <memchr+0x70>
  40723e:	d1f6      	bne.n	40722e <memchr+0xe>
  407240:	b4f0      	push	{r4, r5, r6, r7}
  407242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40724a:	f022 0407 	bic.w	r4, r2, #7
  40724e:	f07f 0700 	mvns.w	r7, #0
  407252:	2300      	movs	r3, #0
  407254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407258:	3c08      	subs	r4, #8
  40725a:	ea85 0501 	eor.w	r5, r5, r1
  40725e:	ea86 0601 	eor.w	r6, r6, r1
  407262:	fa85 f547 	uadd8	r5, r5, r7
  407266:	faa3 f587 	sel	r5, r3, r7
  40726a:	fa86 f647 	uadd8	r6, r6, r7
  40726e:	faa5 f687 	sel	r6, r5, r7
  407272:	b98e      	cbnz	r6, 407298 <memchr+0x78>
  407274:	d1ee      	bne.n	407254 <memchr+0x34>
  407276:	bcf0      	pop	{r4, r5, r6, r7}
  407278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40727c:	f002 0207 	and.w	r2, r2, #7
  407280:	b132      	cbz	r2, 407290 <memchr+0x70>
  407282:	f810 3b01 	ldrb.w	r3, [r0], #1
  407286:	3a01      	subs	r2, #1
  407288:	ea83 0301 	eor.w	r3, r3, r1
  40728c:	b113      	cbz	r3, 407294 <memchr+0x74>
  40728e:	d1f8      	bne.n	407282 <memchr+0x62>
  407290:	2000      	movs	r0, #0
  407292:	4770      	bx	lr
  407294:	3801      	subs	r0, #1
  407296:	4770      	bx	lr
  407298:	2d00      	cmp	r5, #0
  40729a:	bf06      	itte	eq
  40729c:	4635      	moveq	r5, r6
  40729e:	3803      	subeq	r0, #3
  4072a0:	3807      	subne	r0, #7
  4072a2:	f015 0f01 	tst.w	r5, #1
  4072a6:	d107      	bne.n	4072b8 <memchr+0x98>
  4072a8:	3001      	adds	r0, #1
  4072aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4072ae:	bf02      	ittt	eq
  4072b0:	3001      	addeq	r0, #1
  4072b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4072b6:	3001      	addeq	r0, #1
  4072b8:	bcf0      	pop	{r4, r5, r6, r7}
  4072ba:	3801      	subs	r0, #1
  4072bc:	4770      	bx	lr
  4072be:	bf00      	nop

004072c0 <memcmp>:
  4072c0:	2a03      	cmp	r2, #3
  4072c2:	b470      	push	{r4, r5, r6}
  4072c4:	d922      	bls.n	40730c <memcmp+0x4c>
  4072c6:	ea40 0301 	orr.w	r3, r0, r1
  4072ca:	079b      	lsls	r3, r3, #30
  4072cc:	d011      	beq.n	4072f2 <memcmp+0x32>
  4072ce:	7803      	ldrb	r3, [r0, #0]
  4072d0:	780c      	ldrb	r4, [r1, #0]
  4072d2:	42a3      	cmp	r3, r4
  4072d4:	d11d      	bne.n	407312 <memcmp+0x52>
  4072d6:	440a      	add	r2, r1
  4072d8:	3101      	adds	r1, #1
  4072da:	e005      	b.n	4072e8 <memcmp+0x28>
  4072dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4072e0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4072e4:	42a3      	cmp	r3, r4
  4072e6:	d114      	bne.n	407312 <memcmp+0x52>
  4072e8:	4291      	cmp	r1, r2
  4072ea:	d1f7      	bne.n	4072dc <memcmp+0x1c>
  4072ec:	2000      	movs	r0, #0
  4072ee:	bc70      	pop	{r4, r5, r6}
  4072f0:	4770      	bx	lr
  4072f2:	680d      	ldr	r5, [r1, #0]
  4072f4:	6806      	ldr	r6, [r0, #0]
  4072f6:	42ae      	cmp	r6, r5
  4072f8:	460c      	mov	r4, r1
  4072fa:	4603      	mov	r3, r0
  4072fc:	f101 0104 	add.w	r1, r1, #4
  407300:	f100 0004 	add.w	r0, r0, #4
  407304:	d108      	bne.n	407318 <memcmp+0x58>
  407306:	3a04      	subs	r2, #4
  407308:	2a03      	cmp	r2, #3
  40730a:	d8f2      	bhi.n	4072f2 <memcmp+0x32>
  40730c:	2a00      	cmp	r2, #0
  40730e:	d1de      	bne.n	4072ce <memcmp+0xe>
  407310:	e7ec      	b.n	4072ec <memcmp+0x2c>
  407312:	1b18      	subs	r0, r3, r4
  407314:	bc70      	pop	{r4, r5, r6}
  407316:	4770      	bx	lr
  407318:	4621      	mov	r1, r4
  40731a:	4618      	mov	r0, r3
  40731c:	e7d7      	b.n	4072ce <memcmp+0xe>
  40731e:	bf00      	nop

00407320 <__malloc_lock>:
  407320:	4801      	ldr	r0, [pc, #4]	; (407328 <__malloc_lock+0x8>)
  407322:	f7ff bcc3 	b.w	406cac <__retarget_lock_acquire_recursive>
  407326:	bf00      	nop
  407328:	20005cfc 	.word	0x20005cfc

0040732c <__malloc_unlock>:
  40732c:	4801      	ldr	r0, [pc, #4]	; (407334 <__malloc_unlock+0x8>)
  40732e:	f7ff bcbf 	b.w	406cb0 <__retarget_lock_release_recursive>
  407332:	bf00      	nop
  407334:	20005cfc 	.word	0x20005cfc

00407338 <_Balloc>:
  407338:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40733a:	b570      	push	{r4, r5, r6, lr}
  40733c:	4605      	mov	r5, r0
  40733e:	460c      	mov	r4, r1
  407340:	b14b      	cbz	r3, 407356 <_Balloc+0x1e>
  407342:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407346:	b180      	cbz	r0, 40736a <_Balloc+0x32>
  407348:	6802      	ldr	r2, [r0, #0]
  40734a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40734e:	2300      	movs	r3, #0
  407350:	6103      	str	r3, [r0, #16]
  407352:	60c3      	str	r3, [r0, #12]
  407354:	bd70      	pop	{r4, r5, r6, pc}
  407356:	2221      	movs	r2, #33	; 0x21
  407358:	2104      	movs	r1, #4
  40735a:	f000 fc4d 	bl	407bf8 <_calloc_r>
  40735e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407360:	4603      	mov	r3, r0
  407362:	2800      	cmp	r0, #0
  407364:	d1ed      	bne.n	407342 <_Balloc+0xa>
  407366:	2000      	movs	r0, #0
  407368:	bd70      	pop	{r4, r5, r6, pc}
  40736a:	2101      	movs	r1, #1
  40736c:	fa01 f604 	lsl.w	r6, r1, r4
  407370:	1d72      	adds	r2, r6, #5
  407372:	4628      	mov	r0, r5
  407374:	0092      	lsls	r2, r2, #2
  407376:	f000 fc3f 	bl	407bf8 <_calloc_r>
  40737a:	2800      	cmp	r0, #0
  40737c:	d0f3      	beq.n	407366 <_Balloc+0x2e>
  40737e:	6044      	str	r4, [r0, #4]
  407380:	6086      	str	r6, [r0, #8]
  407382:	e7e4      	b.n	40734e <_Balloc+0x16>

00407384 <_Bfree>:
  407384:	b131      	cbz	r1, 407394 <_Bfree+0x10>
  407386:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407388:	684a      	ldr	r2, [r1, #4]
  40738a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40738e:	6008      	str	r0, [r1, #0]
  407390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407394:	4770      	bx	lr
  407396:	bf00      	nop

00407398 <__multadd>:
  407398:	b5f0      	push	{r4, r5, r6, r7, lr}
  40739a:	690c      	ldr	r4, [r1, #16]
  40739c:	b083      	sub	sp, #12
  40739e:	460d      	mov	r5, r1
  4073a0:	4606      	mov	r6, r0
  4073a2:	f101 0e14 	add.w	lr, r1, #20
  4073a6:	2700      	movs	r7, #0
  4073a8:	f8de 0000 	ldr.w	r0, [lr]
  4073ac:	b281      	uxth	r1, r0
  4073ae:	fb02 3301 	mla	r3, r2, r1, r3
  4073b2:	0c01      	lsrs	r1, r0, #16
  4073b4:	0c18      	lsrs	r0, r3, #16
  4073b6:	fb02 0101 	mla	r1, r2, r1, r0
  4073ba:	b29b      	uxth	r3, r3
  4073bc:	3701      	adds	r7, #1
  4073be:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4073c2:	42bc      	cmp	r4, r7
  4073c4:	f84e 3b04 	str.w	r3, [lr], #4
  4073c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4073cc:	dcec      	bgt.n	4073a8 <__multadd+0x10>
  4073ce:	b13b      	cbz	r3, 4073e0 <__multadd+0x48>
  4073d0:	68aa      	ldr	r2, [r5, #8]
  4073d2:	4294      	cmp	r4, r2
  4073d4:	da07      	bge.n	4073e6 <__multadd+0x4e>
  4073d6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4073da:	3401      	adds	r4, #1
  4073dc:	6153      	str	r3, [r2, #20]
  4073de:	612c      	str	r4, [r5, #16]
  4073e0:	4628      	mov	r0, r5
  4073e2:	b003      	add	sp, #12
  4073e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073e6:	6869      	ldr	r1, [r5, #4]
  4073e8:	9301      	str	r3, [sp, #4]
  4073ea:	3101      	adds	r1, #1
  4073ec:	4630      	mov	r0, r6
  4073ee:	f7ff ffa3 	bl	407338 <_Balloc>
  4073f2:	692a      	ldr	r2, [r5, #16]
  4073f4:	3202      	adds	r2, #2
  4073f6:	f105 010c 	add.w	r1, r5, #12
  4073fa:	4607      	mov	r7, r0
  4073fc:	0092      	lsls	r2, r2, #2
  4073fe:	300c      	adds	r0, #12
  407400:	f7fc fe0a 	bl	404018 <memcpy>
  407404:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407406:	6869      	ldr	r1, [r5, #4]
  407408:	9b01      	ldr	r3, [sp, #4]
  40740a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40740e:	6028      	str	r0, [r5, #0]
  407410:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407414:	463d      	mov	r5, r7
  407416:	e7de      	b.n	4073d6 <__multadd+0x3e>

00407418 <__hi0bits>:
  407418:	0c02      	lsrs	r2, r0, #16
  40741a:	0412      	lsls	r2, r2, #16
  40741c:	4603      	mov	r3, r0
  40741e:	b9b2      	cbnz	r2, 40744e <__hi0bits+0x36>
  407420:	0403      	lsls	r3, r0, #16
  407422:	2010      	movs	r0, #16
  407424:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407428:	bf04      	itt	eq
  40742a:	021b      	lsleq	r3, r3, #8
  40742c:	3008      	addeq	r0, #8
  40742e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407432:	bf04      	itt	eq
  407434:	011b      	lsleq	r3, r3, #4
  407436:	3004      	addeq	r0, #4
  407438:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40743c:	bf04      	itt	eq
  40743e:	009b      	lsleq	r3, r3, #2
  407440:	3002      	addeq	r0, #2
  407442:	2b00      	cmp	r3, #0
  407444:	db02      	blt.n	40744c <__hi0bits+0x34>
  407446:	005b      	lsls	r3, r3, #1
  407448:	d403      	bmi.n	407452 <__hi0bits+0x3a>
  40744a:	2020      	movs	r0, #32
  40744c:	4770      	bx	lr
  40744e:	2000      	movs	r0, #0
  407450:	e7e8      	b.n	407424 <__hi0bits+0xc>
  407452:	3001      	adds	r0, #1
  407454:	4770      	bx	lr
  407456:	bf00      	nop

00407458 <__lo0bits>:
  407458:	6803      	ldr	r3, [r0, #0]
  40745a:	f013 0207 	ands.w	r2, r3, #7
  40745e:	4601      	mov	r1, r0
  407460:	d007      	beq.n	407472 <__lo0bits+0x1a>
  407462:	07da      	lsls	r2, r3, #31
  407464:	d421      	bmi.n	4074aa <__lo0bits+0x52>
  407466:	0798      	lsls	r0, r3, #30
  407468:	d421      	bmi.n	4074ae <__lo0bits+0x56>
  40746a:	089b      	lsrs	r3, r3, #2
  40746c:	600b      	str	r3, [r1, #0]
  40746e:	2002      	movs	r0, #2
  407470:	4770      	bx	lr
  407472:	b298      	uxth	r0, r3
  407474:	b198      	cbz	r0, 40749e <__lo0bits+0x46>
  407476:	4610      	mov	r0, r2
  407478:	f013 0fff 	tst.w	r3, #255	; 0xff
  40747c:	bf04      	itt	eq
  40747e:	0a1b      	lsreq	r3, r3, #8
  407480:	3008      	addeq	r0, #8
  407482:	071a      	lsls	r2, r3, #28
  407484:	bf04      	itt	eq
  407486:	091b      	lsreq	r3, r3, #4
  407488:	3004      	addeq	r0, #4
  40748a:	079a      	lsls	r2, r3, #30
  40748c:	bf04      	itt	eq
  40748e:	089b      	lsreq	r3, r3, #2
  407490:	3002      	addeq	r0, #2
  407492:	07da      	lsls	r2, r3, #31
  407494:	d407      	bmi.n	4074a6 <__lo0bits+0x4e>
  407496:	085b      	lsrs	r3, r3, #1
  407498:	d104      	bne.n	4074a4 <__lo0bits+0x4c>
  40749a:	2020      	movs	r0, #32
  40749c:	4770      	bx	lr
  40749e:	0c1b      	lsrs	r3, r3, #16
  4074a0:	2010      	movs	r0, #16
  4074a2:	e7e9      	b.n	407478 <__lo0bits+0x20>
  4074a4:	3001      	adds	r0, #1
  4074a6:	600b      	str	r3, [r1, #0]
  4074a8:	4770      	bx	lr
  4074aa:	2000      	movs	r0, #0
  4074ac:	4770      	bx	lr
  4074ae:	085b      	lsrs	r3, r3, #1
  4074b0:	600b      	str	r3, [r1, #0]
  4074b2:	2001      	movs	r0, #1
  4074b4:	4770      	bx	lr
  4074b6:	bf00      	nop

004074b8 <__i2b>:
  4074b8:	b510      	push	{r4, lr}
  4074ba:	460c      	mov	r4, r1
  4074bc:	2101      	movs	r1, #1
  4074be:	f7ff ff3b 	bl	407338 <_Balloc>
  4074c2:	2201      	movs	r2, #1
  4074c4:	6144      	str	r4, [r0, #20]
  4074c6:	6102      	str	r2, [r0, #16]
  4074c8:	bd10      	pop	{r4, pc}
  4074ca:	bf00      	nop

004074cc <__multiply>:
  4074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074d0:	690c      	ldr	r4, [r1, #16]
  4074d2:	6915      	ldr	r5, [r2, #16]
  4074d4:	42ac      	cmp	r4, r5
  4074d6:	b083      	sub	sp, #12
  4074d8:	468b      	mov	fp, r1
  4074da:	4616      	mov	r6, r2
  4074dc:	da04      	bge.n	4074e8 <__multiply+0x1c>
  4074de:	4622      	mov	r2, r4
  4074e0:	46b3      	mov	fp, r6
  4074e2:	462c      	mov	r4, r5
  4074e4:	460e      	mov	r6, r1
  4074e6:	4615      	mov	r5, r2
  4074e8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4074ec:	f8db 1004 	ldr.w	r1, [fp, #4]
  4074f0:	eb04 0805 	add.w	r8, r4, r5
  4074f4:	4598      	cmp	r8, r3
  4074f6:	bfc8      	it	gt
  4074f8:	3101      	addgt	r1, #1
  4074fa:	f7ff ff1d 	bl	407338 <_Balloc>
  4074fe:	f100 0914 	add.w	r9, r0, #20
  407502:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407506:	45d1      	cmp	r9, sl
  407508:	9000      	str	r0, [sp, #0]
  40750a:	d205      	bcs.n	407518 <__multiply+0x4c>
  40750c:	464b      	mov	r3, r9
  40750e:	2100      	movs	r1, #0
  407510:	f843 1b04 	str.w	r1, [r3], #4
  407514:	459a      	cmp	sl, r3
  407516:	d8fb      	bhi.n	407510 <__multiply+0x44>
  407518:	f106 0c14 	add.w	ip, r6, #20
  40751c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407520:	f10b 0b14 	add.w	fp, fp, #20
  407524:	459c      	cmp	ip, r3
  407526:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40752a:	d24c      	bcs.n	4075c6 <__multiply+0xfa>
  40752c:	f8cd a004 	str.w	sl, [sp, #4]
  407530:	469a      	mov	sl, r3
  407532:	f8dc 5000 	ldr.w	r5, [ip]
  407536:	b2af      	uxth	r7, r5
  407538:	b1ef      	cbz	r7, 407576 <__multiply+0xaa>
  40753a:	2100      	movs	r1, #0
  40753c:	464d      	mov	r5, r9
  40753e:	465e      	mov	r6, fp
  407540:	460c      	mov	r4, r1
  407542:	f856 2b04 	ldr.w	r2, [r6], #4
  407546:	6828      	ldr	r0, [r5, #0]
  407548:	b293      	uxth	r3, r2
  40754a:	b281      	uxth	r1, r0
  40754c:	fb07 1303 	mla	r3, r7, r3, r1
  407550:	0c12      	lsrs	r2, r2, #16
  407552:	0c01      	lsrs	r1, r0, #16
  407554:	4423      	add	r3, r4
  407556:	fb07 1102 	mla	r1, r7, r2, r1
  40755a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40755e:	b29b      	uxth	r3, r3
  407560:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407564:	45b6      	cmp	lr, r6
  407566:	f845 3b04 	str.w	r3, [r5], #4
  40756a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40756e:	d8e8      	bhi.n	407542 <__multiply+0x76>
  407570:	602c      	str	r4, [r5, #0]
  407572:	f8dc 5000 	ldr.w	r5, [ip]
  407576:	0c2d      	lsrs	r5, r5, #16
  407578:	d01d      	beq.n	4075b6 <__multiply+0xea>
  40757a:	f8d9 3000 	ldr.w	r3, [r9]
  40757e:	4648      	mov	r0, r9
  407580:	461c      	mov	r4, r3
  407582:	4659      	mov	r1, fp
  407584:	2200      	movs	r2, #0
  407586:	880e      	ldrh	r6, [r1, #0]
  407588:	0c24      	lsrs	r4, r4, #16
  40758a:	fb05 4406 	mla	r4, r5, r6, r4
  40758e:	4422      	add	r2, r4
  407590:	b29b      	uxth	r3, r3
  407592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407596:	f840 3b04 	str.w	r3, [r0], #4
  40759a:	f851 3b04 	ldr.w	r3, [r1], #4
  40759e:	6804      	ldr	r4, [r0, #0]
  4075a0:	0c1b      	lsrs	r3, r3, #16
  4075a2:	b2a6      	uxth	r6, r4
  4075a4:	fb05 6303 	mla	r3, r5, r3, r6
  4075a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4075ac:	458e      	cmp	lr, r1
  4075ae:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4075b2:	d8e8      	bhi.n	407586 <__multiply+0xba>
  4075b4:	6003      	str	r3, [r0, #0]
  4075b6:	f10c 0c04 	add.w	ip, ip, #4
  4075ba:	45e2      	cmp	sl, ip
  4075bc:	f109 0904 	add.w	r9, r9, #4
  4075c0:	d8b7      	bhi.n	407532 <__multiply+0x66>
  4075c2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4075c6:	f1b8 0f00 	cmp.w	r8, #0
  4075ca:	dd0b      	ble.n	4075e4 <__multiply+0x118>
  4075cc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4075d0:	f1aa 0a04 	sub.w	sl, sl, #4
  4075d4:	b11b      	cbz	r3, 4075de <__multiply+0x112>
  4075d6:	e005      	b.n	4075e4 <__multiply+0x118>
  4075d8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4075dc:	b913      	cbnz	r3, 4075e4 <__multiply+0x118>
  4075de:	f1b8 0801 	subs.w	r8, r8, #1
  4075e2:	d1f9      	bne.n	4075d8 <__multiply+0x10c>
  4075e4:	9800      	ldr	r0, [sp, #0]
  4075e6:	f8c0 8010 	str.w	r8, [r0, #16]
  4075ea:	b003      	add	sp, #12
  4075ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004075f0 <__pow5mult>:
  4075f0:	f012 0303 	ands.w	r3, r2, #3
  4075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4075f8:	4614      	mov	r4, r2
  4075fa:	4607      	mov	r7, r0
  4075fc:	d12e      	bne.n	40765c <__pow5mult+0x6c>
  4075fe:	460d      	mov	r5, r1
  407600:	10a4      	asrs	r4, r4, #2
  407602:	d01c      	beq.n	40763e <__pow5mult+0x4e>
  407604:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407606:	b396      	cbz	r6, 40766e <__pow5mult+0x7e>
  407608:	07e3      	lsls	r3, r4, #31
  40760a:	f04f 0800 	mov.w	r8, #0
  40760e:	d406      	bmi.n	40761e <__pow5mult+0x2e>
  407610:	1064      	asrs	r4, r4, #1
  407612:	d014      	beq.n	40763e <__pow5mult+0x4e>
  407614:	6830      	ldr	r0, [r6, #0]
  407616:	b1a8      	cbz	r0, 407644 <__pow5mult+0x54>
  407618:	4606      	mov	r6, r0
  40761a:	07e3      	lsls	r3, r4, #31
  40761c:	d5f8      	bpl.n	407610 <__pow5mult+0x20>
  40761e:	4632      	mov	r2, r6
  407620:	4629      	mov	r1, r5
  407622:	4638      	mov	r0, r7
  407624:	f7ff ff52 	bl	4074cc <__multiply>
  407628:	b1b5      	cbz	r5, 407658 <__pow5mult+0x68>
  40762a:	686a      	ldr	r2, [r5, #4]
  40762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40762e:	1064      	asrs	r4, r4, #1
  407630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407634:	6029      	str	r1, [r5, #0]
  407636:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40763a:	4605      	mov	r5, r0
  40763c:	d1ea      	bne.n	407614 <__pow5mult+0x24>
  40763e:	4628      	mov	r0, r5
  407640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407644:	4632      	mov	r2, r6
  407646:	4631      	mov	r1, r6
  407648:	4638      	mov	r0, r7
  40764a:	f7ff ff3f 	bl	4074cc <__multiply>
  40764e:	6030      	str	r0, [r6, #0]
  407650:	f8c0 8000 	str.w	r8, [r0]
  407654:	4606      	mov	r6, r0
  407656:	e7e0      	b.n	40761a <__pow5mult+0x2a>
  407658:	4605      	mov	r5, r0
  40765a:	e7d9      	b.n	407610 <__pow5mult+0x20>
  40765c:	1e5a      	subs	r2, r3, #1
  40765e:	4d0b      	ldr	r5, [pc, #44]	; (40768c <__pow5mult+0x9c>)
  407660:	2300      	movs	r3, #0
  407662:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407666:	f7ff fe97 	bl	407398 <__multadd>
  40766a:	4605      	mov	r5, r0
  40766c:	e7c8      	b.n	407600 <__pow5mult+0x10>
  40766e:	2101      	movs	r1, #1
  407670:	4638      	mov	r0, r7
  407672:	f7ff fe61 	bl	407338 <_Balloc>
  407676:	f240 2171 	movw	r1, #625	; 0x271
  40767a:	2201      	movs	r2, #1
  40767c:	2300      	movs	r3, #0
  40767e:	6141      	str	r1, [r0, #20]
  407680:	6102      	str	r2, [r0, #16]
  407682:	4606      	mov	r6, r0
  407684:	64b8      	str	r0, [r7, #72]	; 0x48
  407686:	6003      	str	r3, [r0, #0]
  407688:	e7be      	b.n	407608 <__pow5mult+0x18>
  40768a:	bf00      	nop
  40768c:	00409c50 	.word	0x00409c50

00407690 <__lshift>:
  407690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407694:	4691      	mov	r9, r2
  407696:	690a      	ldr	r2, [r1, #16]
  407698:	688b      	ldr	r3, [r1, #8]
  40769a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40769e:	eb04 0802 	add.w	r8, r4, r2
  4076a2:	f108 0501 	add.w	r5, r8, #1
  4076a6:	429d      	cmp	r5, r3
  4076a8:	460e      	mov	r6, r1
  4076aa:	4607      	mov	r7, r0
  4076ac:	6849      	ldr	r1, [r1, #4]
  4076ae:	dd04      	ble.n	4076ba <__lshift+0x2a>
  4076b0:	005b      	lsls	r3, r3, #1
  4076b2:	429d      	cmp	r5, r3
  4076b4:	f101 0101 	add.w	r1, r1, #1
  4076b8:	dcfa      	bgt.n	4076b0 <__lshift+0x20>
  4076ba:	4638      	mov	r0, r7
  4076bc:	f7ff fe3c 	bl	407338 <_Balloc>
  4076c0:	2c00      	cmp	r4, #0
  4076c2:	f100 0314 	add.w	r3, r0, #20
  4076c6:	dd06      	ble.n	4076d6 <__lshift+0x46>
  4076c8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4076cc:	2100      	movs	r1, #0
  4076ce:	f843 1b04 	str.w	r1, [r3], #4
  4076d2:	429a      	cmp	r2, r3
  4076d4:	d1fb      	bne.n	4076ce <__lshift+0x3e>
  4076d6:	6934      	ldr	r4, [r6, #16]
  4076d8:	f106 0114 	add.w	r1, r6, #20
  4076dc:	f019 091f 	ands.w	r9, r9, #31
  4076e0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4076e4:	d01d      	beq.n	407722 <__lshift+0x92>
  4076e6:	f1c9 0c20 	rsb	ip, r9, #32
  4076ea:	2200      	movs	r2, #0
  4076ec:	680c      	ldr	r4, [r1, #0]
  4076ee:	fa04 f409 	lsl.w	r4, r4, r9
  4076f2:	4314      	orrs	r4, r2
  4076f4:	f843 4b04 	str.w	r4, [r3], #4
  4076f8:	f851 2b04 	ldr.w	r2, [r1], #4
  4076fc:	458e      	cmp	lr, r1
  4076fe:	fa22 f20c 	lsr.w	r2, r2, ip
  407702:	d8f3      	bhi.n	4076ec <__lshift+0x5c>
  407704:	601a      	str	r2, [r3, #0]
  407706:	b10a      	cbz	r2, 40770c <__lshift+0x7c>
  407708:	f108 0502 	add.w	r5, r8, #2
  40770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40770e:	6872      	ldr	r2, [r6, #4]
  407710:	3d01      	subs	r5, #1
  407712:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407716:	6105      	str	r5, [r0, #16]
  407718:	6031      	str	r1, [r6, #0]
  40771a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40771e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407722:	3b04      	subs	r3, #4
  407724:	f851 2b04 	ldr.w	r2, [r1], #4
  407728:	f843 2f04 	str.w	r2, [r3, #4]!
  40772c:	458e      	cmp	lr, r1
  40772e:	d8f9      	bhi.n	407724 <__lshift+0x94>
  407730:	e7ec      	b.n	40770c <__lshift+0x7c>
  407732:	bf00      	nop

00407734 <__mcmp>:
  407734:	b430      	push	{r4, r5}
  407736:	690b      	ldr	r3, [r1, #16]
  407738:	4605      	mov	r5, r0
  40773a:	6900      	ldr	r0, [r0, #16]
  40773c:	1ac0      	subs	r0, r0, r3
  40773e:	d10f      	bne.n	407760 <__mcmp+0x2c>
  407740:	009b      	lsls	r3, r3, #2
  407742:	3514      	adds	r5, #20
  407744:	3114      	adds	r1, #20
  407746:	4419      	add	r1, r3
  407748:	442b      	add	r3, r5
  40774a:	e001      	b.n	407750 <__mcmp+0x1c>
  40774c:	429d      	cmp	r5, r3
  40774e:	d207      	bcs.n	407760 <__mcmp+0x2c>
  407750:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407758:	4294      	cmp	r4, r2
  40775a:	d0f7      	beq.n	40774c <__mcmp+0x18>
  40775c:	d302      	bcc.n	407764 <__mcmp+0x30>
  40775e:	2001      	movs	r0, #1
  407760:	bc30      	pop	{r4, r5}
  407762:	4770      	bx	lr
  407764:	f04f 30ff 	mov.w	r0, #4294967295
  407768:	e7fa      	b.n	407760 <__mcmp+0x2c>
  40776a:	bf00      	nop

0040776c <__mdiff>:
  40776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407770:	690f      	ldr	r7, [r1, #16]
  407772:	460e      	mov	r6, r1
  407774:	6911      	ldr	r1, [r2, #16]
  407776:	1a7f      	subs	r7, r7, r1
  407778:	2f00      	cmp	r7, #0
  40777a:	4690      	mov	r8, r2
  40777c:	d117      	bne.n	4077ae <__mdiff+0x42>
  40777e:	0089      	lsls	r1, r1, #2
  407780:	f106 0514 	add.w	r5, r6, #20
  407784:	f102 0e14 	add.w	lr, r2, #20
  407788:	186b      	adds	r3, r5, r1
  40778a:	4471      	add	r1, lr
  40778c:	e001      	b.n	407792 <__mdiff+0x26>
  40778e:	429d      	cmp	r5, r3
  407790:	d25c      	bcs.n	40784c <__mdiff+0xe0>
  407792:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407796:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40779a:	42a2      	cmp	r2, r4
  40779c:	d0f7      	beq.n	40778e <__mdiff+0x22>
  40779e:	d25e      	bcs.n	40785e <__mdiff+0xf2>
  4077a0:	4633      	mov	r3, r6
  4077a2:	462c      	mov	r4, r5
  4077a4:	4646      	mov	r6, r8
  4077a6:	4675      	mov	r5, lr
  4077a8:	4698      	mov	r8, r3
  4077aa:	2701      	movs	r7, #1
  4077ac:	e005      	b.n	4077ba <__mdiff+0x4e>
  4077ae:	db58      	blt.n	407862 <__mdiff+0xf6>
  4077b0:	f106 0514 	add.w	r5, r6, #20
  4077b4:	f108 0414 	add.w	r4, r8, #20
  4077b8:	2700      	movs	r7, #0
  4077ba:	6871      	ldr	r1, [r6, #4]
  4077bc:	f7ff fdbc 	bl	407338 <_Balloc>
  4077c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4077c4:	6936      	ldr	r6, [r6, #16]
  4077c6:	60c7      	str	r7, [r0, #12]
  4077c8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4077cc:	46a6      	mov	lr, r4
  4077ce:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4077d2:	f100 0414 	add.w	r4, r0, #20
  4077d6:	2300      	movs	r3, #0
  4077d8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4077dc:	f855 8b04 	ldr.w	r8, [r5], #4
  4077e0:	b28a      	uxth	r2, r1
  4077e2:	fa13 f388 	uxtah	r3, r3, r8
  4077e6:	0c09      	lsrs	r1, r1, #16
  4077e8:	1a9a      	subs	r2, r3, r2
  4077ea:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4077ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4077f2:	b292      	uxth	r2, r2
  4077f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4077f8:	45f4      	cmp	ip, lr
  4077fa:	f844 2b04 	str.w	r2, [r4], #4
  4077fe:	ea4f 4323 	mov.w	r3, r3, asr #16
  407802:	d8e9      	bhi.n	4077d8 <__mdiff+0x6c>
  407804:	42af      	cmp	r7, r5
  407806:	d917      	bls.n	407838 <__mdiff+0xcc>
  407808:	46a4      	mov	ip, r4
  40780a:	46ae      	mov	lr, r5
  40780c:	f85e 2b04 	ldr.w	r2, [lr], #4
  407810:	fa13 f382 	uxtah	r3, r3, r2
  407814:	1419      	asrs	r1, r3, #16
  407816:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40781a:	b29b      	uxth	r3, r3
  40781c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407820:	4577      	cmp	r7, lr
  407822:	f84c 2b04 	str.w	r2, [ip], #4
  407826:	ea4f 4321 	mov.w	r3, r1, asr #16
  40782a:	d8ef      	bhi.n	40780c <__mdiff+0xa0>
  40782c:	43ed      	mvns	r5, r5
  40782e:	442f      	add	r7, r5
  407830:	f027 0703 	bic.w	r7, r7, #3
  407834:	3704      	adds	r7, #4
  407836:	443c      	add	r4, r7
  407838:	3c04      	subs	r4, #4
  40783a:	b922      	cbnz	r2, 407846 <__mdiff+0xda>
  40783c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407840:	3e01      	subs	r6, #1
  407842:	2b00      	cmp	r3, #0
  407844:	d0fa      	beq.n	40783c <__mdiff+0xd0>
  407846:	6106      	str	r6, [r0, #16]
  407848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40784c:	2100      	movs	r1, #0
  40784e:	f7ff fd73 	bl	407338 <_Balloc>
  407852:	2201      	movs	r2, #1
  407854:	2300      	movs	r3, #0
  407856:	6102      	str	r2, [r0, #16]
  407858:	6143      	str	r3, [r0, #20]
  40785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40785e:	4674      	mov	r4, lr
  407860:	e7ab      	b.n	4077ba <__mdiff+0x4e>
  407862:	4633      	mov	r3, r6
  407864:	f106 0414 	add.w	r4, r6, #20
  407868:	f102 0514 	add.w	r5, r2, #20
  40786c:	4616      	mov	r6, r2
  40786e:	2701      	movs	r7, #1
  407870:	4698      	mov	r8, r3
  407872:	e7a2      	b.n	4077ba <__mdiff+0x4e>

00407874 <__d2b>:
  407874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407878:	b082      	sub	sp, #8
  40787a:	2101      	movs	r1, #1
  40787c:	461c      	mov	r4, r3
  40787e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407882:	4615      	mov	r5, r2
  407884:	9e08      	ldr	r6, [sp, #32]
  407886:	f7ff fd57 	bl	407338 <_Balloc>
  40788a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40788e:	4680      	mov	r8, r0
  407890:	b10f      	cbz	r7, 407896 <__d2b+0x22>
  407892:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407896:	9401      	str	r4, [sp, #4]
  407898:	b31d      	cbz	r5, 4078e2 <__d2b+0x6e>
  40789a:	a802      	add	r0, sp, #8
  40789c:	f840 5d08 	str.w	r5, [r0, #-8]!
  4078a0:	f7ff fdda 	bl	407458 <__lo0bits>
  4078a4:	2800      	cmp	r0, #0
  4078a6:	d134      	bne.n	407912 <__d2b+0x9e>
  4078a8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4078ac:	f8c8 2014 	str.w	r2, [r8, #20]
  4078b0:	2b00      	cmp	r3, #0
  4078b2:	bf0c      	ite	eq
  4078b4:	2101      	moveq	r1, #1
  4078b6:	2102      	movne	r1, #2
  4078b8:	f8c8 3018 	str.w	r3, [r8, #24]
  4078bc:	f8c8 1010 	str.w	r1, [r8, #16]
  4078c0:	b9df      	cbnz	r7, 4078fa <__d2b+0x86>
  4078c2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4078c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4078ca:	6030      	str	r0, [r6, #0]
  4078cc:	6918      	ldr	r0, [r3, #16]
  4078ce:	f7ff fda3 	bl	407418 <__hi0bits>
  4078d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4078d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4078d8:	6018      	str	r0, [r3, #0]
  4078da:	4640      	mov	r0, r8
  4078dc:	b002      	add	sp, #8
  4078de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4078e2:	a801      	add	r0, sp, #4
  4078e4:	f7ff fdb8 	bl	407458 <__lo0bits>
  4078e8:	9b01      	ldr	r3, [sp, #4]
  4078ea:	f8c8 3014 	str.w	r3, [r8, #20]
  4078ee:	2101      	movs	r1, #1
  4078f0:	3020      	adds	r0, #32
  4078f2:	f8c8 1010 	str.w	r1, [r8, #16]
  4078f6:	2f00      	cmp	r7, #0
  4078f8:	d0e3      	beq.n	4078c2 <__d2b+0x4e>
  4078fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4078fc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407900:	4407      	add	r7, r0
  407902:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407906:	6037      	str	r7, [r6, #0]
  407908:	6018      	str	r0, [r3, #0]
  40790a:	4640      	mov	r0, r8
  40790c:	b002      	add	sp, #8
  40790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407912:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407916:	f1c0 0220 	rsb	r2, r0, #32
  40791a:	fa03 f202 	lsl.w	r2, r3, r2
  40791e:	430a      	orrs	r2, r1
  407920:	40c3      	lsrs	r3, r0
  407922:	9301      	str	r3, [sp, #4]
  407924:	f8c8 2014 	str.w	r2, [r8, #20]
  407928:	e7c2      	b.n	4078b0 <__d2b+0x3c>
  40792a:	bf00      	nop

0040792c <_sbrk_r>:
  40792c:	b538      	push	{r3, r4, r5, lr}
  40792e:	4c07      	ldr	r4, [pc, #28]	; (40794c <_sbrk_r+0x20>)
  407930:	2300      	movs	r3, #0
  407932:	4605      	mov	r5, r0
  407934:	4608      	mov	r0, r1
  407936:	6023      	str	r3, [r4, #0]
  407938:	f7fb fdde 	bl	4034f8 <_sbrk>
  40793c:	1c43      	adds	r3, r0, #1
  40793e:	d000      	beq.n	407942 <_sbrk_r+0x16>
  407940:	bd38      	pop	{r3, r4, r5, pc}
  407942:	6823      	ldr	r3, [r4, #0]
  407944:	2b00      	cmp	r3, #0
  407946:	d0fb      	beq.n	407940 <_sbrk_r+0x14>
  407948:	602b      	str	r3, [r5, #0]
  40794a:	bd38      	pop	{r3, r4, r5, pc}
  40794c:	20005d10 	.word	0x20005d10

00407950 <strchr>:
  407950:	b2c9      	uxtb	r1, r1
  407952:	2900      	cmp	r1, #0
  407954:	d041      	beq.n	4079da <strchr+0x8a>
  407956:	0782      	lsls	r2, r0, #30
  407958:	b4f0      	push	{r4, r5, r6, r7}
  40795a:	d067      	beq.n	407a2c <strchr+0xdc>
  40795c:	7803      	ldrb	r3, [r0, #0]
  40795e:	2b00      	cmp	r3, #0
  407960:	d068      	beq.n	407a34 <strchr+0xe4>
  407962:	4299      	cmp	r1, r3
  407964:	d037      	beq.n	4079d6 <strchr+0x86>
  407966:	1c43      	adds	r3, r0, #1
  407968:	e004      	b.n	407974 <strchr+0x24>
  40796a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40796e:	b390      	cbz	r0, 4079d6 <strchr+0x86>
  407970:	4281      	cmp	r1, r0
  407972:	d02f      	beq.n	4079d4 <strchr+0x84>
  407974:	079a      	lsls	r2, r3, #30
  407976:	461c      	mov	r4, r3
  407978:	d1f7      	bne.n	40796a <strchr+0x1a>
  40797a:	6825      	ldr	r5, [r4, #0]
  40797c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  407980:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  407984:	ea83 0605 	eor.w	r6, r3, r5
  407988:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40798c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  407990:	ea20 0006 	bic.w	r0, r0, r6
  407994:	ea22 0205 	bic.w	r2, r2, r5
  407998:	4302      	orrs	r2, r0
  40799a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40799e:	d111      	bne.n	4079c4 <strchr+0x74>
  4079a0:	4620      	mov	r0, r4
  4079a2:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4079a6:	ea83 0706 	eor.w	r7, r3, r6
  4079aa:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4079ae:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4079b2:	ea25 0507 	bic.w	r5, r5, r7
  4079b6:	ea22 0206 	bic.w	r2, r2, r6
  4079ba:	432a      	orrs	r2, r5
  4079bc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4079c0:	d0ef      	beq.n	4079a2 <strchr+0x52>
  4079c2:	4604      	mov	r4, r0
  4079c4:	7820      	ldrb	r0, [r4, #0]
  4079c6:	b918      	cbnz	r0, 4079d0 <strchr+0x80>
  4079c8:	e005      	b.n	4079d6 <strchr+0x86>
  4079ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4079ce:	b110      	cbz	r0, 4079d6 <strchr+0x86>
  4079d0:	4281      	cmp	r1, r0
  4079d2:	d1fa      	bne.n	4079ca <strchr+0x7a>
  4079d4:	4620      	mov	r0, r4
  4079d6:	bcf0      	pop	{r4, r5, r6, r7}
  4079d8:	4770      	bx	lr
  4079da:	0783      	lsls	r3, r0, #30
  4079dc:	d024      	beq.n	407a28 <strchr+0xd8>
  4079de:	7803      	ldrb	r3, [r0, #0]
  4079e0:	2b00      	cmp	r3, #0
  4079e2:	d0f9      	beq.n	4079d8 <strchr+0x88>
  4079e4:	1c43      	adds	r3, r0, #1
  4079e6:	e003      	b.n	4079f0 <strchr+0xa0>
  4079e8:	7802      	ldrb	r2, [r0, #0]
  4079ea:	3301      	adds	r3, #1
  4079ec:	2a00      	cmp	r2, #0
  4079ee:	d0f3      	beq.n	4079d8 <strchr+0x88>
  4079f0:	0799      	lsls	r1, r3, #30
  4079f2:	4618      	mov	r0, r3
  4079f4:	d1f8      	bne.n	4079e8 <strchr+0x98>
  4079f6:	6819      	ldr	r1, [r3, #0]
  4079f8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4079fc:	ea22 0201 	bic.w	r2, r2, r1
  407a00:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407a04:	d108      	bne.n	407a18 <strchr+0xc8>
  407a06:	f853 1f04 	ldr.w	r1, [r3, #4]!
  407a0a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  407a0e:	ea22 0201 	bic.w	r2, r2, r1
  407a12:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  407a16:	d0f6      	beq.n	407a06 <strchr+0xb6>
  407a18:	781a      	ldrb	r2, [r3, #0]
  407a1a:	4618      	mov	r0, r3
  407a1c:	b142      	cbz	r2, 407a30 <strchr+0xe0>
  407a1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407a22:	2b00      	cmp	r3, #0
  407a24:	d1fb      	bne.n	407a1e <strchr+0xce>
  407a26:	4770      	bx	lr
  407a28:	4603      	mov	r3, r0
  407a2a:	e7e4      	b.n	4079f6 <strchr+0xa6>
  407a2c:	4604      	mov	r4, r0
  407a2e:	e7a4      	b.n	40797a <strchr+0x2a>
  407a30:	4618      	mov	r0, r3
  407a32:	4770      	bx	lr
  407a34:	4618      	mov	r0, r3
  407a36:	e7ce      	b.n	4079d6 <strchr+0x86>

00407a38 <__ssprint_r>:
  407a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a3c:	6893      	ldr	r3, [r2, #8]
  407a3e:	b083      	sub	sp, #12
  407a40:	4690      	mov	r8, r2
  407a42:	2b00      	cmp	r3, #0
  407a44:	d070      	beq.n	407b28 <__ssprint_r+0xf0>
  407a46:	4682      	mov	sl, r0
  407a48:	460c      	mov	r4, r1
  407a4a:	6817      	ldr	r7, [r2, #0]
  407a4c:	688d      	ldr	r5, [r1, #8]
  407a4e:	6808      	ldr	r0, [r1, #0]
  407a50:	e042      	b.n	407ad8 <__ssprint_r+0xa0>
  407a52:	89a3      	ldrh	r3, [r4, #12]
  407a54:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407a58:	d02e      	beq.n	407ab8 <__ssprint_r+0x80>
  407a5a:	6965      	ldr	r5, [r4, #20]
  407a5c:	6921      	ldr	r1, [r4, #16]
  407a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407a62:	eba0 0b01 	sub.w	fp, r0, r1
  407a66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  407a6a:	f10b 0001 	add.w	r0, fp, #1
  407a6e:	106d      	asrs	r5, r5, #1
  407a70:	4430      	add	r0, r6
  407a72:	42a8      	cmp	r0, r5
  407a74:	462a      	mov	r2, r5
  407a76:	bf84      	itt	hi
  407a78:	4605      	movhi	r5, r0
  407a7a:	462a      	movhi	r2, r5
  407a7c:	055b      	lsls	r3, r3, #21
  407a7e:	d538      	bpl.n	407af2 <__ssprint_r+0xba>
  407a80:	4611      	mov	r1, r2
  407a82:	4650      	mov	r0, sl
  407a84:	f7ff f916 	bl	406cb4 <_malloc_r>
  407a88:	2800      	cmp	r0, #0
  407a8a:	d03c      	beq.n	407b06 <__ssprint_r+0xce>
  407a8c:	465a      	mov	r2, fp
  407a8e:	6921      	ldr	r1, [r4, #16]
  407a90:	9001      	str	r0, [sp, #4]
  407a92:	f7fc fac1 	bl	404018 <memcpy>
  407a96:	89a2      	ldrh	r2, [r4, #12]
  407a98:	9b01      	ldr	r3, [sp, #4]
  407a9a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407aa2:	81a2      	strh	r2, [r4, #12]
  407aa4:	eba5 020b 	sub.w	r2, r5, fp
  407aa8:	eb03 000b 	add.w	r0, r3, fp
  407aac:	6165      	str	r5, [r4, #20]
  407aae:	6123      	str	r3, [r4, #16]
  407ab0:	6020      	str	r0, [r4, #0]
  407ab2:	60a2      	str	r2, [r4, #8]
  407ab4:	4635      	mov	r5, r6
  407ab6:	46b3      	mov	fp, r6
  407ab8:	465a      	mov	r2, fp
  407aba:	4649      	mov	r1, r9
  407abc:	f000 fa18 	bl	407ef0 <memmove>
  407ac0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407ac4:	68a2      	ldr	r2, [r4, #8]
  407ac6:	6820      	ldr	r0, [r4, #0]
  407ac8:	1b55      	subs	r5, r2, r5
  407aca:	4458      	add	r0, fp
  407acc:	1b9e      	subs	r6, r3, r6
  407ace:	60a5      	str	r5, [r4, #8]
  407ad0:	6020      	str	r0, [r4, #0]
  407ad2:	f8c8 6008 	str.w	r6, [r8, #8]
  407ad6:	b33e      	cbz	r6, 407b28 <__ssprint_r+0xf0>
  407ad8:	687e      	ldr	r6, [r7, #4]
  407ada:	463b      	mov	r3, r7
  407adc:	3708      	adds	r7, #8
  407ade:	2e00      	cmp	r6, #0
  407ae0:	d0fa      	beq.n	407ad8 <__ssprint_r+0xa0>
  407ae2:	42ae      	cmp	r6, r5
  407ae4:	f8d3 9000 	ldr.w	r9, [r3]
  407ae8:	46ab      	mov	fp, r5
  407aea:	d2b2      	bcs.n	407a52 <__ssprint_r+0x1a>
  407aec:	4635      	mov	r5, r6
  407aee:	46b3      	mov	fp, r6
  407af0:	e7e2      	b.n	407ab8 <__ssprint_r+0x80>
  407af2:	4650      	mov	r0, sl
  407af4:	f000 fa60 	bl	407fb8 <_realloc_r>
  407af8:	4603      	mov	r3, r0
  407afa:	2800      	cmp	r0, #0
  407afc:	d1d2      	bne.n	407aa4 <__ssprint_r+0x6c>
  407afe:	6921      	ldr	r1, [r4, #16]
  407b00:	4650      	mov	r0, sl
  407b02:	f000 f8f9 	bl	407cf8 <_free_r>
  407b06:	230c      	movs	r3, #12
  407b08:	f8ca 3000 	str.w	r3, [sl]
  407b0c:	89a3      	ldrh	r3, [r4, #12]
  407b0e:	2200      	movs	r2, #0
  407b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407b14:	f04f 30ff 	mov.w	r0, #4294967295
  407b18:	81a3      	strh	r3, [r4, #12]
  407b1a:	f8c8 2008 	str.w	r2, [r8, #8]
  407b1e:	f8c8 2004 	str.w	r2, [r8, #4]
  407b22:	b003      	add	sp, #12
  407b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407b28:	2000      	movs	r0, #0
  407b2a:	f8c8 0004 	str.w	r0, [r8, #4]
  407b2e:	b003      	add	sp, #12
  407b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407b34 <__register_exitproc>:
  407b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407b38:	4d2c      	ldr	r5, [pc, #176]	; (407bec <__register_exitproc+0xb8>)
  407b3a:	4606      	mov	r6, r0
  407b3c:	6828      	ldr	r0, [r5, #0]
  407b3e:	4698      	mov	r8, r3
  407b40:	460f      	mov	r7, r1
  407b42:	4691      	mov	r9, r2
  407b44:	f7ff f8b2 	bl	406cac <__retarget_lock_acquire_recursive>
  407b48:	4b29      	ldr	r3, [pc, #164]	; (407bf0 <__register_exitproc+0xbc>)
  407b4a:	681c      	ldr	r4, [r3, #0]
  407b4c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407b50:	2b00      	cmp	r3, #0
  407b52:	d03e      	beq.n	407bd2 <__register_exitproc+0x9e>
  407b54:	685a      	ldr	r2, [r3, #4]
  407b56:	2a1f      	cmp	r2, #31
  407b58:	dc1c      	bgt.n	407b94 <__register_exitproc+0x60>
  407b5a:	f102 0e01 	add.w	lr, r2, #1
  407b5e:	b176      	cbz	r6, 407b7e <__register_exitproc+0x4a>
  407b60:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407b64:	2401      	movs	r4, #1
  407b66:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  407b6a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407b6e:	4094      	lsls	r4, r2
  407b70:	4320      	orrs	r0, r4
  407b72:	2e02      	cmp	r6, #2
  407b74:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407b78:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407b7c:	d023      	beq.n	407bc6 <__register_exitproc+0x92>
  407b7e:	3202      	adds	r2, #2
  407b80:	f8c3 e004 	str.w	lr, [r3, #4]
  407b84:	6828      	ldr	r0, [r5, #0]
  407b86:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407b8a:	f7ff f891 	bl	406cb0 <__retarget_lock_release_recursive>
  407b8e:	2000      	movs	r0, #0
  407b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407b94:	4b17      	ldr	r3, [pc, #92]	; (407bf4 <__register_exitproc+0xc0>)
  407b96:	b30b      	cbz	r3, 407bdc <__register_exitproc+0xa8>
  407b98:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407b9c:	f3af 8000 	nop.w
  407ba0:	4603      	mov	r3, r0
  407ba2:	b1d8      	cbz	r0, 407bdc <__register_exitproc+0xa8>
  407ba4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407ba8:	6002      	str	r2, [r0, #0]
  407baa:	2100      	movs	r1, #0
  407bac:	6041      	str	r1, [r0, #4]
  407bae:	460a      	mov	r2, r1
  407bb0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407bb4:	f04f 0e01 	mov.w	lr, #1
  407bb8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407bbc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407bc0:	2e00      	cmp	r6, #0
  407bc2:	d0dc      	beq.n	407b7e <__register_exitproc+0x4a>
  407bc4:	e7cc      	b.n	407b60 <__register_exitproc+0x2c>
  407bc6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407bca:	430c      	orrs	r4, r1
  407bcc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407bd0:	e7d5      	b.n	407b7e <__register_exitproc+0x4a>
  407bd2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  407bd6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407bda:	e7bb      	b.n	407b54 <__register_exitproc+0x20>
  407bdc:	6828      	ldr	r0, [r5, #0]
  407bde:	f7ff f867 	bl	406cb0 <__retarget_lock_release_recursive>
  407be2:	f04f 30ff 	mov.w	r0, #4294967295
  407be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407bea:	bf00      	nop
  407bec:	20000440 	.word	0x20000440
  407bf0:	00409abc 	.word	0x00409abc
  407bf4:	00000000 	.word	0x00000000

00407bf8 <_calloc_r>:
  407bf8:	b510      	push	{r4, lr}
  407bfa:	fb02 f101 	mul.w	r1, r2, r1
  407bfe:	f7ff f859 	bl	406cb4 <_malloc_r>
  407c02:	4604      	mov	r4, r0
  407c04:	b1d8      	cbz	r0, 407c3e <_calloc_r+0x46>
  407c06:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407c0a:	f022 0203 	bic.w	r2, r2, #3
  407c0e:	3a04      	subs	r2, #4
  407c10:	2a24      	cmp	r2, #36	; 0x24
  407c12:	d818      	bhi.n	407c46 <_calloc_r+0x4e>
  407c14:	2a13      	cmp	r2, #19
  407c16:	d914      	bls.n	407c42 <_calloc_r+0x4a>
  407c18:	2300      	movs	r3, #0
  407c1a:	2a1b      	cmp	r2, #27
  407c1c:	6003      	str	r3, [r0, #0]
  407c1e:	6043      	str	r3, [r0, #4]
  407c20:	d916      	bls.n	407c50 <_calloc_r+0x58>
  407c22:	2a24      	cmp	r2, #36	; 0x24
  407c24:	6083      	str	r3, [r0, #8]
  407c26:	60c3      	str	r3, [r0, #12]
  407c28:	bf11      	iteee	ne
  407c2a:	f100 0210 	addne.w	r2, r0, #16
  407c2e:	6103      	streq	r3, [r0, #16]
  407c30:	6143      	streq	r3, [r0, #20]
  407c32:	f100 0218 	addeq.w	r2, r0, #24
  407c36:	2300      	movs	r3, #0
  407c38:	6013      	str	r3, [r2, #0]
  407c3a:	6053      	str	r3, [r2, #4]
  407c3c:	6093      	str	r3, [r2, #8]
  407c3e:	4620      	mov	r0, r4
  407c40:	bd10      	pop	{r4, pc}
  407c42:	4602      	mov	r2, r0
  407c44:	e7f7      	b.n	407c36 <_calloc_r+0x3e>
  407c46:	2100      	movs	r1, #0
  407c48:	f7fc fa80 	bl	40414c <memset>
  407c4c:	4620      	mov	r0, r4
  407c4e:	bd10      	pop	{r4, pc}
  407c50:	f100 0208 	add.w	r2, r0, #8
  407c54:	e7ef      	b.n	407c36 <_calloc_r+0x3e>
  407c56:	bf00      	nop

00407c58 <_malloc_trim_r>:
  407c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407c5a:	4f24      	ldr	r7, [pc, #144]	; (407cec <_malloc_trim_r+0x94>)
  407c5c:	460c      	mov	r4, r1
  407c5e:	4606      	mov	r6, r0
  407c60:	f7ff fb5e 	bl	407320 <__malloc_lock>
  407c64:	68bb      	ldr	r3, [r7, #8]
  407c66:	685d      	ldr	r5, [r3, #4]
  407c68:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407c6c:	310f      	adds	r1, #15
  407c6e:	f025 0503 	bic.w	r5, r5, #3
  407c72:	4429      	add	r1, r5
  407c74:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407c78:	f021 010f 	bic.w	r1, r1, #15
  407c7c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407c80:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407c84:	db07      	blt.n	407c96 <_malloc_trim_r+0x3e>
  407c86:	2100      	movs	r1, #0
  407c88:	4630      	mov	r0, r6
  407c8a:	f7ff fe4f 	bl	40792c <_sbrk_r>
  407c8e:	68bb      	ldr	r3, [r7, #8]
  407c90:	442b      	add	r3, r5
  407c92:	4298      	cmp	r0, r3
  407c94:	d004      	beq.n	407ca0 <_malloc_trim_r+0x48>
  407c96:	4630      	mov	r0, r6
  407c98:	f7ff fb48 	bl	40732c <__malloc_unlock>
  407c9c:	2000      	movs	r0, #0
  407c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ca0:	4261      	negs	r1, r4
  407ca2:	4630      	mov	r0, r6
  407ca4:	f7ff fe42 	bl	40792c <_sbrk_r>
  407ca8:	3001      	adds	r0, #1
  407caa:	d00d      	beq.n	407cc8 <_malloc_trim_r+0x70>
  407cac:	4b10      	ldr	r3, [pc, #64]	; (407cf0 <_malloc_trim_r+0x98>)
  407cae:	68ba      	ldr	r2, [r7, #8]
  407cb0:	6819      	ldr	r1, [r3, #0]
  407cb2:	1b2d      	subs	r5, r5, r4
  407cb4:	f045 0501 	orr.w	r5, r5, #1
  407cb8:	4630      	mov	r0, r6
  407cba:	1b09      	subs	r1, r1, r4
  407cbc:	6055      	str	r5, [r2, #4]
  407cbe:	6019      	str	r1, [r3, #0]
  407cc0:	f7ff fb34 	bl	40732c <__malloc_unlock>
  407cc4:	2001      	movs	r0, #1
  407cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407cc8:	2100      	movs	r1, #0
  407cca:	4630      	mov	r0, r6
  407ccc:	f7ff fe2e 	bl	40792c <_sbrk_r>
  407cd0:	68ba      	ldr	r2, [r7, #8]
  407cd2:	1a83      	subs	r3, r0, r2
  407cd4:	2b0f      	cmp	r3, #15
  407cd6:	ddde      	ble.n	407c96 <_malloc_trim_r+0x3e>
  407cd8:	4c06      	ldr	r4, [pc, #24]	; (407cf4 <_malloc_trim_r+0x9c>)
  407cda:	4905      	ldr	r1, [pc, #20]	; (407cf0 <_malloc_trim_r+0x98>)
  407cdc:	6824      	ldr	r4, [r4, #0]
  407cde:	f043 0301 	orr.w	r3, r3, #1
  407ce2:	1b00      	subs	r0, r0, r4
  407ce4:	6053      	str	r3, [r2, #4]
  407ce6:	6008      	str	r0, [r1, #0]
  407ce8:	e7d5      	b.n	407c96 <_malloc_trim_r+0x3e>
  407cea:	bf00      	nop
  407cec:	20000444 	.word	0x20000444
  407cf0:	20000a8c 	.word	0x20000a8c
  407cf4:	2000084c 	.word	0x2000084c

00407cf8 <_free_r>:
  407cf8:	2900      	cmp	r1, #0
  407cfa:	d044      	beq.n	407d86 <_free_r+0x8e>
  407cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d00:	460d      	mov	r5, r1
  407d02:	4680      	mov	r8, r0
  407d04:	f7ff fb0c 	bl	407320 <__malloc_lock>
  407d08:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407d0c:	4969      	ldr	r1, [pc, #420]	; (407eb4 <_free_r+0x1bc>)
  407d0e:	f027 0301 	bic.w	r3, r7, #1
  407d12:	f1a5 0408 	sub.w	r4, r5, #8
  407d16:	18e2      	adds	r2, r4, r3
  407d18:	688e      	ldr	r6, [r1, #8]
  407d1a:	6850      	ldr	r0, [r2, #4]
  407d1c:	42b2      	cmp	r2, r6
  407d1e:	f020 0003 	bic.w	r0, r0, #3
  407d22:	d05e      	beq.n	407de2 <_free_r+0xea>
  407d24:	07fe      	lsls	r6, r7, #31
  407d26:	6050      	str	r0, [r2, #4]
  407d28:	d40b      	bmi.n	407d42 <_free_r+0x4a>
  407d2a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407d2e:	1be4      	subs	r4, r4, r7
  407d30:	f101 0e08 	add.w	lr, r1, #8
  407d34:	68a5      	ldr	r5, [r4, #8]
  407d36:	4575      	cmp	r5, lr
  407d38:	443b      	add	r3, r7
  407d3a:	d06d      	beq.n	407e18 <_free_r+0x120>
  407d3c:	68e7      	ldr	r7, [r4, #12]
  407d3e:	60ef      	str	r7, [r5, #12]
  407d40:	60bd      	str	r5, [r7, #8]
  407d42:	1815      	adds	r5, r2, r0
  407d44:	686d      	ldr	r5, [r5, #4]
  407d46:	07ed      	lsls	r5, r5, #31
  407d48:	d53e      	bpl.n	407dc8 <_free_r+0xd0>
  407d4a:	f043 0201 	orr.w	r2, r3, #1
  407d4e:	6062      	str	r2, [r4, #4]
  407d50:	50e3      	str	r3, [r4, r3]
  407d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407d56:	d217      	bcs.n	407d88 <_free_r+0x90>
  407d58:	08db      	lsrs	r3, r3, #3
  407d5a:	1c58      	adds	r0, r3, #1
  407d5c:	109a      	asrs	r2, r3, #2
  407d5e:	684d      	ldr	r5, [r1, #4]
  407d60:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407d64:	60a7      	str	r7, [r4, #8]
  407d66:	2301      	movs	r3, #1
  407d68:	4093      	lsls	r3, r2
  407d6a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407d6e:	432b      	orrs	r3, r5
  407d70:	3a08      	subs	r2, #8
  407d72:	60e2      	str	r2, [r4, #12]
  407d74:	604b      	str	r3, [r1, #4]
  407d76:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407d7a:	60fc      	str	r4, [r7, #12]
  407d7c:	4640      	mov	r0, r8
  407d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407d82:	f7ff bad3 	b.w	40732c <__malloc_unlock>
  407d86:	4770      	bx	lr
  407d88:	0a5a      	lsrs	r2, r3, #9
  407d8a:	2a04      	cmp	r2, #4
  407d8c:	d852      	bhi.n	407e34 <_free_r+0x13c>
  407d8e:	099a      	lsrs	r2, r3, #6
  407d90:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407d94:	00ff      	lsls	r7, r7, #3
  407d96:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407d9a:	19c8      	adds	r0, r1, r7
  407d9c:	59ca      	ldr	r2, [r1, r7]
  407d9e:	3808      	subs	r0, #8
  407da0:	4290      	cmp	r0, r2
  407da2:	d04f      	beq.n	407e44 <_free_r+0x14c>
  407da4:	6851      	ldr	r1, [r2, #4]
  407da6:	f021 0103 	bic.w	r1, r1, #3
  407daa:	428b      	cmp	r3, r1
  407dac:	d232      	bcs.n	407e14 <_free_r+0x11c>
  407dae:	6892      	ldr	r2, [r2, #8]
  407db0:	4290      	cmp	r0, r2
  407db2:	d1f7      	bne.n	407da4 <_free_r+0xac>
  407db4:	68c3      	ldr	r3, [r0, #12]
  407db6:	60a0      	str	r0, [r4, #8]
  407db8:	60e3      	str	r3, [r4, #12]
  407dba:	609c      	str	r4, [r3, #8]
  407dbc:	60c4      	str	r4, [r0, #12]
  407dbe:	4640      	mov	r0, r8
  407dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407dc4:	f7ff bab2 	b.w	40732c <__malloc_unlock>
  407dc8:	6895      	ldr	r5, [r2, #8]
  407dca:	4f3b      	ldr	r7, [pc, #236]	; (407eb8 <_free_r+0x1c0>)
  407dcc:	42bd      	cmp	r5, r7
  407dce:	4403      	add	r3, r0
  407dd0:	d040      	beq.n	407e54 <_free_r+0x15c>
  407dd2:	68d0      	ldr	r0, [r2, #12]
  407dd4:	60e8      	str	r0, [r5, #12]
  407dd6:	f043 0201 	orr.w	r2, r3, #1
  407dda:	6085      	str	r5, [r0, #8]
  407ddc:	6062      	str	r2, [r4, #4]
  407dde:	50e3      	str	r3, [r4, r3]
  407de0:	e7b7      	b.n	407d52 <_free_r+0x5a>
  407de2:	07ff      	lsls	r7, r7, #31
  407de4:	4403      	add	r3, r0
  407de6:	d407      	bmi.n	407df8 <_free_r+0x100>
  407de8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407dec:	1aa4      	subs	r4, r4, r2
  407dee:	4413      	add	r3, r2
  407df0:	68a0      	ldr	r0, [r4, #8]
  407df2:	68e2      	ldr	r2, [r4, #12]
  407df4:	60c2      	str	r2, [r0, #12]
  407df6:	6090      	str	r0, [r2, #8]
  407df8:	4a30      	ldr	r2, [pc, #192]	; (407ebc <_free_r+0x1c4>)
  407dfa:	6812      	ldr	r2, [r2, #0]
  407dfc:	f043 0001 	orr.w	r0, r3, #1
  407e00:	4293      	cmp	r3, r2
  407e02:	6060      	str	r0, [r4, #4]
  407e04:	608c      	str	r4, [r1, #8]
  407e06:	d3b9      	bcc.n	407d7c <_free_r+0x84>
  407e08:	4b2d      	ldr	r3, [pc, #180]	; (407ec0 <_free_r+0x1c8>)
  407e0a:	4640      	mov	r0, r8
  407e0c:	6819      	ldr	r1, [r3, #0]
  407e0e:	f7ff ff23 	bl	407c58 <_malloc_trim_r>
  407e12:	e7b3      	b.n	407d7c <_free_r+0x84>
  407e14:	4610      	mov	r0, r2
  407e16:	e7cd      	b.n	407db4 <_free_r+0xbc>
  407e18:	1811      	adds	r1, r2, r0
  407e1a:	6849      	ldr	r1, [r1, #4]
  407e1c:	07c9      	lsls	r1, r1, #31
  407e1e:	d444      	bmi.n	407eaa <_free_r+0x1b2>
  407e20:	6891      	ldr	r1, [r2, #8]
  407e22:	68d2      	ldr	r2, [r2, #12]
  407e24:	60ca      	str	r2, [r1, #12]
  407e26:	4403      	add	r3, r0
  407e28:	f043 0001 	orr.w	r0, r3, #1
  407e2c:	6091      	str	r1, [r2, #8]
  407e2e:	6060      	str	r0, [r4, #4]
  407e30:	50e3      	str	r3, [r4, r3]
  407e32:	e7a3      	b.n	407d7c <_free_r+0x84>
  407e34:	2a14      	cmp	r2, #20
  407e36:	d816      	bhi.n	407e66 <_free_r+0x16e>
  407e38:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407e3c:	00ff      	lsls	r7, r7, #3
  407e3e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407e42:	e7aa      	b.n	407d9a <_free_r+0xa2>
  407e44:	10aa      	asrs	r2, r5, #2
  407e46:	2301      	movs	r3, #1
  407e48:	684d      	ldr	r5, [r1, #4]
  407e4a:	4093      	lsls	r3, r2
  407e4c:	432b      	orrs	r3, r5
  407e4e:	604b      	str	r3, [r1, #4]
  407e50:	4603      	mov	r3, r0
  407e52:	e7b0      	b.n	407db6 <_free_r+0xbe>
  407e54:	f043 0201 	orr.w	r2, r3, #1
  407e58:	614c      	str	r4, [r1, #20]
  407e5a:	610c      	str	r4, [r1, #16]
  407e5c:	60e5      	str	r5, [r4, #12]
  407e5e:	60a5      	str	r5, [r4, #8]
  407e60:	6062      	str	r2, [r4, #4]
  407e62:	50e3      	str	r3, [r4, r3]
  407e64:	e78a      	b.n	407d7c <_free_r+0x84>
  407e66:	2a54      	cmp	r2, #84	; 0x54
  407e68:	d806      	bhi.n	407e78 <_free_r+0x180>
  407e6a:	0b1a      	lsrs	r2, r3, #12
  407e6c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407e70:	00ff      	lsls	r7, r7, #3
  407e72:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407e76:	e790      	b.n	407d9a <_free_r+0xa2>
  407e78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407e7c:	d806      	bhi.n	407e8c <_free_r+0x194>
  407e7e:	0bda      	lsrs	r2, r3, #15
  407e80:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407e84:	00ff      	lsls	r7, r7, #3
  407e86:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407e8a:	e786      	b.n	407d9a <_free_r+0xa2>
  407e8c:	f240 5054 	movw	r0, #1364	; 0x554
  407e90:	4282      	cmp	r2, r0
  407e92:	d806      	bhi.n	407ea2 <_free_r+0x1aa>
  407e94:	0c9a      	lsrs	r2, r3, #18
  407e96:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407e9a:	00ff      	lsls	r7, r7, #3
  407e9c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407ea0:	e77b      	b.n	407d9a <_free_r+0xa2>
  407ea2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407ea6:	257e      	movs	r5, #126	; 0x7e
  407ea8:	e777      	b.n	407d9a <_free_r+0xa2>
  407eaa:	f043 0101 	orr.w	r1, r3, #1
  407eae:	6061      	str	r1, [r4, #4]
  407eb0:	6013      	str	r3, [r2, #0]
  407eb2:	e763      	b.n	407d7c <_free_r+0x84>
  407eb4:	20000444 	.word	0x20000444
  407eb8:	2000044c 	.word	0x2000044c
  407ebc:	20000850 	.word	0x20000850
  407ec0:	20000abc 	.word	0x20000abc

00407ec4 <__ascii_mbtowc>:
  407ec4:	b082      	sub	sp, #8
  407ec6:	b149      	cbz	r1, 407edc <__ascii_mbtowc+0x18>
  407ec8:	b15a      	cbz	r2, 407ee2 <__ascii_mbtowc+0x1e>
  407eca:	b16b      	cbz	r3, 407ee8 <__ascii_mbtowc+0x24>
  407ecc:	7813      	ldrb	r3, [r2, #0]
  407ece:	600b      	str	r3, [r1, #0]
  407ed0:	7812      	ldrb	r2, [r2, #0]
  407ed2:	1c10      	adds	r0, r2, #0
  407ed4:	bf18      	it	ne
  407ed6:	2001      	movne	r0, #1
  407ed8:	b002      	add	sp, #8
  407eda:	4770      	bx	lr
  407edc:	a901      	add	r1, sp, #4
  407ede:	2a00      	cmp	r2, #0
  407ee0:	d1f3      	bne.n	407eca <__ascii_mbtowc+0x6>
  407ee2:	4610      	mov	r0, r2
  407ee4:	b002      	add	sp, #8
  407ee6:	4770      	bx	lr
  407ee8:	f06f 0001 	mvn.w	r0, #1
  407eec:	e7f4      	b.n	407ed8 <__ascii_mbtowc+0x14>
  407eee:	bf00      	nop

00407ef0 <memmove>:
  407ef0:	4288      	cmp	r0, r1
  407ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
  407ef4:	d90d      	bls.n	407f12 <memmove+0x22>
  407ef6:	188b      	adds	r3, r1, r2
  407ef8:	4298      	cmp	r0, r3
  407efa:	d20a      	bcs.n	407f12 <memmove+0x22>
  407efc:	1884      	adds	r4, r0, r2
  407efe:	2a00      	cmp	r2, #0
  407f00:	d051      	beq.n	407fa6 <memmove+0xb6>
  407f02:	4622      	mov	r2, r4
  407f04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407f08:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407f0c:	4299      	cmp	r1, r3
  407f0e:	d1f9      	bne.n	407f04 <memmove+0x14>
  407f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407f12:	2a0f      	cmp	r2, #15
  407f14:	d948      	bls.n	407fa8 <memmove+0xb8>
  407f16:	ea41 0300 	orr.w	r3, r1, r0
  407f1a:	079b      	lsls	r3, r3, #30
  407f1c:	d146      	bne.n	407fac <memmove+0xbc>
  407f1e:	f100 0410 	add.w	r4, r0, #16
  407f22:	f101 0310 	add.w	r3, r1, #16
  407f26:	4615      	mov	r5, r2
  407f28:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407f2c:	f844 6c10 	str.w	r6, [r4, #-16]
  407f30:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407f34:	f844 6c0c 	str.w	r6, [r4, #-12]
  407f38:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407f3c:	f844 6c08 	str.w	r6, [r4, #-8]
  407f40:	3d10      	subs	r5, #16
  407f42:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407f46:	f844 6c04 	str.w	r6, [r4, #-4]
  407f4a:	2d0f      	cmp	r5, #15
  407f4c:	f103 0310 	add.w	r3, r3, #16
  407f50:	f104 0410 	add.w	r4, r4, #16
  407f54:	d8e8      	bhi.n	407f28 <memmove+0x38>
  407f56:	f1a2 0310 	sub.w	r3, r2, #16
  407f5a:	f023 030f 	bic.w	r3, r3, #15
  407f5e:	f002 0e0f 	and.w	lr, r2, #15
  407f62:	3310      	adds	r3, #16
  407f64:	f1be 0f03 	cmp.w	lr, #3
  407f68:	4419      	add	r1, r3
  407f6a:	4403      	add	r3, r0
  407f6c:	d921      	bls.n	407fb2 <memmove+0xc2>
  407f6e:	1f1e      	subs	r6, r3, #4
  407f70:	460d      	mov	r5, r1
  407f72:	4674      	mov	r4, lr
  407f74:	3c04      	subs	r4, #4
  407f76:	f855 7b04 	ldr.w	r7, [r5], #4
  407f7a:	f846 7f04 	str.w	r7, [r6, #4]!
  407f7e:	2c03      	cmp	r4, #3
  407f80:	d8f8      	bhi.n	407f74 <memmove+0x84>
  407f82:	f1ae 0404 	sub.w	r4, lr, #4
  407f86:	f024 0403 	bic.w	r4, r4, #3
  407f8a:	3404      	adds	r4, #4
  407f8c:	4421      	add	r1, r4
  407f8e:	4423      	add	r3, r4
  407f90:	f002 0203 	and.w	r2, r2, #3
  407f94:	b162      	cbz	r2, 407fb0 <memmove+0xc0>
  407f96:	3b01      	subs	r3, #1
  407f98:	440a      	add	r2, r1
  407f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
  407f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407fa2:	428a      	cmp	r2, r1
  407fa4:	d1f9      	bne.n	407f9a <memmove+0xaa>
  407fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407fa8:	4603      	mov	r3, r0
  407faa:	e7f3      	b.n	407f94 <memmove+0xa4>
  407fac:	4603      	mov	r3, r0
  407fae:	e7f2      	b.n	407f96 <memmove+0xa6>
  407fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407fb2:	4672      	mov	r2, lr
  407fb4:	e7ee      	b.n	407f94 <memmove+0xa4>
  407fb6:	bf00      	nop

00407fb8 <_realloc_r>:
  407fb8:	2900      	cmp	r1, #0
  407fba:	f000 8095 	beq.w	4080e8 <_realloc_r+0x130>
  407fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fc2:	460d      	mov	r5, r1
  407fc4:	4616      	mov	r6, r2
  407fc6:	b083      	sub	sp, #12
  407fc8:	4680      	mov	r8, r0
  407fca:	f106 070b 	add.w	r7, r6, #11
  407fce:	f7ff f9a7 	bl	407320 <__malloc_lock>
  407fd2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407fd6:	2f16      	cmp	r7, #22
  407fd8:	f02e 0403 	bic.w	r4, lr, #3
  407fdc:	f1a5 0908 	sub.w	r9, r5, #8
  407fe0:	d83c      	bhi.n	40805c <_realloc_r+0xa4>
  407fe2:	2210      	movs	r2, #16
  407fe4:	4617      	mov	r7, r2
  407fe6:	42be      	cmp	r6, r7
  407fe8:	d83d      	bhi.n	408066 <_realloc_r+0xae>
  407fea:	4294      	cmp	r4, r2
  407fec:	da43      	bge.n	408076 <_realloc_r+0xbe>
  407fee:	4bc4      	ldr	r3, [pc, #784]	; (408300 <_realloc_r+0x348>)
  407ff0:	6899      	ldr	r1, [r3, #8]
  407ff2:	eb09 0004 	add.w	r0, r9, r4
  407ff6:	4288      	cmp	r0, r1
  407ff8:	f000 80b4 	beq.w	408164 <_realloc_r+0x1ac>
  407ffc:	6843      	ldr	r3, [r0, #4]
  407ffe:	f023 0101 	bic.w	r1, r3, #1
  408002:	4401      	add	r1, r0
  408004:	6849      	ldr	r1, [r1, #4]
  408006:	07c9      	lsls	r1, r1, #31
  408008:	d54c      	bpl.n	4080a4 <_realloc_r+0xec>
  40800a:	f01e 0f01 	tst.w	lr, #1
  40800e:	f000 809b 	beq.w	408148 <_realloc_r+0x190>
  408012:	4631      	mov	r1, r6
  408014:	4640      	mov	r0, r8
  408016:	f7fe fe4d 	bl	406cb4 <_malloc_r>
  40801a:	4606      	mov	r6, r0
  40801c:	2800      	cmp	r0, #0
  40801e:	d03a      	beq.n	408096 <_realloc_r+0xde>
  408020:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408024:	f023 0301 	bic.w	r3, r3, #1
  408028:	444b      	add	r3, r9
  40802a:	f1a0 0208 	sub.w	r2, r0, #8
  40802e:	429a      	cmp	r2, r3
  408030:	f000 8121 	beq.w	408276 <_realloc_r+0x2be>
  408034:	1f22      	subs	r2, r4, #4
  408036:	2a24      	cmp	r2, #36	; 0x24
  408038:	f200 8107 	bhi.w	40824a <_realloc_r+0x292>
  40803c:	2a13      	cmp	r2, #19
  40803e:	f200 80db 	bhi.w	4081f8 <_realloc_r+0x240>
  408042:	4603      	mov	r3, r0
  408044:	462a      	mov	r2, r5
  408046:	6811      	ldr	r1, [r2, #0]
  408048:	6019      	str	r1, [r3, #0]
  40804a:	6851      	ldr	r1, [r2, #4]
  40804c:	6059      	str	r1, [r3, #4]
  40804e:	6892      	ldr	r2, [r2, #8]
  408050:	609a      	str	r2, [r3, #8]
  408052:	4629      	mov	r1, r5
  408054:	4640      	mov	r0, r8
  408056:	f7ff fe4f 	bl	407cf8 <_free_r>
  40805a:	e01c      	b.n	408096 <_realloc_r+0xde>
  40805c:	f027 0707 	bic.w	r7, r7, #7
  408060:	2f00      	cmp	r7, #0
  408062:	463a      	mov	r2, r7
  408064:	dabf      	bge.n	407fe6 <_realloc_r+0x2e>
  408066:	2600      	movs	r6, #0
  408068:	230c      	movs	r3, #12
  40806a:	4630      	mov	r0, r6
  40806c:	f8c8 3000 	str.w	r3, [r8]
  408070:	b003      	add	sp, #12
  408072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408076:	462e      	mov	r6, r5
  408078:	1be3      	subs	r3, r4, r7
  40807a:	2b0f      	cmp	r3, #15
  40807c:	d81e      	bhi.n	4080bc <_realloc_r+0x104>
  40807e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408082:	f003 0301 	and.w	r3, r3, #1
  408086:	4323      	orrs	r3, r4
  408088:	444c      	add	r4, r9
  40808a:	f8c9 3004 	str.w	r3, [r9, #4]
  40808e:	6863      	ldr	r3, [r4, #4]
  408090:	f043 0301 	orr.w	r3, r3, #1
  408094:	6063      	str	r3, [r4, #4]
  408096:	4640      	mov	r0, r8
  408098:	f7ff f948 	bl	40732c <__malloc_unlock>
  40809c:	4630      	mov	r0, r6
  40809e:	b003      	add	sp, #12
  4080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080a4:	f023 0303 	bic.w	r3, r3, #3
  4080a8:	18e1      	adds	r1, r4, r3
  4080aa:	4291      	cmp	r1, r2
  4080ac:	db1f      	blt.n	4080ee <_realloc_r+0x136>
  4080ae:	68c3      	ldr	r3, [r0, #12]
  4080b0:	6882      	ldr	r2, [r0, #8]
  4080b2:	462e      	mov	r6, r5
  4080b4:	60d3      	str	r3, [r2, #12]
  4080b6:	460c      	mov	r4, r1
  4080b8:	609a      	str	r2, [r3, #8]
  4080ba:	e7dd      	b.n	408078 <_realloc_r+0xc0>
  4080bc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4080c0:	eb09 0107 	add.w	r1, r9, r7
  4080c4:	f002 0201 	and.w	r2, r2, #1
  4080c8:	444c      	add	r4, r9
  4080ca:	f043 0301 	orr.w	r3, r3, #1
  4080ce:	4317      	orrs	r7, r2
  4080d0:	f8c9 7004 	str.w	r7, [r9, #4]
  4080d4:	604b      	str	r3, [r1, #4]
  4080d6:	6863      	ldr	r3, [r4, #4]
  4080d8:	f043 0301 	orr.w	r3, r3, #1
  4080dc:	3108      	adds	r1, #8
  4080de:	6063      	str	r3, [r4, #4]
  4080e0:	4640      	mov	r0, r8
  4080e2:	f7ff fe09 	bl	407cf8 <_free_r>
  4080e6:	e7d6      	b.n	408096 <_realloc_r+0xde>
  4080e8:	4611      	mov	r1, r2
  4080ea:	f7fe bde3 	b.w	406cb4 <_malloc_r>
  4080ee:	f01e 0f01 	tst.w	lr, #1
  4080f2:	d18e      	bne.n	408012 <_realloc_r+0x5a>
  4080f4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4080f8:	eba9 0a01 	sub.w	sl, r9, r1
  4080fc:	f8da 1004 	ldr.w	r1, [sl, #4]
  408100:	f021 0103 	bic.w	r1, r1, #3
  408104:	440b      	add	r3, r1
  408106:	4423      	add	r3, r4
  408108:	4293      	cmp	r3, r2
  40810a:	db25      	blt.n	408158 <_realloc_r+0x1a0>
  40810c:	68c2      	ldr	r2, [r0, #12]
  40810e:	6881      	ldr	r1, [r0, #8]
  408110:	4656      	mov	r6, sl
  408112:	60ca      	str	r2, [r1, #12]
  408114:	6091      	str	r1, [r2, #8]
  408116:	f8da 100c 	ldr.w	r1, [sl, #12]
  40811a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40811e:	1f22      	subs	r2, r4, #4
  408120:	2a24      	cmp	r2, #36	; 0x24
  408122:	60c1      	str	r1, [r0, #12]
  408124:	6088      	str	r0, [r1, #8]
  408126:	f200 8094 	bhi.w	408252 <_realloc_r+0x29a>
  40812a:	2a13      	cmp	r2, #19
  40812c:	d96f      	bls.n	40820e <_realloc_r+0x256>
  40812e:	6829      	ldr	r1, [r5, #0]
  408130:	f8ca 1008 	str.w	r1, [sl, #8]
  408134:	6869      	ldr	r1, [r5, #4]
  408136:	f8ca 100c 	str.w	r1, [sl, #12]
  40813a:	2a1b      	cmp	r2, #27
  40813c:	f200 80a2 	bhi.w	408284 <_realloc_r+0x2cc>
  408140:	3508      	adds	r5, #8
  408142:	f10a 0210 	add.w	r2, sl, #16
  408146:	e063      	b.n	408210 <_realloc_r+0x258>
  408148:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40814c:	eba9 0a03 	sub.w	sl, r9, r3
  408150:	f8da 1004 	ldr.w	r1, [sl, #4]
  408154:	f021 0103 	bic.w	r1, r1, #3
  408158:	1863      	adds	r3, r4, r1
  40815a:	4293      	cmp	r3, r2
  40815c:	f6ff af59 	blt.w	408012 <_realloc_r+0x5a>
  408160:	4656      	mov	r6, sl
  408162:	e7d8      	b.n	408116 <_realloc_r+0x15e>
  408164:	6841      	ldr	r1, [r0, #4]
  408166:	f021 0b03 	bic.w	fp, r1, #3
  40816a:	44a3      	add	fp, r4
  40816c:	f107 0010 	add.w	r0, r7, #16
  408170:	4583      	cmp	fp, r0
  408172:	da56      	bge.n	408222 <_realloc_r+0x26a>
  408174:	f01e 0f01 	tst.w	lr, #1
  408178:	f47f af4b 	bne.w	408012 <_realloc_r+0x5a>
  40817c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408180:	eba9 0a01 	sub.w	sl, r9, r1
  408184:	f8da 1004 	ldr.w	r1, [sl, #4]
  408188:	f021 0103 	bic.w	r1, r1, #3
  40818c:	448b      	add	fp, r1
  40818e:	4558      	cmp	r0, fp
  408190:	dce2      	bgt.n	408158 <_realloc_r+0x1a0>
  408192:	4656      	mov	r6, sl
  408194:	f8da 100c 	ldr.w	r1, [sl, #12]
  408198:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40819c:	1f22      	subs	r2, r4, #4
  40819e:	2a24      	cmp	r2, #36	; 0x24
  4081a0:	60c1      	str	r1, [r0, #12]
  4081a2:	6088      	str	r0, [r1, #8]
  4081a4:	f200 808f 	bhi.w	4082c6 <_realloc_r+0x30e>
  4081a8:	2a13      	cmp	r2, #19
  4081aa:	f240 808a 	bls.w	4082c2 <_realloc_r+0x30a>
  4081ae:	6829      	ldr	r1, [r5, #0]
  4081b0:	f8ca 1008 	str.w	r1, [sl, #8]
  4081b4:	6869      	ldr	r1, [r5, #4]
  4081b6:	f8ca 100c 	str.w	r1, [sl, #12]
  4081ba:	2a1b      	cmp	r2, #27
  4081bc:	f200 808a 	bhi.w	4082d4 <_realloc_r+0x31c>
  4081c0:	3508      	adds	r5, #8
  4081c2:	f10a 0210 	add.w	r2, sl, #16
  4081c6:	6829      	ldr	r1, [r5, #0]
  4081c8:	6011      	str	r1, [r2, #0]
  4081ca:	6869      	ldr	r1, [r5, #4]
  4081cc:	6051      	str	r1, [r2, #4]
  4081ce:	68a9      	ldr	r1, [r5, #8]
  4081d0:	6091      	str	r1, [r2, #8]
  4081d2:	eb0a 0107 	add.w	r1, sl, r7
  4081d6:	ebab 0207 	sub.w	r2, fp, r7
  4081da:	f042 0201 	orr.w	r2, r2, #1
  4081de:	6099      	str	r1, [r3, #8]
  4081e0:	604a      	str	r2, [r1, #4]
  4081e2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4081e6:	f003 0301 	and.w	r3, r3, #1
  4081ea:	431f      	orrs	r7, r3
  4081ec:	4640      	mov	r0, r8
  4081ee:	f8ca 7004 	str.w	r7, [sl, #4]
  4081f2:	f7ff f89b 	bl	40732c <__malloc_unlock>
  4081f6:	e751      	b.n	40809c <_realloc_r+0xe4>
  4081f8:	682b      	ldr	r3, [r5, #0]
  4081fa:	6003      	str	r3, [r0, #0]
  4081fc:	686b      	ldr	r3, [r5, #4]
  4081fe:	6043      	str	r3, [r0, #4]
  408200:	2a1b      	cmp	r2, #27
  408202:	d82d      	bhi.n	408260 <_realloc_r+0x2a8>
  408204:	f100 0308 	add.w	r3, r0, #8
  408208:	f105 0208 	add.w	r2, r5, #8
  40820c:	e71b      	b.n	408046 <_realloc_r+0x8e>
  40820e:	4632      	mov	r2, r6
  408210:	6829      	ldr	r1, [r5, #0]
  408212:	6011      	str	r1, [r2, #0]
  408214:	6869      	ldr	r1, [r5, #4]
  408216:	6051      	str	r1, [r2, #4]
  408218:	68a9      	ldr	r1, [r5, #8]
  40821a:	6091      	str	r1, [r2, #8]
  40821c:	461c      	mov	r4, r3
  40821e:	46d1      	mov	r9, sl
  408220:	e72a      	b.n	408078 <_realloc_r+0xc0>
  408222:	eb09 0107 	add.w	r1, r9, r7
  408226:	ebab 0b07 	sub.w	fp, fp, r7
  40822a:	f04b 0201 	orr.w	r2, fp, #1
  40822e:	6099      	str	r1, [r3, #8]
  408230:	604a      	str	r2, [r1, #4]
  408232:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408236:	f003 0301 	and.w	r3, r3, #1
  40823a:	431f      	orrs	r7, r3
  40823c:	4640      	mov	r0, r8
  40823e:	f845 7c04 	str.w	r7, [r5, #-4]
  408242:	f7ff f873 	bl	40732c <__malloc_unlock>
  408246:	462e      	mov	r6, r5
  408248:	e728      	b.n	40809c <_realloc_r+0xe4>
  40824a:	4629      	mov	r1, r5
  40824c:	f7ff fe50 	bl	407ef0 <memmove>
  408250:	e6ff      	b.n	408052 <_realloc_r+0x9a>
  408252:	4629      	mov	r1, r5
  408254:	4630      	mov	r0, r6
  408256:	461c      	mov	r4, r3
  408258:	46d1      	mov	r9, sl
  40825a:	f7ff fe49 	bl	407ef0 <memmove>
  40825e:	e70b      	b.n	408078 <_realloc_r+0xc0>
  408260:	68ab      	ldr	r3, [r5, #8]
  408262:	6083      	str	r3, [r0, #8]
  408264:	68eb      	ldr	r3, [r5, #12]
  408266:	60c3      	str	r3, [r0, #12]
  408268:	2a24      	cmp	r2, #36	; 0x24
  40826a:	d017      	beq.n	40829c <_realloc_r+0x2e4>
  40826c:	f100 0310 	add.w	r3, r0, #16
  408270:	f105 0210 	add.w	r2, r5, #16
  408274:	e6e7      	b.n	408046 <_realloc_r+0x8e>
  408276:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40827a:	f023 0303 	bic.w	r3, r3, #3
  40827e:	441c      	add	r4, r3
  408280:	462e      	mov	r6, r5
  408282:	e6f9      	b.n	408078 <_realloc_r+0xc0>
  408284:	68a9      	ldr	r1, [r5, #8]
  408286:	f8ca 1010 	str.w	r1, [sl, #16]
  40828a:	68e9      	ldr	r1, [r5, #12]
  40828c:	f8ca 1014 	str.w	r1, [sl, #20]
  408290:	2a24      	cmp	r2, #36	; 0x24
  408292:	d00c      	beq.n	4082ae <_realloc_r+0x2f6>
  408294:	3510      	adds	r5, #16
  408296:	f10a 0218 	add.w	r2, sl, #24
  40829a:	e7b9      	b.n	408210 <_realloc_r+0x258>
  40829c:	692b      	ldr	r3, [r5, #16]
  40829e:	6103      	str	r3, [r0, #16]
  4082a0:	696b      	ldr	r3, [r5, #20]
  4082a2:	6143      	str	r3, [r0, #20]
  4082a4:	f105 0218 	add.w	r2, r5, #24
  4082a8:	f100 0318 	add.w	r3, r0, #24
  4082ac:	e6cb      	b.n	408046 <_realloc_r+0x8e>
  4082ae:	692a      	ldr	r2, [r5, #16]
  4082b0:	f8ca 2018 	str.w	r2, [sl, #24]
  4082b4:	696a      	ldr	r2, [r5, #20]
  4082b6:	f8ca 201c 	str.w	r2, [sl, #28]
  4082ba:	3518      	adds	r5, #24
  4082bc:	f10a 0220 	add.w	r2, sl, #32
  4082c0:	e7a6      	b.n	408210 <_realloc_r+0x258>
  4082c2:	4632      	mov	r2, r6
  4082c4:	e77f      	b.n	4081c6 <_realloc_r+0x20e>
  4082c6:	4629      	mov	r1, r5
  4082c8:	4630      	mov	r0, r6
  4082ca:	9301      	str	r3, [sp, #4]
  4082cc:	f7ff fe10 	bl	407ef0 <memmove>
  4082d0:	9b01      	ldr	r3, [sp, #4]
  4082d2:	e77e      	b.n	4081d2 <_realloc_r+0x21a>
  4082d4:	68a9      	ldr	r1, [r5, #8]
  4082d6:	f8ca 1010 	str.w	r1, [sl, #16]
  4082da:	68e9      	ldr	r1, [r5, #12]
  4082dc:	f8ca 1014 	str.w	r1, [sl, #20]
  4082e0:	2a24      	cmp	r2, #36	; 0x24
  4082e2:	d003      	beq.n	4082ec <_realloc_r+0x334>
  4082e4:	3510      	adds	r5, #16
  4082e6:	f10a 0218 	add.w	r2, sl, #24
  4082ea:	e76c      	b.n	4081c6 <_realloc_r+0x20e>
  4082ec:	692a      	ldr	r2, [r5, #16]
  4082ee:	f8ca 2018 	str.w	r2, [sl, #24]
  4082f2:	696a      	ldr	r2, [r5, #20]
  4082f4:	f8ca 201c 	str.w	r2, [sl, #28]
  4082f8:	3518      	adds	r5, #24
  4082fa:	f10a 0220 	add.w	r2, sl, #32
  4082fe:	e762      	b.n	4081c6 <_realloc_r+0x20e>
  408300:	20000444 	.word	0x20000444

00408304 <__ascii_wctomb>:
  408304:	b121      	cbz	r1, 408310 <__ascii_wctomb+0xc>
  408306:	2aff      	cmp	r2, #255	; 0xff
  408308:	d804      	bhi.n	408314 <__ascii_wctomb+0x10>
  40830a:	700a      	strb	r2, [r1, #0]
  40830c:	2001      	movs	r0, #1
  40830e:	4770      	bx	lr
  408310:	4608      	mov	r0, r1
  408312:	4770      	bx	lr
  408314:	238a      	movs	r3, #138	; 0x8a
  408316:	6003      	str	r3, [r0, #0]
  408318:	f04f 30ff 	mov.w	r0, #4294967295
  40831c:	4770      	bx	lr
  40831e:	bf00      	nop

00408320 <__aeabi_drsub>:
  408320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408324:	e002      	b.n	40832c <__adddf3>
  408326:	bf00      	nop

00408328 <__aeabi_dsub>:
  408328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040832c <__adddf3>:
  40832c:	b530      	push	{r4, r5, lr}
  40832e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408332:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408336:	ea94 0f05 	teq	r4, r5
  40833a:	bf08      	it	eq
  40833c:	ea90 0f02 	teqeq	r0, r2
  408340:	bf1f      	itttt	ne
  408342:	ea54 0c00 	orrsne.w	ip, r4, r0
  408346:	ea55 0c02 	orrsne.w	ip, r5, r2
  40834a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40834e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408352:	f000 80e2 	beq.w	40851a <__adddf3+0x1ee>
  408356:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40835a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40835e:	bfb8      	it	lt
  408360:	426d      	neglt	r5, r5
  408362:	dd0c      	ble.n	40837e <__adddf3+0x52>
  408364:	442c      	add	r4, r5
  408366:	ea80 0202 	eor.w	r2, r0, r2
  40836a:	ea81 0303 	eor.w	r3, r1, r3
  40836e:	ea82 0000 	eor.w	r0, r2, r0
  408372:	ea83 0101 	eor.w	r1, r3, r1
  408376:	ea80 0202 	eor.w	r2, r0, r2
  40837a:	ea81 0303 	eor.w	r3, r1, r3
  40837e:	2d36      	cmp	r5, #54	; 0x36
  408380:	bf88      	it	hi
  408382:	bd30      	pophi	{r4, r5, pc}
  408384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408388:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40838c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408394:	d002      	beq.n	40839c <__adddf3+0x70>
  408396:	4240      	negs	r0, r0
  408398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40839c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4083a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4083a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4083a8:	d002      	beq.n	4083b0 <__adddf3+0x84>
  4083aa:	4252      	negs	r2, r2
  4083ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4083b0:	ea94 0f05 	teq	r4, r5
  4083b4:	f000 80a7 	beq.w	408506 <__adddf3+0x1da>
  4083b8:	f1a4 0401 	sub.w	r4, r4, #1
  4083bc:	f1d5 0e20 	rsbs	lr, r5, #32
  4083c0:	db0d      	blt.n	4083de <__adddf3+0xb2>
  4083c2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4083c6:	fa22 f205 	lsr.w	r2, r2, r5
  4083ca:	1880      	adds	r0, r0, r2
  4083cc:	f141 0100 	adc.w	r1, r1, #0
  4083d0:	fa03 f20e 	lsl.w	r2, r3, lr
  4083d4:	1880      	adds	r0, r0, r2
  4083d6:	fa43 f305 	asr.w	r3, r3, r5
  4083da:	4159      	adcs	r1, r3
  4083dc:	e00e      	b.n	4083fc <__adddf3+0xd0>
  4083de:	f1a5 0520 	sub.w	r5, r5, #32
  4083e2:	f10e 0e20 	add.w	lr, lr, #32
  4083e6:	2a01      	cmp	r2, #1
  4083e8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4083ec:	bf28      	it	cs
  4083ee:	f04c 0c02 	orrcs.w	ip, ip, #2
  4083f2:	fa43 f305 	asr.w	r3, r3, r5
  4083f6:	18c0      	adds	r0, r0, r3
  4083f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4083fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408400:	d507      	bpl.n	408412 <__adddf3+0xe6>
  408402:	f04f 0e00 	mov.w	lr, #0
  408406:	f1dc 0c00 	rsbs	ip, ip, #0
  40840a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40840e:	eb6e 0101 	sbc.w	r1, lr, r1
  408412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408416:	d31b      	bcc.n	408450 <__adddf3+0x124>
  408418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40841c:	d30c      	bcc.n	408438 <__adddf3+0x10c>
  40841e:	0849      	lsrs	r1, r1, #1
  408420:	ea5f 0030 	movs.w	r0, r0, rrx
  408424:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408428:	f104 0401 	add.w	r4, r4, #1
  40842c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408434:	f080 809a 	bcs.w	40856c <__adddf3+0x240>
  408438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40843c:	bf08      	it	eq
  40843e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408442:	f150 0000 	adcs.w	r0, r0, #0
  408446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40844a:	ea41 0105 	orr.w	r1, r1, r5
  40844e:	bd30      	pop	{r4, r5, pc}
  408450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408454:	4140      	adcs	r0, r0
  408456:	eb41 0101 	adc.w	r1, r1, r1
  40845a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40845e:	f1a4 0401 	sub.w	r4, r4, #1
  408462:	d1e9      	bne.n	408438 <__adddf3+0x10c>
  408464:	f091 0f00 	teq	r1, #0
  408468:	bf04      	itt	eq
  40846a:	4601      	moveq	r1, r0
  40846c:	2000      	moveq	r0, #0
  40846e:	fab1 f381 	clz	r3, r1
  408472:	bf08      	it	eq
  408474:	3320      	addeq	r3, #32
  408476:	f1a3 030b 	sub.w	r3, r3, #11
  40847a:	f1b3 0220 	subs.w	r2, r3, #32
  40847e:	da0c      	bge.n	40849a <__adddf3+0x16e>
  408480:	320c      	adds	r2, #12
  408482:	dd08      	ble.n	408496 <__adddf3+0x16a>
  408484:	f102 0c14 	add.w	ip, r2, #20
  408488:	f1c2 020c 	rsb	r2, r2, #12
  40848c:	fa01 f00c 	lsl.w	r0, r1, ip
  408490:	fa21 f102 	lsr.w	r1, r1, r2
  408494:	e00c      	b.n	4084b0 <__adddf3+0x184>
  408496:	f102 0214 	add.w	r2, r2, #20
  40849a:	bfd8      	it	le
  40849c:	f1c2 0c20 	rsble	ip, r2, #32
  4084a0:	fa01 f102 	lsl.w	r1, r1, r2
  4084a4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4084a8:	bfdc      	itt	le
  4084aa:	ea41 010c 	orrle.w	r1, r1, ip
  4084ae:	4090      	lslle	r0, r2
  4084b0:	1ae4      	subs	r4, r4, r3
  4084b2:	bfa2      	ittt	ge
  4084b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4084b8:	4329      	orrge	r1, r5
  4084ba:	bd30      	popge	{r4, r5, pc}
  4084bc:	ea6f 0404 	mvn.w	r4, r4
  4084c0:	3c1f      	subs	r4, #31
  4084c2:	da1c      	bge.n	4084fe <__adddf3+0x1d2>
  4084c4:	340c      	adds	r4, #12
  4084c6:	dc0e      	bgt.n	4084e6 <__adddf3+0x1ba>
  4084c8:	f104 0414 	add.w	r4, r4, #20
  4084cc:	f1c4 0220 	rsb	r2, r4, #32
  4084d0:	fa20 f004 	lsr.w	r0, r0, r4
  4084d4:	fa01 f302 	lsl.w	r3, r1, r2
  4084d8:	ea40 0003 	orr.w	r0, r0, r3
  4084dc:	fa21 f304 	lsr.w	r3, r1, r4
  4084e0:	ea45 0103 	orr.w	r1, r5, r3
  4084e4:	bd30      	pop	{r4, r5, pc}
  4084e6:	f1c4 040c 	rsb	r4, r4, #12
  4084ea:	f1c4 0220 	rsb	r2, r4, #32
  4084ee:	fa20 f002 	lsr.w	r0, r0, r2
  4084f2:	fa01 f304 	lsl.w	r3, r1, r4
  4084f6:	ea40 0003 	orr.w	r0, r0, r3
  4084fa:	4629      	mov	r1, r5
  4084fc:	bd30      	pop	{r4, r5, pc}
  4084fe:	fa21 f004 	lsr.w	r0, r1, r4
  408502:	4629      	mov	r1, r5
  408504:	bd30      	pop	{r4, r5, pc}
  408506:	f094 0f00 	teq	r4, #0
  40850a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40850e:	bf06      	itte	eq
  408510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408514:	3401      	addeq	r4, #1
  408516:	3d01      	subne	r5, #1
  408518:	e74e      	b.n	4083b8 <__adddf3+0x8c>
  40851a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40851e:	bf18      	it	ne
  408520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408524:	d029      	beq.n	40857a <__adddf3+0x24e>
  408526:	ea94 0f05 	teq	r4, r5
  40852a:	bf08      	it	eq
  40852c:	ea90 0f02 	teqeq	r0, r2
  408530:	d005      	beq.n	40853e <__adddf3+0x212>
  408532:	ea54 0c00 	orrs.w	ip, r4, r0
  408536:	bf04      	itt	eq
  408538:	4619      	moveq	r1, r3
  40853a:	4610      	moveq	r0, r2
  40853c:	bd30      	pop	{r4, r5, pc}
  40853e:	ea91 0f03 	teq	r1, r3
  408542:	bf1e      	ittt	ne
  408544:	2100      	movne	r1, #0
  408546:	2000      	movne	r0, #0
  408548:	bd30      	popne	{r4, r5, pc}
  40854a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40854e:	d105      	bne.n	40855c <__adddf3+0x230>
  408550:	0040      	lsls	r0, r0, #1
  408552:	4149      	adcs	r1, r1
  408554:	bf28      	it	cs
  408556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40855a:	bd30      	pop	{r4, r5, pc}
  40855c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408560:	bf3c      	itt	cc
  408562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408566:	bd30      	popcc	{r4, r5, pc}
  408568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40856c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408574:	f04f 0000 	mov.w	r0, #0
  408578:	bd30      	pop	{r4, r5, pc}
  40857a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40857e:	bf1a      	itte	ne
  408580:	4619      	movne	r1, r3
  408582:	4610      	movne	r0, r2
  408584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408588:	bf1c      	itt	ne
  40858a:	460b      	movne	r3, r1
  40858c:	4602      	movne	r2, r0
  40858e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408592:	bf06      	itte	eq
  408594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408598:	ea91 0f03 	teqeq	r1, r3
  40859c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4085a0:	bd30      	pop	{r4, r5, pc}
  4085a2:	bf00      	nop

004085a4 <__aeabi_ui2d>:
  4085a4:	f090 0f00 	teq	r0, #0
  4085a8:	bf04      	itt	eq
  4085aa:	2100      	moveq	r1, #0
  4085ac:	4770      	bxeq	lr
  4085ae:	b530      	push	{r4, r5, lr}
  4085b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4085b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4085b8:	f04f 0500 	mov.w	r5, #0
  4085bc:	f04f 0100 	mov.w	r1, #0
  4085c0:	e750      	b.n	408464 <__adddf3+0x138>
  4085c2:	bf00      	nop

004085c4 <__aeabi_i2d>:
  4085c4:	f090 0f00 	teq	r0, #0
  4085c8:	bf04      	itt	eq
  4085ca:	2100      	moveq	r1, #0
  4085cc:	4770      	bxeq	lr
  4085ce:	b530      	push	{r4, r5, lr}
  4085d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4085d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4085d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4085dc:	bf48      	it	mi
  4085de:	4240      	negmi	r0, r0
  4085e0:	f04f 0100 	mov.w	r1, #0
  4085e4:	e73e      	b.n	408464 <__adddf3+0x138>
  4085e6:	bf00      	nop

004085e8 <__aeabi_f2d>:
  4085e8:	0042      	lsls	r2, r0, #1
  4085ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4085ee:	ea4f 0131 	mov.w	r1, r1, rrx
  4085f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4085f6:	bf1f      	itttt	ne
  4085f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4085fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408604:	4770      	bxne	lr
  408606:	f092 0f00 	teq	r2, #0
  40860a:	bf14      	ite	ne
  40860c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408610:	4770      	bxeq	lr
  408612:	b530      	push	{r4, r5, lr}
  408614:	f44f 7460 	mov.w	r4, #896	; 0x380
  408618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40861c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408620:	e720      	b.n	408464 <__adddf3+0x138>
  408622:	bf00      	nop

00408624 <__aeabi_ul2d>:
  408624:	ea50 0201 	orrs.w	r2, r0, r1
  408628:	bf08      	it	eq
  40862a:	4770      	bxeq	lr
  40862c:	b530      	push	{r4, r5, lr}
  40862e:	f04f 0500 	mov.w	r5, #0
  408632:	e00a      	b.n	40864a <__aeabi_l2d+0x16>

00408634 <__aeabi_l2d>:
  408634:	ea50 0201 	orrs.w	r2, r0, r1
  408638:	bf08      	it	eq
  40863a:	4770      	bxeq	lr
  40863c:	b530      	push	{r4, r5, lr}
  40863e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408642:	d502      	bpl.n	40864a <__aeabi_l2d+0x16>
  408644:	4240      	negs	r0, r0
  408646:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40864a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40864e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408652:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408656:	f43f aedc 	beq.w	408412 <__adddf3+0xe6>
  40865a:	f04f 0203 	mov.w	r2, #3
  40865e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408662:	bf18      	it	ne
  408664:	3203      	addne	r2, #3
  408666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40866a:	bf18      	it	ne
  40866c:	3203      	addne	r2, #3
  40866e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408672:	f1c2 0320 	rsb	r3, r2, #32
  408676:	fa00 fc03 	lsl.w	ip, r0, r3
  40867a:	fa20 f002 	lsr.w	r0, r0, r2
  40867e:	fa01 fe03 	lsl.w	lr, r1, r3
  408682:	ea40 000e 	orr.w	r0, r0, lr
  408686:	fa21 f102 	lsr.w	r1, r1, r2
  40868a:	4414      	add	r4, r2
  40868c:	e6c1      	b.n	408412 <__adddf3+0xe6>
  40868e:	bf00      	nop

00408690 <__aeabi_dmul>:
  408690:	b570      	push	{r4, r5, r6, lr}
  408692:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408696:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40869a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40869e:	bf1d      	ittte	ne
  4086a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4086a4:	ea94 0f0c 	teqne	r4, ip
  4086a8:	ea95 0f0c 	teqne	r5, ip
  4086ac:	f000 f8de 	bleq	40886c <__aeabi_dmul+0x1dc>
  4086b0:	442c      	add	r4, r5
  4086b2:	ea81 0603 	eor.w	r6, r1, r3
  4086b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4086ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4086be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4086c2:	bf18      	it	ne
  4086c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4086c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4086cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4086d0:	d038      	beq.n	408744 <__aeabi_dmul+0xb4>
  4086d2:	fba0 ce02 	umull	ip, lr, r0, r2
  4086d6:	f04f 0500 	mov.w	r5, #0
  4086da:	fbe1 e502 	umlal	lr, r5, r1, r2
  4086de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4086e2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4086e6:	f04f 0600 	mov.w	r6, #0
  4086ea:	fbe1 5603 	umlal	r5, r6, r1, r3
  4086ee:	f09c 0f00 	teq	ip, #0
  4086f2:	bf18      	it	ne
  4086f4:	f04e 0e01 	orrne.w	lr, lr, #1
  4086f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4086fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408700:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408704:	d204      	bcs.n	408710 <__aeabi_dmul+0x80>
  408706:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40870a:	416d      	adcs	r5, r5
  40870c:	eb46 0606 	adc.w	r6, r6, r6
  408710:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408714:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408718:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40871c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408720:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408724:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408728:	bf88      	it	hi
  40872a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40872e:	d81e      	bhi.n	40876e <__aeabi_dmul+0xde>
  408730:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408734:	bf08      	it	eq
  408736:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40873a:	f150 0000 	adcs.w	r0, r0, #0
  40873e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408742:	bd70      	pop	{r4, r5, r6, pc}
  408744:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408748:	ea46 0101 	orr.w	r1, r6, r1
  40874c:	ea40 0002 	orr.w	r0, r0, r2
  408750:	ea81 0103 	eor.w	r1, r1, r3
  408754:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408758:	bfc2      	ittt	gt
  40875a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40875e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408762:	bd70      	popgt	{r4, r5, r6, pc}
  408764:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408768:	f04f 0e00 	mov.w	lr, #0
  40876c:	3c01      	subs	r4, #1
  40876e:	f300 80ab 	bgt.w	4088c8 <__aeabi_dmul+0x238>
  408772:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408776:	bfde      	ittt	le
  408778:	2000      	movle	r0, #0
  40877a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40877e:	bd70      	pople	{r4, r5, r6, pc}
  408780:	f1c4 0400 	rsb	r4, r4, #0
  408784:	3c20      	subs	r4, #32
  408786:	da35      	bge.n	4087f4 <__aeabi_dmul+0x164>
  408788:	340c      	adds	r4, #12
  40878a:	dc1b      	bgt.n	4087c4 <__aeabi_dmul+0x134>
  40878c:	f104 0414 	add.w	r4, r4, #20
  408790:	f1c4 0520 	rsb	r5, r4, #32
  408794:	fa00 f305 	lsl.w	r3, r0, r5
  408798:	fa20 f004 	lsr.w	r0, r0, r4
  40879c:	fa01 f205 	lsl.w	r2, r1, r5
  4087a0:	ea40 0002 	orr.w	r0, r0, r2
  4087a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4087a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4087ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4087b0:	fa21 f604 	lsr.w	r6, r1, r4
  4087b4:	eb42 0106 	adc.w	r1, r2, r6
  4087b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4087bc:	bf08      	it	eq
  4087be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4087c2:	bd70      	pop	{r4, r5, r6, pc}
  4087c4:	f1c4 040c 	rsb	r4, r4, #12
  4087c8:	f1c4 0520 	rsb	r5, r4, #32
  4087cc:	fa00 f304 	lsl.w	r3, r0, r4
  4087d0:	fa20 f005 	lsr.w	r0, r0, r5
  4087d4:	fa01 f204 	lsl.w	r2, r1, r4
  4087d8:	ea40 0002 	orr.w	r0, r0, r2
  4087dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4087e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4087e4:	f141 0100 	adc.w	r1, r1, #0
  4087e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4087ec:	bf08      	it	eq
  4087ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4087f2:	bd70      	pop	{r4, r5, r6, pc}
  4087f4:	f1c4 0520 	rsb	r5, r4, #32
  4087f8:	fa00 f205 	lsl.w	r2, r0, r5
  4087fc:	ea4e 0e02 	orr.w	lr, lr, r2
  408800:	fa20 f304 	lsr.w	r3, r0, r4
  408804:	fa01 f205 	lsl.w	r2, r1, r5
  408808:	ea43 0302 	orr.w	r3, r3, r2
  40880c:	fa21 f004 	lsr.w	r0, r1, r4
  408810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408814:	fa21 f204 	lsr.w	r2, r1, r4
  408818:	ea20 0002 	bic.w	r0, r0, r2
  40881c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408824:	bf08      	it	eq
  408826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40882a:	bd70      	pop	{r4, r5, r6, pc}
  40882c:	f094 0f00 	teq	r4, #0
  408830:	d10f      	bne.n	408852 <__aeabi_dmul+0x1c2>
  408832:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408836:	0040      	lsls	r0, r0, #1
  408838:	eb41 0101 	adc.w	r1, r1, r1
  40883c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408840:	bf08      	it	eq
  408842:	3c01      	subeq	r4, #1
  408844:	d0f7      	beq.n	408836 <__aeabi_dmul+0x1a6>
  408846:	ea41 0106 	orr.w	r1, r1, r6
  40884a:	f095 0f00 	teq	r5, #0
  40884e:	bf18      	it	ne
  408850:	4770      	bxne	lr
  408852:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408856:	0052      	lsls	r2, r2, #1
  408858:	eb43 0303 	adc.w	r3, r3, r3
  40885c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408860:	bf08      	it	eq
  408862:	3d01      	subeq	r5, #1
  408864:	d0f7      	beq.n	408856 <__aeabi_dmul+0x1c6>
  408866:	ea43 0306 	orr.w	r3, r3, r6
  40886a:	4770      	bx	lr
  40886c:	ea94 0f0c 	teq	r4, ip
  408870:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408874:	bf18      	it	ne
  408876:	ea95 0f0c 	teqne	r5, ip
  40887a:	d00c      	beq.n	408896 <__aeabi_dmul+0x206>
  40887c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408880:	bf18      	it	ne
  408882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408886:	d1d1      	bne.n	40882c <__aeabi_dmul+0x19c>
  408888:	ea81 0103 	eor.w	r1, r1, r3
  40888c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408890:	f04f 0000 	mov.w	r0, #0
  408894:	bd70      	pop	{r4, r5, r6, pc}
  408896:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40889a:	bf06      	itte	eq
  40889c:	4610      	moveq	r0, r2
  40889e:	4619      	moveq	r1, r3
  4088a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4088a4:	d019      	beq.n	4088da <__aeabi_dmul+0x24a>
  4088a6:	ea94 0f0c 	teq	r4, ip
  4088aa:	d102      	bne.n	4088b2 <__aeabi_dmul+0x222>
  4088ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4088b0:	d113      	bne.n	4088da <__aeabi_dmul+0x24a>
  4088b2:	ea95 0f0c 	teq	r5, ip
  4088b6:	d105      	bne.n	4088c4 <__aeabi_dmul+0x234>
  4088b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4088bc:	bf1c      	itt	ne
  4088be:	4610      	movne	r0, r2
  4088c0:	4619      	movne	r1, r3
  4088c2:	d10a      	bne.n	4088da <__aeabi_dmul+0x24a>
  4088c4:	ea81 0103 	eor.w	r1, r1, r3
  4088c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4088cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4088d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4088d4:	f04f 0000 	mov.w	r0, #0
  4088d8:	bd70      	pop	{r4, r5, r6, pc}
  4088da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4088de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4088e2:	bd70      	pop	{r4, r5, r6, pc}

004088e4 <__aeabi_ddiv>:
  4088e4:	b570      	push	{r4, r5, r6, lr}
  4088e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4088ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4088ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4088f2:	bf1d      	ittte	ne
  4088f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4088f8:	ea94 0f0c 	teqne	r4, ip
  4088fc:	ea95 0f0c 	teqne	r5, ip
  408900:	f000 f8a7 	bleq	408a52 <__aeabi_ddiv+0x16e>
  408904:	eba4 0405 	sub.w	r4, r4, r5
  408908:	ea81 0e03 	eor.w	lr, r1, r3
  40890c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408910:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408914:	f000 8088 	beq.w	408a28 <__aeabi_ddiv+0x144>
  408918:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40891c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408920:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408924:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408928:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40892c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408930:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408934:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408938:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40893c:	429d      	cmp	r5, r3
  40893e:	bf08      	it	eq
  408940:	4296      	cmpeq	r6, r2
  408942:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408946:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40894a:	d202      	bcs.n	408952 <__aeabi_ddiv+0x6e>
  40894c:	085b      	lsrs	r3, r3, #1
  40894e:	ea4f 0232 	mov.w	r2, r2, rrx
  408952:	1ab6      	subs	r6, r6, r2
  408954:	eb65 0503 	sbc.w	r5, r5, r3
  408958:	085b      	lsrs	r3, r3, #1
  40895a:	ea4f 0232 	mov.w	r2, r2, rrx
  40895e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408962:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408966:	ebb6 0e02 	subs.w	lr, r6, r2
  40896a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40896e:	bf22      	ittt	cs
  408970:	1ab6      	subcs	r6, r6, r2
  408972:	4675      	movcs	r5, lr
  408974:	ea40 000c 	orrcs.w	r0, r0, ip
  408978:	085b      	lsrs	r3, r3, #1
  40897a:	ea4f 0232 	mov.w	r2, r2, rrx
  40897e:	ebb6 0e02 	subs.w	lr, r6, r2
  408982:	eb75 0e03 	sbcs.w	lr, r5, r3
  408986:	bf22      	ittt	cs
  408988:	1ab6      	subcs	r6, r6, r2
  40898a:	4675      	movcs	r5, lr
  40898c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408990:	085b      	lsrs	r3, r3, #1
  408992:	ea4f 0232 	mov.w	r2, r2, rrx
  408996:	ebb6 0e02 	subs.w	lr, r6, r2
  40899a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40899e:	bf22      	ittt	cs
  4089a0:	1ab6      	subcs	r6, r6, r2
  4089a2:	4675      	movcs	r5, lr
  4089a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4089a8:	085b      	lsrs	r3, r3, #1
  4089aa:	ea4f 0232 	mov.w	r2, r2, rrx
  4089ae:	ebb6 0e02 	subs.w	lr, r6, r2
  4089b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4089b6:	bf22      	ittt	cs
  4089b8:	1ab6      	subcs	r6, r6, r2
  4089ba:	4675      	movcs	r5, lr
  4089bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4089c0:	ea55 0e06 	orrs.w	lr, r5, r6
  4089c4:	d018      	beq.n	4089f8 <__aeabi_ddiv+0x114>
  4089c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4089ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4089ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4089d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4089d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4089da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4089de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4089e2:	d1c0      	bne.n	408966 <__aeabi_ddiv+0x82>
  4089e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089e8:	d10b      	bne.n	408a02 <__aeabi_ddiv+0x11e>
  4089ea:	ea41 0100 	orr.w	r1, r1, r0
  4089ee:	f04f 0000 	mov.w	r0, #0
  4089f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4089f6:	e7b6      	b.n	408966 <__aeabi_ddiv+0x82>
  4089f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089fc:	bf04      	itt	eq
  4089fe:	4301      	orreq	r1, r0
  408a00:	2000      	moveq	r0, #0
  408a02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408a06:	bf88      	it	hi
  408a08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408a0c:	f63f aeaf 	bhi.w	40876e <__aeabi_dmul+0xde>
  408a10:	ebb5 0c03 	subs.w	ip, r5, r3
  408a14:	bf04      	itt	eq
  408a16:	ebb6 0c02 	subseq.w	ip, r6, r2
  408a1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408a1e:	f150 0000 	adcs.w	r0, r0, #0
  408a22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408a26:	bd70      	pop	{r4, r5, r6, pc}
  408a28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408a2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408a30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408a34:	bfc2      	ittt	gt
  408a36:	ebd4 050c 	rsbsgt	r5, r4, ip
  408a3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408a3e:	bd70      	popgt	{r4, r5, r6, pc}
  408a40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408a44:	f04f 0e00 	mov.w	lr, #0
  408a48:	3c01      	subs	r4, #1
  408a4a:	e690      	b.n	40876e <__aeabi_dmul+0xde>
  408a4c:	ea45 0e06 	orr.w	lr, r5, r6
  408a50:	e68d      	b.n	40876e <__aeabi_dmul+0xde>
  408a52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408a56:	ea94 0f0c 	teq	r4, ip
  408a5a:	bf08      	it	eq
  408a5c:	ea95 0f0c 	teqeq	r5, ip
  408a60:	f43f af3b 	beq.w	4088da <__aeabi_dmul+0x24a>
  408a64:	ea94 0f0c 	teq	r4, ip
  408a68:	d10a      	bne.n	408a80 <__aeabi_ddiv+0x19c>
  408a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408a6e:	f47f af34 	bne.w	4088da <__aeabi_dmul+0x24a>
  408a72:	ea95 0f0c 	teq	r5, ip
  408a76:	f47f af25 	bne.w	4088c4 <__aeabi_dmul+0x234>
  408a7a:	4610      	mov	r0, r2
  408a7c:	4619      	mov	r1, r3
  408a7e:	e72c      	b.n	4088da <__aeabi_dmul+0x24a>
  408a80:	ea95 0f0c 	teq	r5, ip
  408a84:	d106      	bne.n	408a94 <__aeabi_ddiv+0x1b0>
  408a86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408a8a:	f43f aefd 	beq.w	408888 <__aeabi_dmul+0x1f8>
  408a8e:	4610      	mov	r0, r2
  408a90:	4619      	mov	r1, r3
  408a92:	e722      	b.n	4088da <__aeabi_dmul+0x24a>
  408a94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a98:	bf18      	it	ne
  408a9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a9e:	f47f aec5 	bne.w	40882c <__aeabi_dmul+0x19c>
  408aa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408aa6:	f47f af0d 	bne.w	4088c4 <__aeabi_dmul+0x234>
  408aaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408aae:	f47f aeeb 	bne.w	408888 <__aeabi_dmul+0x1f8>
  408ab2:	e712      	b.n	4088da <__aeabi_dmul+0x24a>

00408ab4 <__gedf2>:
  408ab4:	f04f 3cff 	mov.w	ip, #4294967295
  408ab8:	e006      	b.n	408ac8 <__cmpdf2+0x4>
  408aba:	bf00      	nop

00408abc <__ledf2>:
  408abc:	f04f 0c01 	mov.w	ip, #1
  408ac0:	e002      	b.n	408ac8 <__cmpdf2+0x4>
  408ac2:	bf00      	nop

00408ac4 <__cmpdf2>:
  408ac4:	f04f 0c01 	mov.w	ip, #1
  408ac8:	f84d cd04 	str.w	ip, [sp, #-4]!
  408acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408ad8:	bf18      	it	ne
  408ada:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408ade:	d01b      	beq.n	408b18 <__cmpdf2+0x54>
  408ae0:	b001      	add	sp, #4
  408ae2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408ae6:	bf0c      	ite	eq
  408ae8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408aec:	ea91 0f03 	teqne	r1, r3
  408af0:	bf02      	ittt	eq
  408af2:	ea90 0f02 	teqeq	r0, r2
  408af6:	2000      	moveq	r0, #0
  408af8:	4770      	bxeq	lr
  408afa:	f110 0f00 	cmn.w	r0, #0
  408afe:	ea91 0f03 	teq	r1, r3
  408b02:	bf58      	it	pl
  408b04:	4299      	cmppl	r1, r3
  408b06:	bf08      	it	eq
  408b08:	4290      	cmpeq	r0, r2
  408b0a:	bf2c      	ite	cs
  408b0c:	17d8      	asrcs	r0, r3, #31
  408b0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408b12:	f040 0001 	orr.w	r0, r0, #1
  408b16:	4770      	bx	lr
  408b18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b20:	d102      	bne.n	408b28 <__cmpdf2+0x64>
  408b22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408b26:	d107      	bne.n	408b38 <__cmpdf2+0x74>
  408b28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b30:	d1d6      	bne.n	408ae0 <__cmpdf2+0x1c>
  408b32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408b36:	d0d3      	beq.n	408ae0 <__cmpdf2+0x1c>
  408b38:	f85d 0b04 	ldr.w	r0, [sp], #4
  408b3c:	4770      	bx	lr
  408b3e:	bf00      	nop

00408b40 <__aeabi_cdrcmple>:
  408b40:	4684      	mov	ip, r0
  408b42:	4610      	mov	r0, r2
  408b44:	4662      	mov	r2, ip
  408b46:	468c      	mov	ip, r1
  408b48:	4619      	mov	r1, r3
  408b4a:	4663      	mov	r3, ip
  408b4c:	e000      	b.n	408b50 <__aeabi_cdcmpeq>
  408b4e:	bf00      	nop

00408b50 <__aeabi_cdcmpeq>:
  408b50:	b501      	push	{r0, lr}
  408b52:	f7ff ffb7 	bl	408ac4 <__cmpdf2>
  408b56:	2800      	cmp	r0, #0
  408b58:	bf48      	it	mi
  408b5a:	f110 0f00 	cmnmi.w	r0, #0
  408b5e:	bd01      	pop	{r0, pc}

00408b60 <__aeabi_dcmpeq>:
  408b60:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b64:	f7ff fff4 	bl	408b50 <__aeabi_cdcmpeq>
  408b68:	bf0c      	ite	eq
  408b6a:	2001      	moveq	r0, #1
  408b6c:	2000      	movne	r0, #0
  408b6e:	f85d fb08 	ldr.w	pc, [sp], #8
  408b72:	bf00      	nop

00408b74 <__aeabi_dcmplt>:
  408b74:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b78:	f7ff ffea 	bl	408b50 <__aeabi_cdcmpeq>
  408b7c:	bf34      	ite	cc
  408b7e:	2001      	movcc	r0, #1
  408b80:	2000      	movcs	r0, #0
  408b82:	f85d fb08 	ldr.w	pc, [sp], #8
  408b86:	bf00      	nop

00408b88 <__aeabi_dcmple>:
  408b88:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b8c:	f7ff ffe0 	bl	408b50 <__aeabi_cdcmpeq>
  408b90:	bf94      	ite	ls
  408b92:	2001      	movls	r0, #1
  408b94:	2000      	movhi	r0, #0
  408b96:	f85d fb08 	ldr.w	pc, [sp], #8
  408b9a:	bf00      	nop

00408b9c <__aeabi_dcmpge>:
  408b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408ba0:	f7ff ffce 	bl	408b40 <__aeabi_cdrcmple>
  408ba4:	bf94      	ite	ls
  408ba6:	2001      	movls	r0, #1
  408ba8:	2000      	movhi	r0, #0
  408baa:	f85d fb08 	ldr.w	pc, [sp], #8
  408bae:	bf00      	nop

00408bb0 <__aeabi_dcmpgt>:
  408bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408bb4:	f7ff ffc4 	bl	408b40 <__aeabi_cdrcmple>
  408bb8:	bf34      	ite	cc
  408bba:	2001      	movcc	r0, #1
  408bbc:	2000      	movcs	r0, #0
  408bbe:	f85d fb08 	ldr.w	pc, [sp], #8
  408bc2:	bf00      	nop

00408bc4 <__aeabi_dcmpun>:
  408bc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bcc:	d102      	bne.n	408bd4 <__aeabi_dcmpun+0x10>
  408bce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408bd2:	d10a      	bne.n	408bea <__aeabi_dcmpun+0x26>
  408bd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408bdc:	d102      	bne.n	408be4 <__aeabi_dcmpun+0x20>
  408bde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408be2:	d102      	bne.n	408bea <__aeabi_dcmpun+0x26>
  408be4:	f04f 0000 	mov.w	r0, #0
  408be8:	4770      	bx	lr
  408bea:	f04f 0001 	mov.w	r0, #1
  408bee:	4770      	bx	lr

00408bf0 <__aeabi_d2iz>:
  408bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408bf8:	d215      	bcs.n	408c26 <__aeabi_d2iz+0x36>
  408bfa:	d511      	bpl.n	408c20 <__aeabi_d2iz+0x30>
  408bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408c04:	d912      	bls.n	408c2c <__aeabi_d2iz+0x3c>
  408c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408c16:	fa23 f002 	lsr.w	r0, r3, r2
  408c1a:	bf18      	it	ne
  408c1c:	4240      	negne	r0, r0
  408c1e:	4770      	bx	lr
  408c20:	f04f 0000 	mov.w	r0, #0
  408c24:	4770      	bx	lr
  408c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408c2a:	d105      	bne.n	408c38 <__aeabi_d2iz+0x48>
  408c2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408c30:	bf08      	it	eq
  408c32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408c36:	4770      	bx	lr
  408c38:	f04f 0000 	mov.w	r0, #0
  408c3c:	4770      	bx	lr
  408c3e:	bf00      	nop

00408c40 <OV2640_JPEG_INIT>:
  408c40:	00ff ff2c df2e 01ff 323c 0111 0209 2804     ..,.....<2.....(
  408c50:	e513 4814 0c2c 7833 333a fb3b 003e 1143     ...H,.3x:3;.>.C.
  408c60:	1016 9239 da35 1a22 c337 0023 c034 1a36     ..9.5.".7.#.4.6.
  408c70:	8806 c007 870d 410e 004c 0048 005b 0342     .......AL.H.[.B.
  408c80:	814a 9921 4024 3825 8226 005c 0063 7061     J.!.$@%8&.\.c.ap
  408c90:	8062 057c 8020 3028 006c 806d 006e 0270     b.|. .(0l.m.n.p.
  408ca0:	9471 c173 4012 1117 4318 0019 4b1a 0932     q.s..@...C...K2.
  408cb0:	c037 604f a850 006d 383d 3f46 604f 3c0c     7.O`P.m.=8F?O`.<
  408cc0:	00ff 7fe5 c0f9 2441 14e0 ff76 a033 2042     ......A$..v.3.B 
  408cd0:	1843 004c d587 3f88 03d7 10d9 82d3 08c8     C.L....?........
  408ce0:	80c9 007c 007d 037c 487d 487d 087c 207d     ..|.}.|.}H}H|.} 
  408cf0:	107d 0e7d 0090 0e91 1a91 3191 5a91 6991     }.}........1.Z.i
  408d00:	7591 7e91 8891 8f91 9691 a391 af91 c491     .u.~............
  408d10:	d791 e891 2091 0092 0693 e393 0593 0593     ..... ..........
  408d20:	0093 0493 0093 0093 0093 0093 0093 0093     ................
  408d30:	0093 0096 0897 1997 0297 0c97 2497 3097     .............$.0
  408d40:	2897 2697 0297 9897 8097 0097 0097 edc3     .(.&............
  408d50:	00a4 00a8 11c5 51c6 80bf 10c7 66b6 a5b8     .......Q.....f..
  408d60:	64b7 7cb9 afb3 97b4 ffb5 c5b0 94b1 0fb2     .d.|............
  408d70:	5cc4 64c0 4bc1 008c 3d86 0050 c851 9652     .\.d.K...=P.Q.R.
  408d80:	0053 0054 0055 c85a 965b 005c 00d3 edc3     S.T.U.Z.[.\.....
  408d90:	007f 00da 1fe5 67e1 00e0 7fdd 0005 4012     .......g.......@
  408da0:	04d3 16c0 12c1 008c 3d86 0050 2c51 2452     .........=P.Q,R$
  408db0:	0053 0054 0055 2c5a 245b 005c ffff 0000     S.T.U.Z,[$\.....

00408dc0 <OV2640_YUV422>:
  408dc0:	00ff 0005 10da 03d7 00df 8033 403c 77e1     ..........3.<@.w
  408dd0:	0000 ffff                                   ....

00408dd4 <OV2640_JPEG>:
  408dd4:	14e0 77e1 1fe5 03d7 10da 00e0 01ff 0804     ...w............
  408de4:	ffff 0000                                   ....

00408de8 <OV2640_JPEG_320x240>:
  408de8:	01ff 4012 1117 4318 0019 4b1a 0932 ca4f     ...@...C...K2.O.
  408df8:	a850 235a 006d 1239 da35 1a22 c337 0023     P.Z#m.9.5.".7.#.
  408e08:	c034 1a36 8806 c007 870d 410e 004c 00ff     4.6........AL...
  408e18:	04e0 64c0 4bc1 3586 8950 c851 9652 0053     ...d.K.5P.Q.R.S.
  408e28:	0054 0055 0057 505a 3c5b 005c 00e0 ffff     T.U.W.ZP[<\.....

00408e38 <OV2640_JPEG_640x480>:
  408e38:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e48:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408e58:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408e68:	04e0 c8c0 96c1 3d86 8950 9051 2c52 0053     .......=P.Q.R,S.
  408e78:	0054 8855 0057 a05a 785b 005c 04d3 00e0     T.U.W.Z.[x\.....
  408e88:	ffff 0000                                   ....

00408e8c <OV2640_JPEG_800x600>:
  408e8c:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408e9c:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408eac:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408ebc:	04e0 c8c0 96c1 3586 8950 9051 2c52 0053     .......5P.Q.R,S.
  408ecc:	0054 8855 0057 c85a 965b 005c 02d3 00e0     T.U.W.Z.[.\.....
  408edc:	ffff 0000                                   ....

00408ee0 <OV2640_JPEG_1024x768>:
  408ee0:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408ef0:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408f00:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408f10:	c8c0 96c1 008c 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408f20:	0054 8855 005a c05b 015c 02d3 ffff 0000     T.U.Z.[.\.......

00408f30 <OV2640_JPEG_1280x1024>:
  408f30:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408f40:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408f50:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408f60:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408f70:	0054 8855 0057 405a f05b 015c 02d3 00e0     T.U.W.Z@[.\.....
  408f80:	ffff 0000                                   ....

00408f84 <OV2640_JPEG_1600x1200>:
  408f84:	01ff 0111 0012 1117 7518 3632 0119 971a     .........u26....
  408f94:	0f03 4037 bb4f 9c50 575a 806d 343d 0239     ..7@O.P.ZWm.=49.
  408fa4:	8835 0a22 4037 a034 0206 b70d 010e 00ff     5.".7@4.........
  408fb4:	04e0 c8c0 96c1 3d86 0050 9051 2c52 0053     .......=P.Q.R,S.
  408fc4:	0054 8855 0057 905a 2c5b 055c 02d3 00e0     T.U.W.Z.[,\.....
  408fd4:	ffff 0000                                   ....

00408fd8 <OV2640_QVGA_YUV422_10FPS>:
  408fd8:	000e 8012 05fe 0013 0511 0012 10d5 d40c     ................
  408fe8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  408ff8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409008:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409018:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409028:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409038:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409048:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409058:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409068:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409078:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409088:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409098:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  4090a8:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4090b8:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004090c8 <OV2640_QVGA_YUV422_15FPS>:
  4090c8:	000e 8012 05fe 0013 0311 0012 10d5 d40c     ................
  4090d8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4090e8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4090f8:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  409108:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409118:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409128:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409138:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409148:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409158:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409168:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409178:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409188:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409198:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  4091a8:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004091b8 <OV2640_QVGA_YUV422_20FPS>:
  4091b8:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  4091c8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4091d8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4091e8:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4091f8:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  409208:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409218:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409228:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409238:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409248:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409258:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409268:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409278:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409288:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409298:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

004092a8 <OV2640_QVGA_YUV422_30FPS>:
  4092a8:	000e 8012 05fe 0013 0111 0012 10d5 d40c     ................
  4092b8:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  4092c8:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4092d8:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4092e8:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4092f8:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  409308:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  409318:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  409328:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  409338:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409348:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409358:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409368:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409378:	885c 605d 6eac ffbe 00bf 5031 7832 3f82     \.]`.n....1P2x.?
  409388:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...

00409398 <OV2640_QVGA_RGB888>:
  409398:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  4093a8:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  4093b8:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  4093c8:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4093d8:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4093e8:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4093f8:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  409408:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  409418:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  409428:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  409438:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  409448:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  409458:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  409468:	605d 6eac ffbe 00bf 5031 7832 3f82 0112     ]`.n....1P2x.?..
  409478:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  409488:	0228 ffff                                   (...

0040948c <OV2640_QQVGA_YUV422>:
  40948c:	000e 8012 0013 0111 0012 10d5 540c 340d     .............T.4
  40949c:	0116 2517 a018 0319 f01a 891b 0322 1829     ...%........".).
  4094ac:	f82b 012c a031 f032 c433 b43a 3f36 6004     +.,.1.2.3.:.6?.`
  4094bc:	8027 0f3d 803e 403f 7f40 6a41 2942 e544     '.=.>.?@@.AjB)D.
  4094cc:	4145 0247 6449 a14a 704b 1a4c 504d 134e     EAG.IdJ.KpL.MPN.
  4094dc:	0064 8867 1a68 3814 3c24 3025 7226 9750     d.g.h..8$<%0&rP.
  4094ec:	7e51 0052 0053 0020 2321 1438 00e9 5556     Q~R.S. .!#8...VU
  4094fc:	ff57 ff58 ff59 045f 00ec ff13 7f80 3f81     W.X.Y._........?
  40950c:	3282 0183 1138 7084 0085 0386 0187 0588     .2..8..p........
  40951c:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  40952c:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  40953c:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  40954c:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  40955c:	885c 605d 6eac ffbe 00bf 2831 3c32 0034     \.]`.n....1(2<4.
  40956c:	3f82 0012 3f36 0053 0033 891b 0322 0228     .?..6?S.3...".(.
  40957c:	00d9 ffff                                   ....

00409580 <OV2640_QQVGA_RGB888>:
  409580:	000e 8012 0013 0111 0012 10d5 120c 340d     ...............4
  409590:	2517 a018 0319 f01a 891b 0322 1829 f82b     .%........".).+.
  4095a0:	012c a031 f032 c433 b43a 3f36 6004 8027     ,.1.2.3.:.6?.`'.
  4095b0:	0f3d 803e 403f 7f40 6a41 2942 e544 4145     =.>.?@@.AjB)D.EA
  4095c0:	0247 6449 a14a 704b 1a4c 504d 134e 0064     G.IdJ.KpL.MPN.d.
  4095d0:	8867 1a68 3814 3c24 3025 7226 9750 7e51     g.h..8$<%0&rP.Q~
  4095e0:	0052 0053 0020 2321 1438 00e9 5556 ff57     R.S. .!#8...VUW.
  4095f0:	ff58 ff59 045f 00ec ff13 7f80 3f81 3282     X.Y._........?.2
  409600:	0183 1138 7084 0085 0386 0187 0588 3089     ..8..p.........0
  409610:	308d 858f 3093 8595 3099 859b 089c 129d     .0...0...0......
  409620:	239e 459f 55a0 64a1 72a2 7fa3 8ba4 95a5     .#.E.U.d.r......
  409630:	a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce 6ecf     .............x.n
  409640:	0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b 885c     ..........Z$[.\.
  409650:	605d 6eac ffbe 00bf 2831 3c32 3f82 0112     ]`.n....1(2<.?..
  409660:	2f36 0483 0053 f433 8a1b 0322 0084 0084     6/..S.3...".....
  409670:	0228 ffff                                   (...

00409674 <OV2640_TEST_PATTERN>:
  409674:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409684:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409694:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  4096a4:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4096b4:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4096c4:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4096d4:	9750 7e51 0052 0053 0020 2321 0738 0284     P.Q~R.S. .!#8...
  4096e4:	1438 00e9 5556 ff57 ff58 ff59 045f 00ec     8...VUW.X.Y._...
  4096f4:	ff13 7f80 3f81 3282 0183 1138 0085 0386     .....?.2..8.....
  409704:	0187 0588 3089 308d 858f 3093 8595 3099     .....0.0...0...0
  409714:	859b 089c 129d 239e 459f 55a0 64a1 72a2     .......#.E.U.d.r
  409724:	7fa3 8ba4 95a5 a7a6 b5a7 cba8 dda9 ecaa     ................
  409734:	1aab 78ce 6ecf 0ad0 0cd1 84d2 90d3 1ed4     ...x.n..........
  409744:	245a 1f5b 885c 605d 6eac ffbe 00bf 5031     Z$[.\.]`.n....1P
  409754:	7832 3f82 0012 3f36 0053 c433 891b 0322     2x.?..6?S.3...".
  409764:	0228 ffff                                   (...

00409768 <OV2640_VGA_YUV422_20FPS>:
  409768:	000e 8012 05fe 0013 0211 0012 10d5 d40c     ................
  409778:	340d 0116 2517 a018 0319 f01a 891b 0322     .4...%........".
  409788:	1829 f82b 012c a031 f032 c433 b43a 3f36     ).+.,.1.2.3.:.6?
  409798:	6004 8027 0f3d 803e 403f 7f40 6a41 2942     .`'.=.>.?@@.AjB)
  4097a8:	e544 4145 0247 6449 a14a 704b 1a4c 504d     D.EAG.IdJ.KpL.MP
  4097b8:	134e 0064 8867 1a68 3814 3c24 3025 7226     N.d.g.h..8$<%0&r
  4097c8:	9750 7e51 0052 0053 0020 2321 1438 00e9     P.Q~R.S. .!#8...
  4097d8:	5556 ff57 ff58 ff59 045f 00ec ff13 7f80     VUW.X.Y._.......
  4097e8:	3f81 3282 0183 1138 0085 0386 0187 0588     .?.2..8.........
  4097f8:	3089 308d 858f 3093 8595 3099 859b 089c     .0.0...0...0....
  409808:	129d 239e 459f 55a0 64a1 72a2 7fa3 8ba4     ...#.E.U.d.r....
  409818:	95a5 a7a6 b5a7 cba8 dda9 ecaa 1aab 78ce     ...............x
  409828:	6ecf 0ad0 0cd1 84d2 90d3 1ed4 245a 1f5b     .n..........Z$[.
  409838:	885c 605d 6eac ffbe 00bf a031 f032 3f82     \.]`.n....1.2..?
  409848:	0012 3f36 0053 c433 891b 0322 0228 ffff     ..6?S.3...".(...
  409858:	1000 000e 00c0 0000 0800 0000 0000 0000     ................
	...
  409870:	7453 7261 2074 7274 6e61 6673 7265 0000     Start transfer..
  409880:	6f4e 656e 0000 0000 435b 6f6c 6573 3a64     None....[Closed:
  409890:	3020 005d 0000 0000 6374 6370 3120 2e38      0].....tcpc 18.
  4098a0:	3931 2e31 3031 2e32 3432 2037 3038 3030     191.102.247 8000
  4098b0:	0d20 000a 4f50 5453 2f20 6d69 6761 2065      ...POST /image 
  4098c0:	5448 5054 312f 312e 0a0d 6f48 7473 203a     HTTP/1.1..Host: 
  4098d0:	3031 302e 302e 302e 0a0d 6f43 746e 6e65     10.0.0.0..Conten
  4098e0:	2d74 7954 6570 203a 6d69 6761 6265 6e69     t-Type: imagebin
  4098f0:	0a0d 6f43 746e 6e65 2d74 654c 676e 6874     ..Content-Length
  409900:	203a 0a0d 0a0d 0000 7277 7469 2065 2030     : ......write 0 
  409910:	6425 0a0d 0000 0000 4f50 5453 2f20 6d69     %d......POST /im
  409920:	6761 2065 5448 5054 312f 312e 0a0d 6f48     age HTTP/1.1..Ho
  409930:	7473 203a 3031 302e 302e 302e 0a0d 6f43     st: 10.0.0.0..Co
  409940:	746e 6e65 2d74 7954 6570 203a 6d69 6761     ntent-Type: imag
  409950:	6265 6e69 0a0d 6f43 746e 6e65 2d74 654c     ebin..Content-Le
  409960:	676e 6874 203a 6425 0a0d 0a0d 0000 0000     ngth: %d........
  409970:	6572 6461 3020 3120 3030 2030 0a0d 0000     read 0 1000 ....
  409980:	6573 2074 6175 7472 662e 6f6c 2077 2030     set uart.flow 0 
  409990:	6e6f 0d20 000a 0000 6573 2074 7562 6320     on .....set bu c
  4099a0:	7220 3520 3030 2030 0a0d 0000 6573 2074      r 5000 ....set 
  4099b0:	7973 6920 6720 7720 616c 206e 3032 0d20     sy i g wlan 20 .
  4099c0:	000a 0000 6573 2074 7973 6920 6720 6e20     ....set sy i g n
  4099d0:	7465 6f77 6b72 3120 2038 0a0d 0000 0000     etwork 18 ......
  4099e0:	6573 2074 7973 6920 6720 7320 666f 6174     set sy i g softa
  4099f0:	2070 3132 0d20 000a 6573 2074 7973 6320     p 21 ...set sy c
  409a00:	6720 3120 2033 0a0d 0000 0000 6573 2074      g 13 ......set 
  409a10:	6c77 6e20 6f20 3120 2034 0a0d 0000 0000     wl n o 14 ......
  409a20:	6573 2074 7468 7074 732e 7265 6576 2e72     set http.server.
  409a30:	6f72 746f 665f 6c69 6e65 6d61 2065 6577     root_filename we
  409a40:	6362 6d61 692f 646e 7865 682e 6d74 206c     bcam/index.html 
  409a50:	0a0d 0000 6173 6576 0d20 000a 6573 7574     ....save ...setu
  409a60:	2070 6577 2062 0a0d 0000 0000 6573 2074     p web ......set 
  409a70:	7973 6320 7020 6f20 6666 0d20 000a 0000     sy c p off .....
  409a80:	6573 2074 7973 6320 6520 6f20 6666 0d20     set sy c e off .
  409a90:	000a 0000 6374 6370 3120 2e38 3931 2e31     ....tcpc 18.191.
  409aa0:	3031 2e32 3432 2037 3038 3030 0d20 000a     102.247 8000 ...
  409ab0:	6f70 6c6c 6120 6c6c 0d20 000a               poll all ...

00409abc <_global_impure_ptr>:
  409abc:	0018 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  409acc:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  409adc:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  409aec:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  409afc:	296c 0000 0030 0000                         l)..0...

00409b04 <blanks.7223>:
  409b04:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409b14 <zeroes.7224>:
  409b14:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409b24:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
  409b34:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
  409b44:	7877 7a79 0000 0000 6e49 6966 696e 7974     wxyz....Infinity
  409b54:	0000 0000 614e 004e 0000 0000               ....NaN.....

00409b60 <__mprec_bigtens>:
  409b60:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409b70:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409b80:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409b88 <__mprec_tens>:
  409b88:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409b98:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409ba8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409bb8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409bc8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409bd8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409be8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409bf8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409c08:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409c18:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409c28:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409c38:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409c48:	9db4 79d9 7843 44ea                         ...yCx.D

00409c50 <p05.6055>:
  409c50:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  409c60:	4f50 4953 0058 0000 002e 0000               POSIX.......

00409c6c <_ctype_>:
  409c6c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  409c7c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409c8c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  409c9c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  409cac:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  409cbc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  409ccc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  409cdc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  409cec:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409d70 <_init>:
  409d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d72:	bf00      	nop
  409d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d76:	bc08      	pop	{r3}
  409d78:	469e      	mov	lr, r3
  409d7a:	4770      	bx	lr

00409d7c <__init_array_start>:
  409d7c:	00405cc1 	.word	0x00405cc1

00409d80 <__frame_dummy_init_array_entry>:
  409d80:	004000f1                                ..@.

00409d84 <_fini>:
  409d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d86:	bf00      	nop
  409d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d8a:	bc08      	pop	{r3}
  409d8c:	469e      	mov	lr, r3
  409d8e:	4770      	bx	lr

00409d90 <__fini_array_start>:
  409d90:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	5cec 2000                                   .\. 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....

20000854 <__global_locale>:
20000854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000934:	8305 0040 7ec5 0040 0000 0000 9c6c 0040     ..@..~@.....l.@.
20000944:	9c68 0040 9ae0 0040 9ae0 0040 9ae0 0040     h.@...@...@...@.
20000954:	9ae0 0040 9ae0 0040 9ae0 0040 9ae0 0040     ..@...@...@...@.
20000964:	9ae0 0040 9ae0 0040 ffff ffff ffff ffff     ..@...@.........
20000974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
